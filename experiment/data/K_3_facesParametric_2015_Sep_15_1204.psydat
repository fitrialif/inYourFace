ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
V/home/labor/faces/data/K_3_facesParametric_2015_Sep_15_1204
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'facesParametric'
p11
sS'dataNames'
p12
(lp13
S'key_resp_2.keys'
p14
aS'key_resp_2.rt'
p15
aS'basicRating1.response'
p16
aS'basicRating1.rt'
p17
aS'basicRating2.response'
p18
aS'basicRating2.rt'
p19
aS'basicRating3.response'
p20
aS'basicRating3.rt'
p21
aS'basicRating4.response'
p22
aS'basicRating4.rt'
p23
aS'key_resp_3.keys'
p24
aS'key_resp_3.rt'
p25
aS'key_resp_4.keys'
p26
aS'key_resp_4.rt'
p27
aS'mouseResp.x'
p28
aS'mouseResp.y'
p29
aS'mouseResp.leftButton'
p30
aS'mouseResp.midButton'
p31
aS'mouseResp.rightButton'
p32
aS'mouseResp.time'
p33
asS'autoLog'
p34
I01
sS'extraInfo'
p35
(dp36
S'date'
p37
V2015_Sep_15_1204
p38
sVgroup
p39
VK
sS'expName'
p40
g11
sVparticipant
p41
V3
sS'frameRate'
p42
cnumpy.core.multiarray
scalar
p43
(cnumpy
dtype
p44
(S'f8'
I0
I1
tRp45
(I3
S'<'
NNNI-1
I-1
I0
tbS'3\xd2\xad\xbay\xdaM@'
tRp46
ssS'loopsUnfinished'
p47
(lp48
sS'saveWideText'
p49
I01
sS'thisEntry'
p50
(dp51
sS'version'
p52
S''
sS'_paramNamesSoFar'
p53
(lp54
S'img'
p55
aS'num'
p56
asS'entries'
p57
(lp58
(dp59
g15
F34.860453128814697
sg40
g11
sg39
VK
sg37
g38
sg41
V3
sg42
g46
sg14
S'return'
p60
sa(dp61
g16
Nsg18
S'ANG'
p62
sg55
S'./basicStim/23M_SP_O.jpg'
p63
sg21
Nsg19
F15.462999999999999
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p64
I0
sg40
g11
sS'basicLoop.thisRepN'
p65
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p66
I0
sS'basicLoop.thisIndex'
p67
I54
sa(dp68
g16
Nsg18
Nsg55
S'./basicStim/36M_SA_C.jpg'
p69
sg21
F13.526999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p70
I1
sg40
g11
sS'basicLoop.thisRepN'
p71
I0
sg20
S'SUP'
p72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p73
I1
sS'basicLoop.thisIndex'
p74
I81
sa(dp75
g16
Nsg18
Nsg55
S'./basicStim/34M_AN_O.jpg'
p76
sg21
F7.8319999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p77
I2
sg40
g11
sS'basicLoop.thisRepN'
p78
I0
sg20
S'DIS'
p79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p80
I2
sS'basicLoop.thisIndex'
p81
I70
sa(dp82
g16
Nsg18
Nsg55
S'./basicStim/24M_FE_O.jpg'
p83
sg21
F17.053999999999998
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p84
I3
sg40
g11
sS'basicLoop.thisRepN'
p85
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p86
I3
sS'basicLoop.thisIndex'
p87
I58
sa(dp88
g16
Nsg18
Nsg55
S'./basicStim/07F_FE_O.jpg'
p89
sg21
F10.292999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p90
I4
sg40
g11
sS'basicLoop.thisRepN'
p91
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p92
I4
sS'basicLoop.thisIndex'
p93
I30
sa(dp94
g16
Nsg18
Nsg55
S'./basicStim/28M_NE_C.jpg'
p95
sg21
Nsg19
Nsg17
Nsg41
V3
sg42
g46
sg23
F8.7330000000000005
sg22
S'NTR'
p96
sS'basicLoop.thisTrialN'
p97
I5
sg40
g11
sS'basicLoop.thisRepN'
p98
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p99
I5
sS'basicLoop.thisIndex'
p100
I69
sa(dp101
g16
Nsg18
Nsg55
S'./basicStim/24M_SA_C.jpg'
p102
sg21
F8.0960000000000001
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p103
I6
sg40
g11
sS'basicLoop.thisRepN'
p104
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p105
I6
sS'basicLoop.thisIndex'
p106
I60
sa(dp107
g16
Nsg18
Nsg55
S'./basicStim/36M_AN_O.jpg'
p108
sg21
Nsg19
Nsg17
Nsg41
V3
sg42
g46
sg23
F6.4009999999999998
sg22
g96
sS'basicLoop.thisTrialN'
p109
I7
sg40
g11
sS'basicLoop.thisRepN'
p110
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p111
I7
sS'basicLoop.thisIndex'
p112
I77
sa(dp113
g16
Nsg18
Nsg55
S'./basicStim/02F_AN_O.jpg'
p114
sg21
F4.375
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p115
I8
sg40
g11
sS'basicLoop.thisRepN'
p116
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p117
I8
sS'basicLoop.thisIndex'
p118
I7
sa(dp119
g16
Nsg18
S'FEA'
p120
sg55
S'./basicStim/09F_SP_O.jpg'
p121
sg21
Nsg19
F8.3970000000000002
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p122
I9
sg40
g11
sS'basicLoop.thisRepN'
p123
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p124
I9
sS'basicLoop.thisIndex'
p125
I40
sa(dp126
g16
Nsg18
Nsg55
S'./basicStim/23M_NE_C.jpg'
p127
sg21
Nsg19
Nsg17
Nsg41
V3
sg42
g46
sg23
F4.3410000000000002
sg22
g96
sS'basicLoop.thisTrialN'
p128
I10
sg40
g11
sS'basicLoop.thisRepN'
p129
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p130
I10
sS'basicLoop.thisIndex'
p131
I55
sa(dp132
g16
Nsg18
Nsg55
S'./basicStim/24M_NE_C.jpg'
p133
sg21
Nsg19
Nsg17
Nsg41
V3
sg42
g46
sg23
F9.1359999999999992
sg22
g96
sS'basicLoop.thisTrialN'
p134
I11
sg40
g11
sS'basicLoop.thisRepN'
p135
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p136
I11
sS'basicLoop.thisIndex'
p137
I62
sa(dp138
g16
Nsg18
g120
sg55
S'./basicStim/21M_AN_O.jpg'
p139
sg21
Nsg19
F6.6449999999999996
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p140
I12
sg40
g11
sS'basicLoop.thisRepN'
p141
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p142
I12
sS'basicLoop.thisIndex'
p143
I42
sa(dp144
g16
Nsg18
Nsg55
S'./basicStim/03F_DI_O.jpg'
p145
sg21
F2.7839999999999998
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p146
I13
sg40
g11
sS'basicLoop.thisRepN'
p147
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p148
I13
sS'basicLoop.thisIndex'
p149
I15
sa(dp150
g16
Nsg18
Nsg55
S'./basicStim/36M_SP_O.jpg'
p151
sg21
F5.2329999999999997
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p152
I14
sg40
g11
sS'basicLoop.thisRepN'
p153
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p154
I14
sS'basicLoop.thisIndex'
p155
I82
sa(dp156
g16
Nsg18
Nsg55
S'./basicStim/01F_SA_C.jpg'
p157
sg21
F5.532
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p158
I15
sg40
g11
sS'basicLoop.thisRepN'
p159
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p160
I15
sS'basicLoop.thisIndex'
p161
I4
sa(dp162
g16
Nsg18
Nsg55
S'./basicStim/01F_SP_O.jpg'
p163
sg21
F3.5219999999999998
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p164
I16
sg40
g11
sS'basicLoop.thisRepN'
p165
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p166
I16
sS'basicLoop.thisIndex'
p167
I5
sa(dp168
g16
Nsg18
g62
sg55
S'./basicStim/23M_SA_C.jpg'
p169
sg21
Nsg19
F4.3419999999999996
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p170
I17
sg40
g11
sS'basicLoop.thisRepN'
p171
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p172
I17
sS'basicLoop.thisIndex'
p173
I53
sa(dp174
g16
Nsg18
Nsg55
S'./basicStim/06F_AN_O.jpg'
p175
sg21
F5.1740000000000004
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p176
I18
sg40
g11
sS'basicLoop.thisRepN'
p177
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p178
I18
sS'basicLoop.thisIndex'
p179
I21
sa(dp180
g16
S'SAD'
p181
sg18
Nsg55
S'./basicStim/03F_SA_C.jpg'
p182
sg21
Nsg19
Nsg17
F4.1849999999999996
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p183
I19
sg40
g11
sS'basicLoop.thisRepN'
p184
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p185
I19
sS'basicLoop.thisIndex'
p186
I18
sa(dp187
g16
Nsg18
Nsg55
S'./basicStim/02F_SP_O.jpg'
p188
sg21
F5.8250000000000002
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p189
I20
sg40
g11
sS'basicLoop.thisRepN'
p190
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p191
I20
sS'basicLoop.thisIndex'
p192
I12
sa(dp193
g16
S'HAP'
p194
sg18
Nsg55
S'./basicStim/02F_HA_O.jpg'
p195
sg21
Nsg19
Nsg17
F3.5089999999999999
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p196
I21
sg40
g11
sS'basicLoop.thisRepN'
p197
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p198
I21
sS'basicLoop.thisIndex'
p199
I10
sa(dp200
g16
g194
sg18
Nsg55
S'./basicStim/07F_HA_O.jpg'
p201
sg21
Nsg19
Nsg17
F3.1120000000000001
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p202
I22
sg40
g11
sS'basicLoop.thisRepN'
p203
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p204
I22
sS'basicLoop.thisIndex'
p205
I31
sa(dp206
g16
Nsg18
g62
sg55
S'./basicStim/03F_AN_O.jpg'
p207
sg21
Nsg19
F2.9380000000000002
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p208
I23
sg40
g11
sS'basicLoop.thisRepN'
p209
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p210
I23
sS'basicLoop.thisIndex'
p211
I14
sa(dp212
g16
Nsg18
Nsg55
S'./basicStim/36M_NE_C.jpg'
p213
sg21
Nsg19
Nsg17
Nsg41
V3
sg42
g46
sg23
F4.5140000000000002
sg22
g96
sS'basicLoop.thisTrialN'
p214
I24
sg40
g11
sS'basicLoop.thisRepN'
p215
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p216
I24
sS'basicLoop.thisIndex'
p217
I83
sa(dp218
g16
Nsg18
g62
sg55
S'./basicStim/23M_AN_O.jpg'
p219
sg21
Nsg19
F3.0059999999999998
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p220
I25
sg40
g11
sS'basicLoop.thisRepN'
p221
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p222
I25
sS'basicLoop.thisIndex'
p223
I49
sa(dp224
g16
g194
sg18
Nsg55
S'./basicStim/36M_HA_O.jpg'
p225
sg21
Nsg19
Nsg17
F1.671
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p226
I26
sg40
g11
sS'basicLoop.thisRepN'
p227
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p228
I26
sS'basicLoop.thisIndex'
p229
I80
sa(dp230
g16
g181
sg18
Nsg55
S'./basicStim/24M_DI_O.jpg'
p231
sg21
Nsg19
Nsg17
F4.9820000000000002
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p232
I27
sg40
g11
sS'basicLoop.thisRepN'
p233
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p234
I27
sS'basicLoop.thisIndex'
p235
I57
sa(dp236
g16
Nsg18
Nsg55
S'./basicStim/36M_FE_O.jpg'
p237
sg21
Nsg19
Nsg17
Nsg41
V3
sg42
g46
sg23
F5.9169999999999998
sg22
g96
sS'basicLoop.thisTrialN'
p238
I28
sg40
g11
sS'basicLoop.thisRepN'
p239
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p240
I28
sS'basicLoop.thisIndex'
p241
I79
sa(dp242
g16
Nsg18
Nsg55
S'./basicStim/21M_DI_O.jpg'
p243
sg21
F2.3450000000000002
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p244
I29
sg40
g11
sS'basicLoop.thisRepN'
p245
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p246
I29
sS'basicLoop.thisIndex'
p247
I43
sa(dp248
g16
g194
sg18
Nsg55
S'./basicStim/23M_HA_O.jpg'
p249
sg21
Nsg19
Nsg17
F3.1930000000000001
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p250
I30
sg40
g11
sS'basicLoop.thisRepN'
p251
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p252
I30
sS'basicLoop.thisIndex'
p253
I52
sa(dp254
g16
g194
sg18
Nsg55
S'./basicStim/09F_HA_O.jpg'
p255
sg21
Nsg19
Nsg17
F3.157
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p256
I31
sg40
g11
sS'basicLoop.thisRepN'
p257
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p258
I31
sS'basicLoop.thisIndex'
p259
I38
sa(dp260
g16
Nsg18
Nsg55
S'./basicStim/24M_SP_O.jpg'
p261
sg21
F4.1109999999999998
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p262
I32
sg40
g11
sS'basicLoop.thisRepN'
p263
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p264
I32
sS'basicLoop.thisIndex'
p265
I61
sa(dp266
g16
Nsg18
g62
sg55
S'./basicStim/07F_SP_O.jpg'
p267
sg21
Nsg19
F7.1580000000000004
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p268
I33
sg40
g11
sS'basicLoop.thisRepN'
p269
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p270
I33
sS'basicLoop.thisIndex'
p271
I33
sa(dp272
g16
Nsg18
Nsg55
S'./basicStim/06F_HA_O.jpg'
p273
sg21
F4.766
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p274
I34
sg40
g11
sS'basicLoop.thisRepN'
p275
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p276
I34
sS'basicLoop.thisIndex'
p277
I24
sa(dp278
g16
Nsg18
g62
sg55
S'./basicStim/01F_AN_O.jpg'
p279
sg21
Nsg19
F3.04
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p280
I35
sg40
g11
sS'basicLoop.thisRepN'
p281
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p282
I35
sS'basicLoop.thisIndex'
p283
I0
sa(dp284
g16
Nsg18
g62
sg55
S'./basicStim/02F_FE_O.jpg'
p285
sg21
Nsg19
F3.8559999999999999
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p286
I36
sg40
g11
sS'basicLoop.thisRepN'
p287
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p288
I36
sS'basicLoop.thisIndex'
p289
I9
sa(dp290
g16
Nsg18
Nsg55
S'./basicStim/21M_FE_O.jpg'
p291
sg21
F3.4359999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p292
I37
sg40
g11
sS'basicLoop.thisRepN'
p293
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p294
I37
sS'basicLoop.thisIndex'
p295
I44
sa(dp296
g16
g194
sg18
Nsg55
S'./basicStim/03F_SP_O.jpg'
p297
sg21
Nsg19
Nsg17
F2.8210000000000002
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p298
I38
sg40
g11
sS'basicLoop.thisRepN'
p299
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p300
I38
sS'basicLoop.thisIndex'
p301
I19
sa(dp302
g16
Nsg18
Nsg55
S'./basicStim/28M_SP_O.jpg'
p303
sg21
F3.7570000000000001
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p304
I39
sg40
g11
sS'basicLoop.thisRepN'
p305
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p306
I39
sS'basicLoop.thisIndex'
p307
I68
sa(dp308
g16
g181
sg18
Nsg55
S'./basicStim/07F_SA_C.jpg'
p309
sg21
Nsg19
Nsg17
F5.2320000000000002
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p310
I40
sg40
g11
sS'basicLoop.thisRepN'
p311
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p312
I40
sS'basicLoop.thisIndex'
p313
I32
sa(dp314
g16
Nsg18
Nsg55
S'./basicStim/09F_NE_C.jpg'
p315
sg21
F7.8780000000000001
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p316
I41
sg40
g11
sS'basicLoop.thisRepN'
p317
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p318
I41
sS'basicLoop.thisIndex'
p319
I41
sa(dp320
g16
g194
sg18
Nsg55
S'./basicStim/01F_HA_O.jpg'
p321
sg21
Nsg19
Nsg17
F1.413
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p322
I42
sg40
g11
sS'basicLoop.thisRepN'
p323
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p324
I42
sS'basicLoop.thisIndex'
p325
I3
sa(dp326
g16
Nsg18
Nsg55
S'./basicStim/02F_DI_O.jpg'
p327
sg21
F2.903
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p328
I43
sg40
g11
sS'basicLoop.thisRepN'
p329
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p330
I43
sS'basicLoop.thisIndex'
p331
I8
sa(dp332
g16
Nsg18
g62
sg55
S'./basicStim/34M_SA_C.jpg'
p333
sg21
Nsg19
F2.4369999999999998
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p334
I44
sg40
g11
sS'basicLoop.thisRepN'
p335
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p336
I44
sS'basicLoop.thisIndex'
p337
I74
sa(dp338
g16
g194
sg18
Nsg55
S'./basicStim/34M_SP_O.jpg'
p339
sg21
Nsg19
Nsg17
F3.677
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p340
I45
sg40
g11
sS'basicLoop.thisRepN'
p341
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p342
I45
sS'basicLoop.thisIndex'
p343
I75
sa(dp344
g16
Nsg18
Nsg55
S'./basicStim/02F_NE_C.jpg'
p345
sg21
F2.7200000000000002
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p346
I46
sg40
g11
sS'basicLoop.thisRepN'
p347
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p348
I46
sS'basicLoop.thisIndex'
p349
I13
sa(dp350
g16
Nsg18
Nsg55
S'./basicStim/28M_SA_C.jpg'
p351
sg21
Nsg19
Nsg17
Nsg41
V3
sg42
g46
sg23
F3.625
sg22
g96
sS'basicLoop.thisTrialN'
p352
I47
sg40
g11
sS'basicLoop.thisRepN'
p353
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p354
I47
sS'basicLoop.thisIndex'
p355
I67
sa(dp356
g16
Nsg18
Nsg55
S'./basicStim/03F_FE_O.jpg'
p357
sg21
F4.4640000000000004
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p358
I48
sg40
g11
sS'basicLoop.thisRepN'
p359
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p360
I48
sS'basicLoop.thisIndex'
p361
I16
sa(dp362
g16
Nsg18
Nsg55
S'./basicStim/28M_AN_O.jpg'
p363
sg21
F3.335
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p364
I49
sg40
g11
sS'basicLoop.thisRepN'
p365
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p366
I49
sS'basicLoop.thisIndex'
p367
I63
sa(dp368
g16
Nsg18
g120
sg55
S'./basicStim/06F_FE_O.jpg'
p369
sg21
Nsg19
F1.8700000000000001
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p370
I50
sg40
g11
sS'basicLoop.thisRepN'
p371
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p372
I50
sS'basicLoop.thisIndex'
p373
I23
sa(dp374
g16
Nsg18
g62
sg55
S'./basicStim/09F_AN_O.jpg'
p375
sg21
Nsg19
F2.988
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p376
I51
sg40
g11
sS'basicLoop.thisRepN'
p377
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p378
I51
sS'basicLoop.thisIndex'
p379
I35
sa(dp380
g16
Nsg18
Nsg55
S'./basicStim/34M_FE_O.jpg'
p381
sg21
F2.532
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p382
I52
sg40
g11
sS'basicLoop.thisRepN'
p383
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p384
I52
sS'basicLoop.thisIndex'
p385
I72
sa(dp386
g16
Nsg18
g62
sg55
S'./basicStim/06F_SA_C.jpg'
p387
sg21
Nsg19
F3.1549999999999998
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p388
I53
sg40
g11
sS'basicLoop.thisRepN'
p389
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p390
I53
sS'basicLoop.thisIndex'
p391
I25
sa(dp392
g16
g194
sg18
Nsg55
S'./basicStim/03F_HA_O.jpg'
p393
sg21
Nsg19
Nsg17
F1.7330000000000001
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p394
I54
sg40
g11
sS'basicLoop.thisRepN'
p395
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p396
I54
sS'basicLoop.thisIndex'
p397
I17
sa(dp398
g16
Nsg18
g62
sg55
S'./basicStim/01F_FE_O.jpg'
p399
sg21
Nsg19
F4.202
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p400
I55
sg40
g11
sS'basicLoop.thisRepN'
p401
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p402
I55
sS'basicLoop.thisIndex'
p403
I2
sa(dp404
g16
g194
sg18
Nsg55
S'./basicStim/28M_HA_O.jpg'
p405
sg21
Nsg19
Nsg17
F1.28
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p406
I56
sg40
g11
sS'basicLoop.thisRepN'
p407
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p408
I56
sS'basicLoop.thisIndex'
p409
I66
sa(dp410
g16
Nsg18
Nsg55
S'./basicStim/34M_DI_O.jpg'
p411
sg21
F1.925
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p412
I57
sg40
g11
sS'basicLoop.thisRepN'
p413
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p414
I57
sS'basicLoop.thisIndex'
p415
I71
sa(dp416
g16
Nsg18
Nsg55
S'./basicStim/28M_DI_O.jpg'
p417
sg21
F2.0939999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p418
I58
sg40
g11
sS'basicLoop.thisRepN'
p419
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p420
I58
sS'basicLoop.thisIndex'
p421
I64
sa(dp422
g16
Nsg18
Nsg55
S'./basicStim/01F_NE_C.jpg'
p423
sg21
F3.3199999999999998
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p424
I59
sg40
g11
sS'basicLoop.thisRepN'
p425
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p426
I59
sS'basicLoop.thisIndex'
p427
I6
sa(dp428
g16
Nsg18
g62
sg55
S'./basicStim/07F_AN_O.jpg'
p429
sg21
Nsg19
F3.2050000000000001
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p430
I60
sg40
g11
sS'basicLoop.thisRepN'
p431
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p432
I60
sS'basicLoop.thisIndex'
p433
I28
sa(dp434
g16
Nsg18
Nsg55
S'./basicStim/21M_SA_C.jpg'
p435
sg21
Nsg19
Nsg17
Nsg41
V3
sg42
g46
sg23
F7.5819999999999999
sg22
g96
sS'basicLoop.thisTrialN'
p436
I61
sg40
g11
sS'basicLoop.thisRepN'
p437
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p438
I61
sS'basicLoop.thisIndex'
p439
I46
sa(dp440
g16
Nsg18
Nsg55
S'./basicStim/36M_DI_O.jpg'
p441
sg21
F1.3069999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p442
I62
sg40
g11
sS'basicLoop.thisRepN'
p443
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p444
I62
sS'basicLoop.thisIndex'
p445
I78
sa(dp446
g16
Nsg18
Nsg55
S'./basicStim/34M_NE_C.jpg'
p447
sg21
F4.2910000000000004
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p448
I63
sg40
g11
sS'basicLoop.thisRepN'
p449
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p450
I63
sS'basicLoop.thisIndex'
p451
I76
sa(dp452
g16
g194
sg18
Nsg55
S'./basicStim/24M_HA_O.jpg'
p453
sg21
Nsg19
Nsg17
F1.9810000000000001
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p454
I64
sg40
g11
sS'basicLoop.thisRepN'
p455
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p456
I64
sS'basicLoop.thisIndex'
p457
I59
sa(dp458
g16
Nsg18
Nsg55
S'./basicStim/06F_DI_O.jpg'
p459
sg21
F1.8919999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p460
I65
sg40
g11
sS'basicLoop.thisRepN'
p461
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p462
I65
sS'basicLoop.thisIndex'
p463
I22
sa(dp464
g16
Nsg18
g62
sg55
S'./basicStim/21M_NE_C.jpg'
p465
sg21
Nsg19
F3.4239999999999999
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p466
I66
sg40
g11
sS'basicLoop.thisRepN'
p467
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p468
I66
sS'basicLoop.thisIndex'
p469
I48
sa(dp470
g16
Nsg18
Nsg55
S'./basicStim/21M_SP_O.jpg'
p471
sg21
F2.653
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p472
I67
sg40
g11
sS'basicLoop.thisRepN'
p473
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p474
I67
sS'basicLoop.thisIndex'
p475
I47
sa(dp476
g16
Nsg18
Nsg55
S'./basicStim/09F_DI_O.jpg'
p477
sg21
F1.9279999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p478
I68
sg40
g11
sS'basicLoop.thisRepN'
p479
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p480
I68
sS'basicLoop.thisIndex'
p481
I36
sa(dp482
g16
Nsg18
Nsg55
S'./basicStim/01F_DI_O.jpg'
p483
sg21
F1.46
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p484
I69
sg40
g11
sS'basicLoop.thisRepN'
p485
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p486
I69
sS'basicLoop.thisIndex'
p487
I1
sa(dp488
g16
g194
sg18
Nsg55
S'./basicStim/21M_HA_O.jpg'
p489
sg21
Nsg19
Nsg17
F1.6339999999999999
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p490
I70
sg40
g11
sS'basicLoop.thisRepN'
p491
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p492
I70
sS'basicLoop.thisIndex'
p493
I45
sa(dp494
g16
Nsg18
g62
sg55
S'./basicStim/09F_SA_C.jpg'
p495
sg21
Nsg19
F1.9790000000000001
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p496
I71
sg40
g11
sS'basicLoop.thisRepN'
p497
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p498
I71
sS'basicLoop.thisIndex'
p499
I39
sa(dp500
g16
Nsg18
Nsg55
S'./basicStim/07F_NE_C.jpg'
p501
sg21
Nsg19
Nsg17
Nsg41
V3
sg42
g46
sg23
F5.8570000000000002
sg22
g96
sS'basicLoop.thisTrialN'
p502
I72
sg40
g11
sS'basicLoop.thisRepN'
p503
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p504
I72
sS'basicLoop.thisIndex'
p505
I34
sa(dp506
g16
Nsg18
Nsg55
S'./basicStim/02F_SA_C.jpg'
p507
sg21
Nsg19
Nsg17
Nsg41
V3
sg42
g46
sg23
F4.1749999999999998
sg22
g96
sS'basicLoop.thisTrialN'
p508
I73
sg40
g11
sS'basicLoop.thisRepN'
p509
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p510
I73
sS'basicLoop.thisIndex'
p511
I11
sa(dp512
g16
g181
sg18
Nsg55
S'./basicStim/06F_NE_C.jpg'
p513
sg21
Nsg19
Nsg17
F4.7199999999999998
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p514
I74
sg40
g11
sS'basicLoop.thisRepN'
p515
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p516
I74
sS'basicLoop.thisIndex'
p517
I27
sa(dp518
g16
Nsg18
Nsg55
S'./basicStim/23M_DI_O.jpg'
p519
sg21
F2.2789999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p520
I75
sg40
g11
sS'basicLoop.thisRepN'
p521
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p522
I75
sS'basicLoop.thisIndex'
p523
I50
sa(dp524
g16
Nsg18
g62
sg55
S'./basicStim/24M_AN_O.jpg'
p525
sg21
Nsg19
F2.4199999999999999
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p526
I76
sg40
g11
sS'basicLoop.thisRepN'
p527
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p528
I76
sS'basicLoop.thisIndex'
p529
I56
sa(dp530
g16
g194
sg18
Nsg55
S'./basicStim/34M_HA_O.jpg'
p531
sg21
Nsg19
Nsg17
F1.448
sg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p532
I77
sg40
g11
sS'basicLoop.thisRepN'
p533
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p534
I77
sS'basicLoop.thisIndex'
p535
I73
sa(dp536
g16
Nsg18
g62
sg55
S'./basicStim/28M_FE_O.jpg'
p537
sg21
Nsg19
F2.532
sg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p538
I78
sg40
g11
sS'basicLoop.thisRepN'
p539
I0
sg20
Nsg37
g38
sg39
VK
sS'basicLoop.thisN'
p540
I78
sS'basicLoop.thisIndex'
p541
I65
sa(dp542
g16
Nsg18
Nsg55
S'./basicStim/09F_FE_O.jpg'
p543
sg21
F3.9569999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p544
I79
sg40
g11
sS'basicLoop.thisRepN'
p545
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p546
I79
sS'basicLoop.thisIndex'
p547
I37
sa(dp548
g16
Nsg18
Nsg55
S'./basicStim/07F_DI_O.jpg'
p549
sg21
F1.2470000000000001
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p550
I80
sg40
g11
sS'basicLoop.thisRepN'
p551
I0
sg20
g79
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p552
I80
sS'basicLoop.thisIndex'
p553
I29
sa(dp554
g16
Nsg18
Nsg55
S'./basicStim/03F_NE_C.jpg'
p555
sg21
F1.4630000000000001
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p556
I81
sg40
g11
sS'basicLoop.thisRepN'
p557
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p558
I81
sS'basicLoop.thisIndex'
p559
I20
sa(dp560
g16
Nsg18
Nsg55
S'./basicStim/06F_SP_O.jpg'
p561
sg21
F1.4419999999999999
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p562
I82
sg40
g11
sS'basicLoop.thisRepN'
p563
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p564
I82
sS'basicLoop.thisIndex'
p565
I26
sa(dp566
g16
Nsg18
Nsg55
S'./basicStim/23M_FE_O.jpg'
p567
sg21
F4.2080000000000002
sg19
Nsg17
Nsg41
V3
sg42
g46
sg23
Nsg22
NsS'basicLoop.thisTrialN'
p568
I83
sg40
g11
sS'basicLoop.thisRepN'
p569
I0
sg20
g72
sg37
g38
sg39
VK
sS'basicLoop.thisN'
p570
I83
sS'basicLoop.thisIndex'
p571
I51
sa(dp572
g40
g11
sg39
VK
sg37
g38
sg24
S'return'
p573
sg41
V3
sg42
g46
sg25
F14.027307987213135
sa(dp574
g15
F23.882593870162964
sg40
g11
sg39
VK
sg37
g38
sg41
V3
sg42
g46
sg14
S'return'
p575
sa(dp576
g40
g11
sg39
VK
sg37
g38
sg24
S'return'
p577
sg41
V3
sg42
g46
sg25
F12.133668184280396
sa(dp578
g37
g38
sg40
g11
sg27
F11.413175106048584
sg26
S'return'
p579
sg39
VK
sg41
V3
sg42
g46
sa(dp580
g31
I0
sg40
g11
sg39
VK
sS'img'
p581
S'./stim/MorphM6_10_orig.jpg'
p582
sS'trials.thisIndex'
p583
g43
(g44
(S'i8'
I0
I1
tRp584
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp585
sS'trials.thisRepN'
p586
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00p7\xc0'
tRp587
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x9e&\xc0'
tRp588
sg30
I0
sg56
g43
(g584
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp589
sS'trials.thisTrialN'
p590
I0
sg32
I1
sg37
g38
sg41
V3
sg33
F11.899281978607178
sS'trials.thisN'
p591
I0
sa(dp592
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_04_orig.jpg'
p593
sS'trials.thisIndex'
p594
g43
(g584
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp595
sS'trials.thisRepN'
p596
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00p7\xc0'
tRp597
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xc2 \xc0'
tRp598
sg30
I0
sg56
g43
(g584
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp599
sS'trials.thisTrialN'
p600
I1
sg32
I1
sg37
g38
sg41
V3
sg33
F11.964088916778564
sS'trials.thisN'
p601
I1
sa(dp602
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_03_orig.jpg'
p603
sS'trials.thisIndex'
p604
g43
(g584
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp605
sS'trials.thisRepN'
p606
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\xb73\xc0'
tRp607
sg29
g43
(g45
S'\x00\x00\x00\x00\x00^*@'
tRp608
sg30
I1
sg56
g43
(g584
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp609
sS'trials.thisTrialN'
p610
I2
sg32
I0
sg37
g38
sg41
V3
sg33
F13.908164978027344
sS'trials.thisN'
p611
I2
sa(dp612
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_00_orig.jpg'
p613
sS'trials.thisIndex'
p614
g43
(g584
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp615
sS'trials.thisRepN'
p616
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\xca'\xc0"
tRp617
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xc8)@'
tRp618
sg30
I1
sg56
g43
(g584
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp619
sS'trials.thisTrialN'
p620
I3
sg32
I0
sg37
g38
sg41
V3
sg33
F10.524014949798584
sS'trials.thisN'
p621
I3
sa(dp622
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM6_09_orig.jpg'
p623
sS'trials.thisIndex'
p624
g43
(g584
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp625
sS'trials.thisRepN'
p626
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xad&\xc0'
tRp627
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xe6)@'
tRp628
sg30
I0
sg56
g43
(g584
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp629
sS'trials.thisTrialN'
p630
I4
sg32
I1
sg37
g38
sg41
V3
sg33
F9.3493151664733887
sS'trials.thisN'
p631
I4
sa(dp632
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_02_orig.jpg'
p633
sS'trials.thisIndex'
p634
g43
(g584
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp635
sS'trials.thisRepN'
p636
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x004'\xc0"
tRp637
sg29
g43
(g45
S'\x00\x00\x00\x00\x00})@'
tRp638
sg30
I1
sg56
g43
(g584
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp639
sS'trials.thisTrialN'
p640
I5
sg32
I0
sg37
g38
sg41
V3
sg33
F2.2268421649932861
sS'trials.thisN'
p641
I5
sa(dp642
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_06_orig.jpg'
p643
sS'trials.thisIndex'
p644
g43
(g584
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp645
sS'trials.thisRepN'
p646
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp647
sg29
g43
(g45
S'\x00\x00\x00\x00\x00#)@'
tRp648
sg30
I1
sg56
g43
(g584
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp649
sS'trials.thisTrialN'
p650
I6
sg32
I0
sg37
g38
sg41
V3
sg33
F4.4057800769805908
sS'trials.thisN'
p651
I6
sa(dp652
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_08_orig.jpg'
p653
sS'trials.thisIndex'
p654
g43
(g584
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp655
sS'trials.thisRepN'
p656
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xcb&\xc0'
tRp657
sg29
g43
(g45
S"\x00\x00\x00\x00\x00\xe8'@"
tRp658
sg30
I0
sg56
g43
(g584
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp659
sS'trials.thisTrialN'
p660
I7
sg32
I1
sg37
g38
sg41
V3
sg33
F2.3279201984405518
sS'trials.thisN'
p661
I7
sa(dp662
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM6_04_orig.jpg'
p663
sS'trials.thisIndex'
p664
g43
(g584
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp665
sS'trials.thisRepN'
p666
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x8f&\xc0'
tRp667
sg29
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'@"
tRp668
sg30
I0
sg56
g43
(g584
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp669
sS'trials.thisTrialN'
p670
I8
sg32
I1
sg37
g38
sg41
V3
sg33
F3.8358790874481201
sS'trials.thisN'
p671
I8
sa(dp672
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_05_orig.jpg'
p673
sS'trials.thisIndex'
p674
g43
(g584
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp675
sS'trials.thisRepN'
p676
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x004'\xc0"
tRp677
sg29
g43
(g45
S"\x00\x00\x00\x00\x00a'@"
tRp678
sg30
I0
sg56
g43
(g584
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp679
sS'trials.thisTrialN'
p680
I9
sg32
I1
sg37
g38
sg41
V3
sg33
F4.8396029472351074
sS'trials.thisN'
p681
I9
sa(dp682
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_01_orig.jpg'
p683
sS'trials.thisIndex'
p684
g43
(g584
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp685
sS'trials.thisRepN'
p686
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x90%\xc0'
tRp687
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x8f&@'
tRp688
sg30
I1
sg56
g43
(g584
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp689
sS'trials.thisTrialN'
p690
I10
sg32
I0
sg37
g38
sg41
V3
sg33
F1.2384769916534424
sS'trials.thisN'
p691
I10
sa(dp692
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_03_orig.jpg'
p693
sS'trials.thisIndex'
p694
g43
(g584
S'\x0b\x00\x00\x00\x00\x00\x00\x00'
tRp695
sS'trials.thisRepN'
p696
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xa0$\xc0'
tRp697
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xae%@'
tRp698
sg30
I0
sg56
g43
(g584
S'\x0b\x00\x00\x00\x00\x00\x00\x00'
tRp699
sS'trials.thisTrialN'
p700
I11
sg32
I1
sg37
g38
sg41
V3
sg33
F3.5335419178009033
sS'trials.thisN'
p701
I11
sa(dp702
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_09_orig.jpg'
p703
sS'trials.thisIndex'
p704
g43
(g584
S'\x0c\x00\x00\x00\x00\x00\x00\x00'
tRp705
sS'trials.thisRepN'
p706
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xcd$\xc0'
tRp707
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x81%@'
tRp708
sg30
I0
sg56
g43
(g584
S'\x0c\x00\x00\x00\x00\x00\x00\x00'
tRp709
sS'trials.thisTrialN'
p710
I12
sg32
I1
sg37
g38
sg41
V3
sg33
F3.0640320777893066
sS'trials.thisN'
p711
I12
sa(dp712
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_01_orig.jpg'
p713
sS'trials.thisIndex'
p714
g43
(g584
S'\r\x00\x00\x00\x00\x00\x00\x00'
tRp715
sS'trials.thisRepN'
p716
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xcd$\xc0'
tRp717
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x81%@'
tRp718
sg30
I1
sg56
g43
(g584
S'\r\x00\x00\x00\x00\x00\x00\x00'
tRp719
sS'trials.thisTrialN'
p720
I13
sg32
I0
sg37
g38
sg41
V3
sg33
F1.79221510887146
sS'trials.thisN'
p721
I13
sa(dp722
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_03_orig.jpg'
p723
sS'trials.thisIndex'
p724
g43
(g584
S'\x0e\x00\x00\x00\x00\x00\x00\x00'
tRp725
sS'trials.thisRepN'
p726
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x18%\xc0'
tRp727
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x9f%@'
tRp728
sg30
I0
sg56
g43
(g584
S'\x0e\x00\x00\x00\x00\x00\x00\x00'
tRp729
sS'trials.thisTrialN'
p730
I14
sg32
I1
sg37
g38
sg41
V3
sg33
F3.7674300670623779
sS'trials.thisN'
p731
I14
sa(dp732
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_05_orig.jpg'
p733
sS'trials.thisIndex'
p734
g43
(g584
S'\x0f\x00\x00\x00\x00\x00\x00\x00'
tRp735
sS'trials.thisRepN'
p736
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xfa$\xc0'
tRp737
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp738
sg30
I0
sg56
g43
(g584
S'\x0f\x00\x00\x00\x00\x00\x00\x00'
tRp739
sS'trials.thisTrialN'
p740
I15
sg32
I1
sg37
g38
sg41
V3
sg33
F3.8026509284973145
sS'trials.thisN'
p741
I15
sa(dp742
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_08_orig.jpg'
p743
sS'trials.thisIndex'
p744
g43
(g584
S'\x10\x00\x00\x00\x00\x00\x00\x00'
tRp745
sS'trials.thisRepN'
p746
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xeb$\xc0'
tRp747
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp748
sg30
I0
sg56
g43
(g584
S'\x10\x00\x00\x00\x00\x00\x00\x00'
tRp749
sS'trials.thisTrialN'
p750
I16
sg32
I1
sg37
g38
sg41
V3
sg33
F3.5337328910827637
sS'trials.thisN'
p751
I16
sa(dp752
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_01_orig.jpg'
p753
sS'trials.thisIndex'
p754
g43
(g584
S'\x11\x00\x00\x00\x00\x00\x00\x00'
tRp755
sS'trials.thisRepN'
p756
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\t%\xc0'
tRp757
sg29
g43
(g45
S'\x00\x00\x00\x00\x00&&@'
tRp758
sg30
I1
sg56
g43
(g584
S'\x11\x00\x00\x00\x00\x00\x00\x00'
tRp759
sS'trials.thisTrialN'
p760
I17
sg32
I0
sg37
g38
sg41
V3
sg33
F1.471405029296875
sS'trials.thisN'
p761
I17
sa(dp762
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_10_orig.jpg'
p763
sS'trials.thisIndex'
p764
g43
(g584
S'\x12\x00\x00\x00\x00\x00\x00\x00'
tRp765
sS'trials.thisRepN'
p766
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x18%\xc0'
tRp767
sg29
g43
(g45
S'\x00\x00\x00\x00\x00b&@'
tRp768
sg30
I1
sg56
g43
(g584
S'\x12\x00\x00\x00\x00\x00\x00\x00'
tRp769
sS'trials.thisTrialN'
p770
I18
sg32
I0
sg37
g38
sg41
V3
sg33
F1.8927819728851318
sS'trials.thisN'
p771
I18
sa(dp772
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_06_orig.jpg'
p773
sS'trials.thisIndex'
p774
g43
(g584
S'\x13\x00\x00\x00\x00\x00\x00\x00'
tRp775
sS'trials.thisRepN'
p776
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00'%\xc0"
tRp777
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp778
sg30
I1
sg56
g43
(g584
S'\x13\x00\x00\x00\x00\x00\x00\x00'
tRp779
sS'trials.thisTrialN'
p780
I19
sg32
I0
sg37
g38
sg41
V3
sg33
F5.0600748062133789
sS'trials.thisN'
p781
I19
sa(dp782
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_00_orig.jpg'
p783
sS'trials.thisIndex'
p784
g43
(g584
S'\x14\x00\x00\x00\x00\x00\x00\x00'
tRp785
sS'trials.thisRepN'
p786
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00'%\xc0"
tRp787
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp788
sg30
I1
sg56
g43
(g584
S'\x14\x00\x00\x00\x00\x00\x00\x00'
tRp789
sS'trials.thisTrialN'
p790
I20
sg32
I0
sg37
g38
sg41
V3
sg33
F4.6246740818023682
sS'trials.thisN'
p791
I20
sa(dp792
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_08_orig.jpg'
p793
sS'trials.thisIndex'
p794
g43
(g584
S'\x15\x00\x00\x00\x00\x00\x00\x00'
tRp795
sS'trials.thisRepN'
p796
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x006%\xc0'
tRp797
sg29
g43
(g45
S'\x00\x00\x00\x00\x00D&@'
tRp798
sg30
I0
sg56
g43
(g584
S'\x15\x00\x00\x00\x00\x00\x00\x00'
tRp799
sS'trials.thisTrialN'
p800
I21
sg32
I1
sg37
g38
sg41
V3
sg33
F1.891010046005249
sS'trials.thisN'
p801
I21
sa(dp802
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_07_orig.jpg'
p803
sS'trials.thisIndex'
p804
g43
(g584
S'\x16\x00\x00\x00\x00\x00\x00\x00'
tRp805
sS'trials.thisRepN'
p806
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00E%\xc0'
tRp807
sg29
g43
(g45
S'\x00\x00\x00\x00\x005&@'
tRp808
sg30
I0
sg56
g43
(g584
S'\x16\x00\x00\x00\x00\x00\x00\x00'
tRp809
sS'trials.thisTrialN'
p810
I22
sg32
I1
sg37
g38
sg41
V3
sg33
F2.009727954864502
sS'trials.thisN'
p811
I22
sa(dp812
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_02_orig.jpg'
p813
sS'trials.thisIndex'
p814
g43
(g584
S'\x17\x00\x00\x00\x00\x00\x00\x00'
tRp815
sS'trials.thisRepN'
p816
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00E%\xc0'
tRp817
sg29
g43
(g45
S'\x00\x00\x00\x00\x005&@'
tRp818
sg30
I1
sg56
g43
(g584
S'\x17\x00\x00\x00\x00\x00\x00\x00'
tRp819
sS'trials.thisTrialN'
p820
I23
sg32
I0
sg37
g38
sg41
V3
sg33
F1.0214438438415527
sS'trials.thisN'
p821
I23
sa(dp822
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_08_orig.jpg'
p823
sS'trials.thisIndex'
p824
g43
(g584
S'\x18\x00\x00\x00\x00\x00\x00\x00'
tRp825
sS'trials.thisRepN'
p826
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp827
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp828
sg30
I0
sg56
g43
(g584
S'\x18\x00\x00\x00\x00\x00\x00\x00'
tRp829
sS'trials.thisTrialN'
p830
I24
sg32
I1
sg37
g38
sg41
V3
sg33
F3.5675389766693115
sS'trials.thisN'
p831
I24
sa(dp832
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_05_orig.jpg'
p833
sS'trials.thisIndex'
p834
g43
(g584
S'\x19\x00\x00\x00\x00\x00\x00\x00'
tRp835
sS'trials.thisRepN'
p836
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp837
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp838
sg30
I0
sg56
g43
(g584
S'\x19\x00\x00\x00\x00\x00\x00\x00'
tRp839
sS'trials.thisTrialN'
p840
I25
sg32
I1
sg37
g38
sg41
V3
sg33
F3.0164980888366699
sS'trials.thisN'
p841
I25
sa(dp842
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_08_orig.jpg'
p843
sS'trials.thisIndex'
p844
g43
(g584
S'\x1a\x00\x00\x00\x00\x00\x00\x00'
tRp845
sS'trials.thisRepN'
p846
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp847
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp848
sg30
I0
sg56
g43
(g584
S'\x1a\x00\x00\x00\x00\x00\x00\x00'
tRp849
sS'trials.thisTrialN'
p850
I26
sg32
I1
sg37
g38
sg41
V3
sg33
F5.6459970474243164
sS'trials.thisN'
p851
I26
sa(dp852
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_09_orig.jpg'
p853
sS'trials.thisIndex'
p854
g43
(g584
S'\x1b\x00\x00\x00\x00\x00\x00\x00'
tRp855
sS'trials.thisRepN'
p856
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp857
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp858
sg30
I1
sg56
g43
(g584
S'\x1b\x00\x00\x00\x00\x00\x00\x00'
tRp859
sS'trials.thisTrialN'
p860
I27
sg32
I0
sg37
g38
sg41
V3
sg33
F1.9261589050292969
sS'trials.thisN'
p861
I27
sa(dp862
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_09_orig.jpg'
p863
sS'trials.thisIndex'
p864
g43
(g584
S'\x1c\x00\x00\x00\x00\x00\x00\x00'
tRp865
sS'trials.thisRepN'
p866
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp867
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp868
sg30
I0
sg56
g43
(g584
S'\x1c\x00\x00\x00\x00\x00\x00\x00'
tRp869
sS'trials.thisTrialN'
p870
I28
sg32
I1
sg37
g38
sg41
V3
sg33
F1.8254640102386475
sS'trials.thisN'
p871
I28
sa(dp872
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_04_orig.jpg'
p873
sS'trials.thisIndex'
p874
g43
(g584
S'\x1d\x00\x00\x00\x00\x00\x00\x00'
tRp875
sS'trials.thisRepN'
p876
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x81%\xc0'
tRp877
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp878
sg30
I0
sg56
g43
(g584
S'\x1d\x00\x00\x00\x00\x00\x00\x00'
tRp879
sS'trials.thisTrialN'
p880
I29
sg32
I1
sg37
g38
sg41
V3
sg33
F5.1929550170898438
sS'trials.thisN'
p881
I29
sa(dp882
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_06_orig.jpg'
p883
sS'trials.thisIndex'
p884
g43
(g584
S'\x1e\x00\x00\x00\x00\x00\x00\x00'
tRp885
sS'trials.thisRepN'
p886
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00r%\xc0'
tRp887
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xcc%@'
tRp888
sg30
I0
sg56
g43
(g584
S'\x1e\x00\x00\x00\x00\x00\x00\x00'
tRp889
sS'trials.thisTrialN'
p890
I30
sg32
I1
sg37
g38
sg41
V3
sg33
F2.0764269828796387
sS'trials.thisN'
p891
I30
sa(dp892
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_04_orig.jpg'
p893
sS'trials.thisIndex'
p894
g43
(g584
S'\x1f\x00\x00\x00\x00\x00\x00\x00'
tRp895
sS'trials.thisRepN'
p896
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x90%\xc0'
tRp897
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp898
sg30
I0
sg56
g43
(g584
S'\x1f\x00\x00\x00\x00\x00\x00\x00'
tRp899
sS'trials.thisTrialN'
p900
I31
sg32
I1
sg37
g38
sg41
V3
sg33
F4.4065761566162109
sS'trials.thisN'
p901
I31
sa(dp902
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_02_orig.jpg'
p903
sS'trials.thisIndex'
p904
g43
(g584
S' \x00\x00\x00\x00\x00\x00\x00'
tRp905
sS'trials.thisRepN'
p906
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x90%\xc0'
tRp907
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp908
sg30
I1
sg56
g43
(g584
S' \x00\x00\x00\x00\x00\x00\x00'
tRp909
sS'trials.thisTrialN'
p910
I32
sg32
I0
sg37
g38
sg41
V3
sg33
F1.0545492172241211
sS'trials.thisN'
p911
I32
sa(dp912
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_05_orig.jpg'
p913
sS'trials.thisIndex'
p914
g43
(g584
S'!\x00\x00\x00\x00\x00\x00\x00'
tRp915
sS'trials.thisRepN'
p916
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x90%\xc0'
tRp917
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp918
sg30
I1
sg56
g43
(g584
S'!\x00\x00\x00\x00\x00\x00\x00'
tRp919
sS'trials.thisTrialN'
p920
I33
sg32
I0
sg37
g38
sg41
V3
sg33
F1.4570419788360596
sS'trials.thisN'
p921
I33
sa(dp922
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_01_orig.jpg'
p923
sS'trials.thisIndex'
p924
g43
(g584
S'"\x00\x00\x00\x00\x00\x00\x00'
tRp925
sS'trials.thisRepN'
p926
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp927
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xea%@'
tRp928
sg30
I1
sg56
g43
(g584
S'"\x00\x00\x00\x00\x00\x00\x00'
tRp929
sS'trials.thisTrialN'
p930
I34
sg32
I0
sg37
g38
sg41
V3
sg33
F1.4220931529998779
sS'trials.thisN'
p931
I34
sa(dp932
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_06_orig.jpg'
p933
sS'trials.thisIndex'
p934
g43
(g584
S'#\x00\x00\x00\x00\x00\x00\x00'
tRp935
sS'trials.thisRepN'
p936
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp937
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xea%@'
tRp938
sg30
I1
sg56
g43
(g584
S'#\x00\x00\x00\x00\x00\x00\x00'
tRp939
sS'trials.thisTrialN'
p940
I35
sg32
I0
sg37
g38
sg41
V3
sg33
F2.3098740577697754
sS'trials.thisN'
p941
I35
sa(dp942
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_02_orig.jpg'
p943
sS'trials.thisIndex'
p944
g43
(g584
S'$\x00\x00\x00\x00\x00\x00\x00'
tRp945
sS'trials.thisRepN'
p946
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp947
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xea%@'
tRp948
sg30
I1
sg56
g43
(g584
S'$\x00\x00\x00\x00\x00\x00\x00'
tRp949
sS'trials.thisTrialN'
p950
I36
sg32
I0
sg37
g38
sg41
V3
sg33
F3.0319609642028809
sS'trials.thisN'
p951
I36
sa(dp952
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_03_orig.jpg'
p953
sS'trials.thisIndex'
p954
g43
(g584
S'%\x00\x00\x00\x00\x00\x00\x00'
tRp955
sS'trials.thisRepN'
p956
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp957
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xea%@'
tRp958
sg30
I0
sg56
g43
(g584
S'%\x00\x00\x00\x00\x00\x00\x00'
tRp959
sS'trials.thisTrialN'
p960
I37
sg32
I1
sg37
g38
sg41
V3
sg33
F1.8760850429534912
sS'trials.thisN'
p961
I37
sa(dp962
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_01_orig.jpg'
p963
sS'trials.thisIndex'
p964
g43
(g584
S'&\x00\x00\x00\x00\x00\x00\x00'
tRp965
sS'trials.thisRepN'
p966
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xbd%\xc0'
tRp967
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xbd%@'
tRp968
sg30
I0
sg56
g43
(g584
S'&\x00\x00\x00\x00\x00\x00\x00'
tRp969
sS'trials.thisTrialN'
p970
I38
sg32
I1
sg37
g38
sg41
V3
sg33
F1.6406121253967285
sS'trials.thisN'
p971
I38
sa(dp972
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM6_05_orig.jpg'
p973
sS'trials.thisIndex'
p974
g43
(g584
S"'\x00\x00\x00\x00\x00\x00\x00"
tRp975
sS'trials.thisRepN'
p976
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xbd%\xc0'
tRp977
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xbd%@'
tRp978
sg30
I0
sg56
g43
(g584
S"'\x00\x00\x00\x00\x00\x00\x00"
tRp979
sS'trials.thisTrialN'
p980
I39
sg32
I1
sg37
g38
sg41
V3
sg33
F2.6459000110626221
sS'trials.thisN'
p981
I39
sa(dp982
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_02_orig.jpg'
p983
sS'trials.thisIndex'
p984
g43
(g584
S'(\x00\x00\x00\x00\x00\x00\x00'
tRp985
sS'trials.thisRepN'
p986
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xbd%\xc0'
tRp987
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xbd%@'
tRp988
sg30
I1
sg56
g43
(g584
S'(\x00\x00\x00\x00\x00\x00\x00'
tRp989
sS'trials.thisTrialN'
p990
I40
sg32
I0
sg37
g38
sg41
V3
sg33
F3.0826160907745361
sS'trials.thisN'
p991
I40
sa(dp992
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_03_orig.jpg'
p993
sS'trials.thisIndex'
p994
g43
(g584
S')\x00\x00\x00\x00\x00\x00\x00'
tRp995
sS'trials.thisRepN'
p996
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x9f%\xc0'
tRp997
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xea%@'
tRp998
sg30
I0
sg56
g43
(g584
S')\x00\x00\x00\x00\x00\x00\x00'
tRp999
sS'trials.thisTrialN'
p1000
I41
sg32
I1
sg37
g38
sg41
V3
sg33
F2.2114188671112061
sS'trials.thisN'
p1001
I41
sa(dp1002
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_06_orig.jpg'
p1003
sS'trials.thisIndex'
p1004
g43
(g584
S'*\x00\x00\x00\x00\x00\x00\x00'
tRp1005
sS'trials.thisRepN'
p1006
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x9f%\xc0'
tRp1007
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xea%@'
tRp1008
sg30
I0
sg56
g43
(g584
S'*\x00\x00\x00\x00\x00\x00\x00'
tRp1009
sS'trials.thisTrialN'
p1010
I42
sg32
I1
sg37
g38
sg41
V3
sg33
F3.1489591598510742
sS'trials.thisN'
p1011
I42
sa(dp1012
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_00_orig.jpg'
p1013
sS'trials.thisIndex'
p1014
g43
(g584
S'+\x00\x00\x00\x00\x00\x00\x00'
tRp1015
sS'trials.thisRepN'
p1016
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp1017
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xae%@'
tRp1018
sg30
I1
sg56
g43
(g584
S'+\x00\x00\x00\x00\x00\x00\x00'
tRp1019
sS'trials.thisTrialN'
p1020
I43
sg32
I0
sg37
g38
sg41
V3
sg33
F4.0042629241943359
sS'trials.thisN'
p1021
I43
sa(dp1022
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_04_orig.jpg'
p1023
sS'trials.thisIndex'
p1024
g43
(g584
S',\x00\x00\x00\x00\x00\x00\x00'
tRp1025
sS'trials.thisRepN'
p1026
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x90%\xc0'
tRp1027
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xae%@'
tRp1028
sg30
I0
sg56
g43
(g584
S',\x00\x00\x00\x00\x00\x00\x00'
tRp1029
sS'trials.thisTrialN'
p1030
I44
sg32
I1
sg37
g38
sg41
V3
sg33
F2.4287049770355225
sS'trials.thisN'
p1031
I44
sa(dp1032
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_07_orig.jpg'
p1033
sS'trials.thisIndex'
p1034
g43
(g584
S'-\x00\x00\x00\x00\x00\x00\x00'
tRp1035
sS'trials.thisRepN'
p1036
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x81%\xc0'
tRp1037
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp1038
sg30
I0
sg56
g43
(g584
S'-\x00\x00\x00\x00\x00\x00\x00'
tRp1039
sS'trials.thisTrialN'
p1040
I45
sg32
I1
sg37
g38
sg41
V3
sg33
F5.8983278274536133
sS'trials.thisN'
p1041
I45
sa(dp1042
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_02_orig.jpg'
p1043
sS'trials.thisIndex'
p1044
g43
(g584
S'.\x00\x00\x00\x00\x00\x00\x00'
tRp1045
sS'trials.thisRepN'
p1046
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x81%\xc0'
tRp1047
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp1048
sg30
I1
sg56
g43
(g584
S'.\x00\x00\x00\x00\x00\x00\x00'
tRp1049
sS'trials.thisTrialN'
p1050
I46
sg32
I0
sg37
g38
sg41
V3
sg33
F1.3045148849487305
sS'trials.thisN'
p1051
I46
sa(dp1052
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_08_orig.jpg'
p1053
sS'trials.thisIndex'
p1054
g43
(g584
S'/\x00\x00\x00\x00\x00\x00\x00'
tRp1055
sS'trials.thisRepN'
p1056
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x81%\xc0'
tRp1057
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp1058
sg30
I0
sg56
g43
(g584
S'/\x00\x00\x00\x00\x00\x00\x00'
tRp1059
sS'trials.thisTrialN'
p1060
I47
sg32
I1
sg37
g38
sg41
V3
sg33
F1.4393620491027832
sS'trials.thisN'
p1061
I47
sa(dp1062
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_03_orig.jpg'
p1063
sS'trials.thisIndex'
p1064
g43
(g584
S'0\x00\x00\x00\x00\x00\x00\x00'
tRp1065
sS'trials.thisRepN'
p1066
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xae%\xc0'
tRp1067
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x17&@'
tRp1068
sg30
I0
sg56
g43
(g584
S'0\x00\x00\x00\x00\x00\x00\x00'
tRp1069
sS'trials.thisTrialN'
p1070
I48
sg32
I1
sg37
g38
sg41
V3
sg33
F3.8025879859924316
sS'trials.thisN'
p1071
I48
sa(dp1072
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_05_orig.jpg'
p1073
sS'trials.thisIndex'
p1074
g43
(g584
S'1\x00\x00\x00\x00\x00\x00\x00'
tRp1075
sS'trials.thisRepN'
p1076
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x9f%\xc0'
tRp1077
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1078
sg30
I0
sg56
g43
(g584
S'1\x00\x00\x00\x00\x00\x00\x00'
tRp1079
sS'trials.thisTrialN'
p1080
I49
sg32
I1
sg37
g38
sg41
V3
sg33
F1.2894308567047119
sS'trials.thisN'
p1081
I49
sa(dp1082
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_08_orig.jpg'
p1083
sS'trials.thisIndex'
p1084
g43
(g584
S'2\x00\x00\x00\x00\x00\x00\x00'
tRp1085
sS'trials.thisRepN'
p1086
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x9f%\xc0'
tRp1087
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1088
sg30
I0
sg56
g43
(g584
S'2\x00\x00\x00\x00\x00\x00\x00'
tRp1089
sS'trials.thisTrialN'
p1090
I50
sg32
I1
sg37
g38
sg41
V3
sg33
F1.991642951965332
sS'trials.thisN'
p1091
I50
sa(dp1092
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_03_orig.jpg'
p1093
sS'trials.thisIndex'
p1094
g43
(g584
S'3\x00\x00\x00\x00\x00\x00\x00'
tRp1095
sS'trials.thisRepN'
p1096
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x9f%\xc0'
tRp1097
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1098
sg30
I0
sg56
g43
(g584
S'3\x00\x00\x00\x00\x00\x00\x00'
tRp1099
sS'trials.thisTrialN'
p1100
I51
sg32
I1
sg37
g38
sg41
V3
sg33
F2.0770659446716309
sS'trials.thisN'
p1101
I51
sa(dp1102
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_10_orig.jpg'
p1103
sS'trials.thisIndex'
p1104
g43
(g584
S'4\x00\x00\x00\x00\x00\x00\x00'
tRp1105
sS'trials.thisRepN'
p1106
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x9f%\xc0'
tRp1107
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1108
sg30
I0
sg56
g43
(g584
S'4\x00\x00\x00\x00\x00\x00\x00'
tRp1109
sS'trials.thisTrialN'
p1110
I52
sg32
I1
sg37
g38
sg41
V3
sg33
F1.7736101150512695
sS'trials.thisN'
p1111
I52
sa(dp1112
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_08_orig.jpg'
p1113
sS'trials.thisIndex'
p1114
g43
(g584
S'5\x00\x00\x00\x00\x00\x00\x00'
tRp1115
sS'trials.thisRepN'
p1116
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x90%\xc0'
tRp1117
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x08&@'
tRp1118
sg30
I1
sg56
g43
(g584
S'5\x00\x00\x00\x00\x00\x00\x00'
tRp1119
sS'trials.thisTrialN'
p1120
I53
sg32
I0
sg37
g38
sg41
V3
sg33
F2.2442970275878906
sS'trials.thisN'
p1121
I53
sa(dp1122
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_10_orig.jpg'
p1123
sS'trials.thisIndex'
p1124
g43
(g584
S'6\x00\x00\x00\x00\x00\x00\x00'
tRp1125
sS'trials.thisRepN'
p1126
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x90%\xc0'
tRp1127
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x08&@'
tRp1128
sg30
I1
sg56
g43
(g584
S'6\x00\x00\x00\x00\x00\x00\x00'
tRp1129
sS'trials.thisTrialN'
p1130
I54
sg32
I0
sg37
g38
sg41
V3
sg33
F1.7921421527862549
sS'trials.thisN'
p1131
I54
sa(dp1132
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_03_orig.jpg'
p1133
sS'trials.thisIndex'
p1134
g43
(g584
S'7\x00\x00\x00\x00\x00\x00\x00'
tRp1135
sS'trials.thisRepN'
p1136
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x90%\xc0'
tRp1137
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x08&@'
tRp1138
sg30
I1
sg56
g43
(g584
S'7\x00\x00\x00\x00\x00\x00\x00'
tRp1139
sS'trials.thisTrialN'
p1140
I55
sg32
I0
sg37
g38
sg41
V3
sg33
F4.354870080947876
sS'trials.thisN'
p1141
I55
sa(dp1142
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_03_orig.jpg'
p1143
sS'trials.thisIndex'
p1144
g43
(g584
S'8\x00\x00\x00\x00\x00\x00\x00'
tRp1145
sS'trials.thisRepN'
p1146
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x005&\xc0'
tRp1147
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp1148
sg30
I0
sg56
g43
(g584
S'8\x00\x00\x00\x00\x00\x00\x00'
tRp1149
sS'trials.thisTrialN'
p1150
I56
sg32
I1
sg37
g38
sg41
V3
sg33
F4.9087100028991699
sS'trials.thisN'
p1151
I56
sa(dp1152
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_10_orig.jpg'
p1153
sS'trials.thisIndex'
p1154
g43
(g584
S'9\x00\x00\x00\x00\x00\x00\x00'
tRp1155
sS'trials.thisRepN'
p1156
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x005&\xc0'
tRp1157
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp1158
sg30
I0
sg56
g43
(g584
S'9\x00\x00\x00\x00\x00\x00\x00'
tRp1159
sS'trials.thisTrialN'
p1160
I57
sg32
I1
sg37
g38
sg41
V3
sg33
F1.7568929195404053
sS'trials.thisN'
p1161
I57
sa(dp1162
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_00_orig.jpg'
p1163
sS'trials.thisIndex'
p1164
g43
(g584
S':\x00\x00\x00\x00\x00\x00\x00'
tRp1165
sS'trials.thisRepN'
p1166
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x005&\xc0'
tRp1167
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdb%@'
tRp1168
sg30
I0
sg56
g43
(g584
S':\x00\x00\x00\x00\x00\x00\x00'
tRp1169
sS'trials.thisTrialN'
p1170
I58
sg32
I1
sg37
g38
sg41
V3
sg33
F1.7911548614501953
sS'trials.thisN'
p1171
I58
sa(dp1172
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_07_orig.jpg'
p1173
sS'trials.thisIndex'
p1174
g43
(g584
S';\x00\x00\x00\x00\x00\x00\x00'
tRp1175
sS'trials.thisRepN'
p1176
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00D&\xc0'
tRp1177
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xea%@'
tRp1178
sg30
I1
sg56
g43
(g584
S';\x00\x00\x00\x00\x00\x00\x00'
tRp1179
sS'trials.thisTrialN'
p1180
I59
sg32
I0
sg37
g38
sg41
V3
sg33
F3.4680089950561523
sS'trials.thisN'
p1181
I59
sa(dp1182
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_09_orig.jpg'
p1183
sS'trials.thisIndex'
p1184
g43
(g584
S'<\x00\x00\x00\x00\x00\x00\x00'
tRp1185
sS'trials.thisRepN'
p1186
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00D&\xc0'
tRp1187
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xea%@'
tRp1188
sg30
I0
sg56
g43
(g584
S'<\x00\x00\x00\x00\x00\x00\x00'
tRp1189
sS'trials.thisTrialN'
p1190
I60
sg32
I1
sg37
g38
sg41
V3
sg33
F4.1054389476776123
sS'trials.thisN'
p1191
I60
sa(dp1192
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_08_orig.jpg'
p1193
sS'trials.thisIndex'
p1194
g43
(g584
S'=\x00\x00\x00\x00\x00\x00\x00'
tRp1195
sS'trials.thisRepN'
p1196
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00D&\xc0'
tRp1197
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xea%@'
tRp1198
sg30
I0
sg56
g43
(g584
S'=\x00\x00\x00\x00\x00\x00\x00'
tRp1199
sS'trials.thisTrialN'
p1200
I61
sg32
I1
sg37
g38
sg41
V3
sg33
F2.0240569114685059
sS'trials.thisN'
p1201
I61
sa(dp1202
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_00_orig.jpg'
p1203
sS'trials.thisIndex'
p1204
g43
(g584
S'>\x00\x00\x00\x00\x00\x00\x00'
tRp1205
sS'trials.thisRepN'
p1206
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00D&\xc0'
tRp1207
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xea%@'
tRp1208
sg30
I0
sg56
g43
(g584
S'>\x00\x00\x00\x00\x00\x00\x00'
tRp1209
sS'trials.thisTrialN'
p1210
I62
sg32
I1
sg37
g38
sg41
V3
sg33
F3.1478879451751709
sS'trials.thisN'
p1211
I62
sa(dp1212
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_04_orig.jpg'
p1213
sS'trials.thisIndex'
p1214
g43
(g584
S'?\x00\x00\x00\x00\x00\x00\x00'
tRp1215
sS'trials.thisRepN'
p1216
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00q&\xc0'
tRp1217
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x08&@'
tRp1218
sg30
I0
sg56
g43
(g584
S'?\x00\x00\x00\x00\x00\x00\x00'
tRp1219
sS'trials.thisTrialN'
p1220
I63
sg32
I1
sg37
g38
sg41
V3
sg33
F6.2667081356048584
sS'trials.thisN'
p1221
I63
sa(dp1222
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_05_orig.jpg'
p1223
sS'trials.thisIndex'
p1224
g43
(g584
S'@\x00\x00\x00\x00\x00\x00\x00'
tRp1225
sS'trials.thisRepN'
p1226
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xda&\xc0'
tRp1227
sg29
g43
(g45
S'\x00\x00\x00\x00\x00&&@'
tRp1228
sg30
I1
sg56
g43
(g584
S'@\x00\x00\x00\x00\x00\x00\x00'
tRp1229
sS'trials.thisTrialN'
p1230
I64
sg32
I0
sg37
g38
sg41
V3
sg33
F1.5233969688415527
sS'trials.thisN'
p1231
I64
sa(dp1232
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_09_orig.jpg'
p1233
sS'trials.thisIndex'
p1234
g43
(g584
S'A\x00\x00\x00\x00\x00\x00\x00'
tRp1235
sS'trials.thisRepN'
p1236
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x8f&\xc0'
tRp1237
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xbc&@'
tRp1238
sg30
I0
sg56
g43
(g584
S'A\x00\x00\x00\x00\x00\x00\x00'
tRp1239
sS'trials.thisTrialN'
p1240
I65
sg32
I1
sg37
g38
sg41
V3
sg33
F1.2875258922576904
sS'trials.thisN'
p1241
I65
sa(dp1242
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_04_orig.jpg'
p1243
sS'trials.thisIndex'
p1244
g43
(g584
S'B\x00\x00\x00\x00\x00\x00\x00'
tRp1245
sS'trials.thisRepN'
p1246
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xe9&\xc0'
tRp1247
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xcb&@'
tRp1248
sg30
I1
sg56
g43
(g584
S'B\x00\x00\x00\x00\x00\x00\x00'
tRp1249
sS'trials.thisTrialN'
p1250
I66
sg32
I0
sg37
g38
sg41
V3
sg33
F1.6745331287384033
sS'trials.thisN'
p1251
I66
sa(dp1252
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_07_orig.jpg'
p1253
sS'trials.thisIndex'
p1254
g43
(g584
S'C\x00\x00\x00\x00\x00\x00\x00'
tRp1255
sS'trials.thisRepN'
p1256
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xe9&\xc0'
tRp1257
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xcb&@'
tRp1258
sg30
I0
sg56
g43
(g584
S'C\x00\x00\x00\x00\x00\x00\x00'
tRp1259
sS'trials.thisTrialN'
p1260
I67
sg32
I1
sg37
g38
sg41
V3
sg33
F1.2389421463012695
sS'trials.thisN'
p1261
I67
sa(dp1262
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_05_orig.jpg'
p1263
sS'trials.thisIndex'
p1264
g43
(g584
S'D\x00\x00\x00\x00\x00\x00\x00'
tRp1265
sS'trials.thisRepN'
p1266
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xe9&\xc0'
tRp1267
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xcb&@'
tRp1268
sg30
I1
sg56
g43
(g584
S'D\x00\x00\x00\x00\x00\x00\x00'
tRp1269
sS'trials.thisTrialN'
p1270
I68
sg32
I0
sg37
g38
sg41
V3
sg33
F1.909520149230957
sS'trials.thisN'
p1271
I68
sa(dp1272
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_02_orig.jpg'
p1273
sS'trials.thisIndex'
p1274
g43
(g584
S'E\x00\x00\x00\x00\x00\x00\x00'
tRp1275
sS'trials.thisRepN'
p1276
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xe9&\xc0'
tRp1277
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xcb&@'
tRp1278
sg30
I0
sg56
g43
(g584
S'E\x00\x00\x00\x00\x00\x00\x00'
tRp1279
sS'trials.thisTrialN'
p1280
I69
sg32
I1
sg37
g38
sg41
V3
sg33
F3.418079137802124
sS'trials.thisN'
p1281
I69
sa(dp1282
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_08_orig.jpg'
p1283
sS'trials.thisIndex'
p1284
g43
(g584
S'F\x00\x00\x00\x00\x00\x00\x00'
tRp1285
sS'trials.thisRepN'
p1286
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xe9&\xc0'
tRp1287
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xcb&@'
tRp1288
sg30
I0
sg56
g43
(g584
S'F\x00\x00\x00\x00\x00\x00\x00'
tRp1289
sS'trials.thisTrialN'
p1290
I70
sg32
I1
sg37
g38
sg41
V3
sg33
F2.630094051361084
sS'trials.thisN'
p1291
I70
sa(dp1292
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_00_orig.jpg'
p1293
sS'trials.thisIndex'
p1294
g43
(g584
S'G\x00\x00\x00\x00\x00\x00\x00'
tRp1295
sS'trials.thisRepN'
p1296
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xe9&\xc0'
tRp1297
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xcb&@'
tRp1298
sg30
I0
sg56
g43
(g584
S'G\x00\x00\x00\x00\x00\x00\x00'
tRp1299
sS'trials.thisTrialN'
p1300
I71
sg32
I1
sg37
g38
sg41
V3
sg33
F2.0915141105651855
sS'trials.thisN'
p1301
I71
sa(dp1302
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_07_orig.jpg'
p1303
sS'trials.thisIndex'
p1304
g43
(g584
S'H\x00\x00\x00\x00\x00\x00\x00'
tRp1305
sS'trials.thisRepN'
p1306
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xe9&\xc0'
tRp1307
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xbc&@'
tRp1308
sg30
I0
sg56
g43
(g584
S'H\x00\x00\x00\x00\x00\x00\x00'
tRp1309
sS'trials.thisTrialN'
p1310
I72
sg32
I1
sg37
g38
sg41
V3
sg33
F0.85381388664245605
sS'trials.thisN'
p1311
I72
sa(dp1312
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_07_orig.jpg'
p1313
sS'trials.thisIndex'
p1314
g43
(g584
S'I\x00\x00\x00\x00\x00\x00\x00'
tRp1315
sS'trials.thisRepN'
p1316
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x07'\xc0"
tRp1317
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x9e&@'
tRp1318
sg30
I0
sg56
g43
(g584
S'I\x00\x00\x00\x00\x00\x00\x00'
tRp1319
sS'trials.thisTrialN'
p1320
I73
sg32
I1
sg37
g38
sg41
V3
sg33
F2.2779390811920166
sS'trials.thisN'
p1321
I73
sa(dp1322
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_05_orig.jpg'
p1323
sS'trials.thisIndex'
p1324
g43
(g584
S'J\x00\x00\x00\x00\x00\x00\x00'
tRp1325
sS'trials.thisRepN'
p1326
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x07'\xc0"
tRp1327
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x9e&@'
tRp1328
sg30
I1
sg56
g43
(g584
S'J\x00\x00\x00\x00\x00\x00\x00'
tRp1329
sS'trials.thisTrialN'
p1330
I74
sg32
I0
sg37
g38
sg41
V3
sg33
F2.7137930393218994
sS'trials.thisN'
p1331
I74
sa(dp1332
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_02_orig.jpg'
p1333
sS'trials.thisIndex'
p1334
g43
(g584
S'K\x00\x00\x00\x00\x00\x00\x00'
tRp1335
sS'trials.thisRepN'
p1336
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x07'\xc0"
tRp1337
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x9e&@'
tRp1338
sg30
I1
sg56
g43
(g584
S'K\x00\x00\x00\x00\x00\x00\x00'
tRp1339
sS'trials.thisTrialN'
p1340
I75
sg32
I0
sg37
g38
sg41
V3
sg33
F1.4387209415435791
sS'trials.thisN'
p1341
I75
sa(dp1342
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_03_orig.jpg'
p1343
sS'trials.thisIndex'
p1344
g43
(g584
S'L\x00\x00\x00\x00\x00\x00\x00'
tRp1345
sS'trials.thisRepN'
p1346
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x07'\xc0"
tRp1347
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp1348
sg30
I1
sg56
g43
(g584
S'L\x00\x00\x00\x00\x00\x00\x00'
tRp1349
sS'trials.thisTrialN'
p1350
I76
sg32
I0
sg37
g38
sg41
V3
sg33
F1.9593288898468018
sS'trials.thisN'
p1351
I76
sa(dp1352
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM6_01_orig.jpg'
p1353
sS'trials.thisIndex'
p1354
g43
(g584
S'M\x00\x00\x00\x00\x00\x00\x00'
tRp1355
sS'trials.thisRepN'
p1356
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x07'\xc0"
tRp1357
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp1358
sg30
I1
sg56
g43
(g584
S'M\x00\x00\x00\x00\x00\x00\x00'
tRp1359
sS'trials.thisTrialN'
p1360
I77
sg32
I0
sg37
g38
sg41
V3
sg33
F1.8929500579833984
sS'trials.thisN'
p1361
I77
sa(dp1362
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_05_orig.jpg'
p1363
sS'trials.thisIndex'
p1364
g43
(g584
S'N\x00\x00\x00\x00\x00\x00\x00'
tRp1365
sS'trials.thisRepN'
p1366
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00p'\xc0"
tRp1367
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp1368
sg30
I0
sg56
g43
(g584
S'N\x00\x00\x00\x00\x00\x00\x00'
tRp1369
sS'trials.thisTrialN'
p1370
I78
sg32
I1
sg37
g38
sg41
V3
sg33
F2.8458511829376221
sS'trials.thisN'
p1371
I78
sa(dp1372
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_10_orig.jpg'
p1373
sS'trials.thisIndex'
p1374
g43
(g584
S'O\x00\x00\x00\x00\x00\x00\x00'
tRp1375
sS'trials.thisRepN'
p1376
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x8e'\xc0"
tRp1377
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp1378
sg30
I0
sg56
g43
(g584
S'O\x00\x00\x00\x00\x00\x00\x00'
tRp1379
sS'trials.thisTrialN'
p1380
I79
sg32
I1
sg37
g38
sg41
V3
sg33
F2.4955568313598633
sS'trials.thisN'
p1381
I79
sa(dp1382
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_03_orig.jpg'
p1383
sS'trials.thisIndex'
p1384
g43
(g584
S'P\x00\x00\x00\x00\x00\x00\x00'
tRp1385
sS'trials.thisRepN'
p1386
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1387
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp1388
sg30
I0
sg56
g43
(g584
S'P\x00\x00\x00\x00\x00\x00\x00'
tRp1389
sS'trials.thisTrialN'
p1390
I80
sg32
I1
sg37
g38
sg41
V3
sg33
F2.2617318630218506
sS'trials.thisN'
p1391
I80
sa(dp1392
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_04_orig.jpg'
p1393
sS'trials.thisIndex'
p1394
g43
(g584
S'Q\x00\x00\x00\x00\x00\x00\x00'
tRp1395
sS'trials.thisRepN'
p1396
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1397
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp1398
sg30
I0
sg56
g43
(g584
S'Q\x00\x00\x00\x00\x00\x00\x00'
tRp1399
sS'trials.thisTrialN'
p1400
I81
sg32
I1
sg37
g38
sg41
V3
sg33
F2.6801869869232178
sS'trials.thisN'
p1401
I81
sa(dp1402
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_04_orig.jpg'
p1403
sS'trials.thisIndex'
p1404
g43
(g584
S'R\x00\x00\x00\x00\x00\x00\x00'
tRp1405
sS'trials.thisRepN'
p1406
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1407
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp1408
sg30
I0
sg56
g43
(g584
S'R\x00\x00\x00\x00\x00\x00\x00'
tRp1409
sS'trials.thisTrialN'
p1410
I82
sg32
I1
sg37
g38
sg41
V3
sg33
F3.1495010852813721
sS'trials.thisN'
p1411
I82
sa(dp1412
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_01_orig.jpg'
p1413
sS'trials.thisIndex'
p1414
g43
(g584
S'S\x00\x00\x00\x00\x00\x00\x00'
tRp1415
sS'trials.thisRepN'
p1416
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1417
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp1418
sg30
I1
sg56
g43
(g584
S'S\x00\x00\x00\x00\x00\x00\x00'
tRp1419
sS'trials.thisTrialN'
p1420
I83
sg32
I0
sg37
g38
sg41
V3
sg33
F1.1888861656188965
sS'trials.thisN'
p1421
I83
sa(dp1422
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_10_orig.jpg'
p1423
sS'trials.thisIndex'
p1424
g43
(g584
S'T\x00\x00\x00\x00\x00\x00\x00'
tRp1425
sS'trials.thisRepN'
p1426
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1427
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp1428
sg30
I1
sg56
g43
(g584
S'T\x00\x00\x00\x00\x00\x00\x00'
tRp1429
sS'trials.thisTrialN'
p1430
I84
sg32
I0
sg37
g38
sg41
V3
sg33
F1.6574289798736572
sS'trials.thisN'
p1431
I84
sa(dp1432
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_00_orig.jpg'
p1433
sS'trials.thisIndex'
p1434
g43
(g584
S'U\x00\x00\x00\x00\x00\x00\x00'
tRp1435
sS'trials.thisRepN'
p1436
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1437
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x80&@'
tRp1438
sg30
I1
sg56
g43
(g584
S'U\x00\x00\x00\x00\x00\x00\x00'
tRp1439
sS'trials.thisTrialN'
p1440
I85
sg32
I0
sg37
g38
sg41
V3
sg33
F1.5406119823455811
sS'trials.thisN'
p1441
I85
sa(dp1442
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_04_orig.jpg'
p1443
sS'trials.thisIndex'
p1444
g43
(g584
S'V\x00\x00\x00\x00\x00\x00\x00'
tRp1445
sS'trials.thisRepN'
p1446
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x8e'\xc0"
tRp1447
sg29
g43
(g45
S'\x00\x00\x00\x00\x00b&@'
tRp1448
sg30
I1
sg56
g43
(g584
S'V\x00\x00\x00\x00\x00\x00\x00'
tRp1449
sS'trials.thisTrialN'
p1450
I86
sg32
I0
sg37
g38
sg41
V3
sg33
F3.4349799156188965
sS'trials.thisN'
p1451
I86
sa(dp1452
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_07_orig.jpg'
p1453
sS'trials.thisIndex'
p1454
g43
(g584
S'W\x00\x00\x00\x00\x00\x00\x00'
tRp1455
sS'trials.thisRepN'
p1456
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00a'\xc0"
tRp1457
sg29
g43
(g45
S'\x00\x00\x00\x00\x00S&@'
tRp1458
sg30
I1
sg56
g43
(g584
S'W\x00\x00\x00\x00\x00\x00\x00'
tRp1459
sS'trials.thisTrialN'
p1460
I87
sg32
I0
sg37
g38
sg41
V3
sg33
F3.867952823638916
sS'trials.thisN'
p1461
I87
sa(dp1462
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_07_orig.jpg'
p1463
sS'trials.thisIndex'
p1464
g43
(g584
S'X\x00\x00\x00\x00\x00\x00\x00'
tRp1465
sS'trials.thisRepN'
p1466
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00a'\xc0"
tRp1467
sg29
g43
(g45
S'\x00\x00\x00\x00\x00S&@'
tRp1468
sg30
I1
sg56
g43
(g584
S'X\x00\x00\x00\x00\x00\x00\x00'
tRp1469
sS'trials.thisTrialN'
p1470
I88
sg32
I0
sg37
g38
sg41
V3
sg33
F3.8686048984527588
sS'trials.thisN'
p1471
I88
sa(dp1472
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_02_orig.jpg'
p1473
sS'trials.thisIndex'
p1474
g43
(g584
S'Y\x00\x00\x00\x00\x00\x00\x00'
tRp1475
sS'trials.thisRepN'
p1476
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x7f'\xc0"
tRp1477
sg29
g43
(g45
S'\x00\x00\x00\x00\x005&@'
tRp1478
sg30
I1
sg56
g43
(g584
S'Y\x00\x00\x00\x00\x00\x00\x00'
tRp1479
sS'trials.thisTrialN'
p1480
I89
sg32
I0
sg37
g38
sg41
V3
sg33
F1.4395439624786377
sS'trials.thisN'
p1481
I89
sa(dp1482
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_06_orig.jpg'
p1483
sS'trials.thisIndex'
p1484
g43
(g584
S'Z\x00\x00\x00\x00\x00\x00\x00'
tRp1485
sS'trials.thisRepN'
p1486
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\xac'\xc0"
tRp1487
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x17&@'
tRp1488
sg30
I0
sg56
g43
(g584
S'Z\x00\x00\x00\x00\x00\x00\x00'
tRp1489
sS'trials.thisTrialN'
p1490
I90
sg32
I1
sg37
g38
sg41
V3
sg33
F2.7972960472106934
sS'trials.thisN'
p1491
I90
sa(dp1492
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_06_orig.jpg'
p1493
sS'trials.thisIndex'
p1494
g43
(g584
S'[\x00\x00\x00\x00\x00\x00\x00'
tRp1495
sS'trials.thisRepN'
p1496
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1497
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x08&@'
tRp1498
sg30
I1
sg56
g43
(g584
S'[\x00\x00\x00\x00\x00\x00\x00'
tRp1499
sS'trials.thisTrialN'
p1500
I91
sg32
I0
sg37
g38
sg41
V3
sg33
F2.8300421237945557
sS'trials.thisN'
p1501
I91
sa(dp1502
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_07_orig.jpg'
p1503
sS'trials.thisIndex'
p1504
g43
(g584
S'\\\x00\x00\x00\x00\x00\x00\x00'
tRp1505
sS'trials.thisRepN'
p1506
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1507
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1508
sg30
I0
sg56
g43
(g584
S'\\\x00\x00\x00\x00\x00\x00\x00'
tRp1509
sS'trials.thisTrialN'
p1510
I92
sg32
I1
sg37
g38
sg41
V3
sg33
F1.5895059108734131
sS'trials.thisN'
p1511
I92
sa(dp1512
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_04_orig.jpg'
p1513
sS'trials.thisIndex'
p1514
g43
(g584
S']\x00\x00\x00\x00\x00\x00\x00'
tRp1515
sS'trials.thisRepN'
p1516
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1517
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1518
sg30
I0
sg56
g43
(g584
S']\x00\x00\x00\x00\x00\x00\x00'
tRp1519
sS'trials.thisTrialN'
p1520
I93
sg32
I1
sg37
g38
sg41
V3
sg33
F2.0085420608520508
sS'trials.thisN'
p1521
I93
sa(dp1522
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_10_orig.jpg'
p1523
sS'trials.thisIndex'
p1524
g43
(g584
S'^\x00\x00\x00\x00\x00\x00\x00'
tRp1525
sS'trials.thisRepN'
p1526
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1527
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1528
sg30
I0
sg56
g43
(g584
S'^\x00\x00\x00\x00\x00\x00\x00'
tRp1529
sS'trials.thisTrialN'
p1530
I94
sg32
I1
sg37
g38
sg41
V3
sg33
F3.5174140930175781
sS'trials.thisN'
p1531
I94
sa(dp1532
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_06_orig.jpg'
p1533
sS'trials.thisIndex'
p1534
g43
(g584
S'_\x00\x00\x00\x00\x00\x00\x00'
tRp1535
sS'trials.thisRepN'
p1536
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1537
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1538
sg30
I1
sg56
g43
(g584
S'_\x00\x00\x00\x00\x00\x00\x00'
tRp1539
sS'trials.thisTrialN'
p1540
I95
sg32
I0
sg37
g38
sg41
V3
sg33
F2.4455239772796631
sS'trials.thisN'
p1541
I95
sa(dp1542
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_06_orig.jpg'
p1543
sS'trials.thisIndex'
p1544
g43
(g584
S'`\x00\x00\x00\x00\x00\x00\x00'
tRp1545
sS'trials.thisRepN'
p1546
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1547
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1548
sg30
I0
sg56
g43
(g584
S'`\x00\x00\x00\x00\x00\x00\x00'
tRp1549
sS'trials.thisTrialN'
p1550
I96
sg32
I1
sg37
g38
sg41
V3
sg33
F1.1382880210876465
sS'trials.thisN'
p1551
I96
sa(dp1552
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_02_orig.jpg'
p1553
sS'trials.thisIndex'
p1554
g43
(g584
S'a\x00\x00\x00\x00\x00\x00\x00'
tRp1555
sS'trials.thisRepN'
p1556
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1557
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1558
sg30
I1
sg56
g43
(g584
S'a\x00\x00\x00\x00\x00\x00\x00'
tRp1559
sS'trials.thisTrialN'
p1560
I97
sg32
I0
sg37
g38
sg41
V3
sg33
F2.9655530452728271
sS'trials.thisN'
p1561
I97
sa(dp1562
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_08_orig.jpg'
p1563
sS'trials.thisIndex'
p1564
g43
(g584
S'b\x00\x00\x00\x00\x00\x00\x00'
tRp1565
sS'trials.thisRepN'
p1566
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1567
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1568
sg30
I0
sg56
g43
(g584
S'b\x00\x00\x00\x00\x00\x00\x00'
tRp1569
sS'trials.thisTrialN'
p1570
I98
sg32
I1
sg37
g38
sg41
V3
sg33
F3.5671350955963135
sS'trials.thisN'
p1571
I98
sa(dp1572
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_07_orig.jpg'
p1573
sS'trials.thisIndex'
p1574
g43
(g584
S'c\x00\x00\x00\x00\x00\x00\x00'
tRp1575
sS'trials.thisRepN'
p1576
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1577
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1578
sg30
I0
sg56
g43
(g584
S'c\x00\x00\x00\x00\x00\x00\x00'
tRp1579
sS'trials.thisTrialN'
p1580
I99
sg32
I1
sg37
g38
sg41
V3
sg33
F1.1228659152984619
sS'trials.thisN'
p1581
I99
sa(dp1582
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_09_orig.jpg'
p1583
sS'trials.thisIndex'
p1584
g43
(g584
S'd\x00\x00\x00\x00\x00\x00\x00'
tRp1585
sS'trials.thisRepN'
p1586
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\x9d'\xc0"
tRp1587
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xf9%@'
tRp1588
sg30
I0
sg56
g43
(g584
S'd\x00\x00\x00\x00\x00\x00\x00'
tRp1589
sS'trials.thisTrialN'
p1590
I100
sg32
I1
sg37
g38
sg41
V3
sg33
F3.3330280780792236
sS'trials.thisN'
p1591
I100
sa(dp1592
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_04_orig.jpg'
p1593
sS'trials.thisIndex'
p1594
g43
(g584
S'e\x00\x00\x00\x00\x00\x00\x00'
tRp1595
sS'trials.thisRepN'
p1596
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\xac'\xc0"
tRp1597
sg29
g43
(g45
S'\x00\x00\x00\x00\x00T%@'
tRp1598
sg30
I0
sg56
g43
(g584
S'e\x00\x00\x00\x00\x00\x00\x00'
tRp1599
sS'trials.thisTrialN'
p1600
I101
sg32
I1
sg37
g38
sg41
V3
sg33
F3.3325879573822021
sS'trials.thisN'
p1601
I101
sa(dp1602
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM6_07_orig.jpg'
p1603
sS'trials.thisIndex'
p1604
g43
(g584
S'f\x00\x00\x00\x00\x00\x00\x00'
tRp1605
sS'trials.thisRepN'
p1606
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\xbb'\xc0"
tRp1607
sg29
g43
(g45
S'\x00\x00\x00\x00\x006%@'
tRp1608
sg30
I0
sg56
g43
(g584
S'f\x00\x00\x00\x00\x00\x00\x00'
tRp1609
sS'trials.thisTrialN'
p1610
I102
sg32
I1
sg37
g38
sg41
V3
sg33
F3.7020809650421143
sS'trials.thisN'
p1611
I102
sa(dp1612
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_01_orig.jpg'
p1613
sS'trials.thisIndex'
p1614
g43
(g584
S'g\x00\x00\x00\x00\x00\x00\x00'
tRp1615
sS'trials.thisRepN'
p1616
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\xe8'\xc0"
tRp1617
sg29
g43
(g45
S'\x00\x00\x00\x00\x00s$@'
tRp1618
sg30
I0
sg56
g43
(g584
S'g\x00\x00\x00\x00\x00\x00\x00'
tRp1619
sS'trials.thisTrialN'
p1620
I103
sg32
I1
sg37
g38
sg41
V3
sg33
F5.0768370628356934
sS'trials.thisN'
p1621
I103
sa(dp1622
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_06_orig.jpg'
p1623
sS'trials.thisIndex'
p1624
g43
(g584
S'h\x00\x00\x00\x00\x00\x00\x00'
tRp1625
sS'trials.thisRepN'
p1626
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\xe8'\xc0"
tRp1627
sg29
g43
(g45
S'\x00\x00\x00\x00\x00s$@'
tRp1628
sg30
I0
sg56
g43
(g584
S'h\x00\x00\x00\x00\x00\x00\x00'
tRp1629
sS'trials.thisTrialN'
p1630
I104
sg32
I1
sg37
g38
sg41
V3
sg33
F1.2228450775146484
sS'trials.thisN'
p1631
I104
sa(dp1632
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_00_orig.jpg'
p1633
sS'trials.thisIndex'
p1634
g43
(g584
S'i\x00\x00\x00\x00\x00\x00\x00'
tRp1635
sS'trials.thisRepN'
p1636
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\xe8'\xc0"
tRp1637
sg29
g43
(g45
S'\x00\x00\x00\x00\x00d$@'
tRp1638
sg30
I1
sg56
g43
(g584
S'i\x00\x00\x00\x00\x00\x00\x00'
tRp1639
sS'trials.thisTrialN'
p1640
I105
sg32
I0
sg37
g38
sg41
V3
sg33
F1.6053781509399414
sS'trials.thisN'
p1641
I105
sa(dp1642
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_08_orig.jpg'
p1643
sS'trials.thisIndex'
p1644
g43
(g584
S'j\x00\x00\x00\x00\x00\x00\x00'
tRp1645
sS'trials.thisRepN'
p1646
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\xd9'\xc0"
tRp1647
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x19$@'
tRp1648
sg30
I1
sg56
g43
(g584
S'j\x00\x00\x00\x00\x00\x00\x00'
tRp1649
sS'trials.thisTrialN'
p1650
I106
sg32
I0
sg37
g38
sg41
V3
sg33
F1.6587181091308594
sS'trials.thisN'
p1651
I106
sa(dp1652
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_06_orig.jpg'
p1653
sS'trials.thisIndex'
p1654
g43
(g584
S'k\x00\x00\x00\x00\x00\x00\x00'
tRp1655
sS'trials.thisRepN'
p1656
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x15(\xc0'
tRp1657
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xec#@'
tRp1658
sg30
I0
sg56
g43
(g584
S'k\x00\x00\x00\x00\x00\x00\x00'
tRp1659
sS'trials.thisTrialN'
p1660
I107
sg32
I1
sg37
g38
sg41
V3
sg33
F1.9084601402282715
sS'trials.thisN'
p1661
I107
sa(dp1662
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_02_orig.jpg'
p1663
sS'trials.thisIndex'
p1664
g43
(g584
S'l\x00\x00\x00\x00\x00\x00\x00'
tRp1665
sS'trials.thisRepN'
p1666
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x15(\xc0'
tRp1667
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xec#@'
tRp1668
sg30
I0
sg56
g43
(g584
S'l\x00\x00\x00\x00\x00\x00\x00'
tRp1669
sS'trials.thisTrialN'
p1670
I108
sg32
I1
sg37
g38
sg41
V3
sg33
F1.758418083190918
sS'trials.thisN'
p1671
I108
sa(dp1672
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_02_orig.jpg'
p1673
sS'trials.thisIndex'
p1674
g43
(g584
S'm\x00\x00\x00\x00\x00\x00\x00'
tRp1675
sS'trials.thisRepN'
p1676
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x003(\xc0'
tRp1677
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xec#@'
tRp1678
sg30
I1
sg56
g43
(g584
S'm\x00\x00\x00\x00\x00\x00\x00'
tRp1679
sS'trials.thisTrialN'
p1680
I109
sg32
I0
sg37
g38
sg41
V3
sg33
F1.9432461261749268
sS'trials.thisN'
p1681
I109
sa(dp1682
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM6_08_orig.jpg'
p1683
sS'trials.thisIndex'
p1684
g43
(g584
S'n\x00\x00\x00\x00\x00\x00\x00'
tRp1685
sS'trials.thisRepN'
p1686
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00$(\xc0'
tRp1687
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xce#@'
tRp1688
sg30
I0
sg56
g43
(g584
S'n\x00\x00\x00\x00\x00\x00\x00'
tRp1689
sS'trials.thisTrialN'
p1690
I110
sg32
I1
sg37
g38
sg41
V3
sg33
F3.7865760326385498
sS'trials.thisN'
p1691
I110
sa(dp1692
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_01_orig.jpg'
p1693
sS'trials.thisIndex'
p1694
g43
(g584
S'o\x00\x00\x00\x00\x00\x00\x00'
tRp1695
sS'trials.thisRepN'
p1696
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00$(\xc0'
tRp1697
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xce#@'
tRp1698
sg30
I1
sg56
g43
(g584
S'o\x00\x00\x00\x00\x00\x00\x00'
tRp1699
sS'trials.thisTrialN'
p1700
I111
sg32
I0
sg37
g38
sg41
V3
sg33
F1.4732739925384521
sS'trials.thisN'
p1701
I111
sa(dp1702
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_08_orig.jpg'
p1703
sS'trials.thisIndex'
p1704
g43
(g584
S'p\x00\x00\x00\x00\x00\x00\x00'
tRp1705
sS'trials.thisRepN'
p1706
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x15(\xc0'
tRp1707
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x83#@'
tRp1708
sg30
I1
sg56
g43
(g584
S'p\x00\x00\x00\x00\x00\x00\x00'
tRp1709
sS'trials.thisTrialN'
p1710
I112
sg32
I0
sg37
g38
sg41
V3
sg33
F1.4572069644927979
sS'trials.thisN'
p1711
I112
sa(dp1712
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_06_orig.jpg'
p1713
sS'trials.thisIndex'
p1714
g43
(g584
S'q\x00\x00\x00\x00\x00\x00\x00'
tRp1715
sS'trials.thisRepN'
p1716
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x15(\xc0'
tRp1717
sg29
g43
(g45
S'\x00\x00\x00\x00\x00t#@'
tRp1718
sg30
I0
sg56
g43
(g584
S'q\x00\x00\x00\x00\x00\x00\x00'
tRp1719
sS'trials.thisTrialN'
p1720
I113
sg32
I1
sg37
g38
sg41
V3
sg33
F4.6231551170349121
sS'trials.thisN'
p1721
I113
sa(dp1722
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_05_orig.jpg'
p1723
sS'trials.thisIndex'
p1724
g43
(g584
S'r\x00\x00\x00\x00\x00\x00\x00'
tRp1725
sS'trials.thisRepN'
p1726
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x15(\xc0'
tRp1727
sg29
g43
(g45
S'\x00\x00\x00\x00\x008#@'
tRp1728
sg30
I0
sg56
g43
(g584
S'r\x00\x00\x00\x00\x00\x00\x00'
tRp1729
sS'trials.thisTrialN'
p1730
I114
sg32
I1
sg37
g38
sg41
V3
sg33
F2.0103018283843994
sS'trials.thisN'
p1731
I114
sa(dp1732
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_06_orig.jpg'
p1733
sS'trials.thisIndex'
p1734
g43
(g584
S's\x00\x00\x00\x00\x00\x00\x00'
tRp1735
sS'trials.thisRepN'
p1736
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x15(\xc0'
tRp1737
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x0b#@'
tRp1738
sg30
I0
sg56
g43
(g584
S's\x00\x00\x00\x00\x00\x00\x00'
tRp1739
sS'trials.thisTrialN'
p1740
I115
sg32
I1
sg37
g38
sg41
V3
sg33
F1.3898348808288574
sS'trials.thisN'
p1741
I115
sa(dp1742
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_00_orig.jpg'
p1743
sS'trials.thisIndex'
p1744
g43
(g584
S't\x00\x00\x00\x00\x00\x00\x00'
tRp1745
sS'trials.thisRepN'
p1746
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x15(\xc0'
tRp1747
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x0b#@'
tRp1748
sg30
I1
sg56
g43
(g584
S't\x00\x00\x00\x00\x00\x00\x00'
tRp1749
sS'trials.thisTrialN'
p1750
I116
sg32
I0
sg37
g38
sg41
V3
sg33
F1.4389991760253906
sS'trials.thisN'
p1751
I116
sa(dp1752
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_00_orig.jpg'
p1753
sS'trials.thisIndex'
p1754
g43
(g584
S'u\x00\x00\x00\x00\x00\x00\x00'
tRp1755
sS'trials.thisRepN'
p1756
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x15(\xc0'
tRp1757
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xcf"@'
tRp1758
sg30
I0
sg56
g43
(g584
S'u\x00\x00\x00\x00\x00\x00\x00'
tRp1759
sS'trials.thisTrialN'
p1760
I117
sg32
I1
sg37
g38
sg41
V3
sg33
F2.4961409568786621
sS'trials.thisN'
p1761
I117
sa(dp1762
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM6_02_orig.jpg'
p1763
sS'trials.thisIndex'
p1764
g43
(g584
S'v\x00\x00\x00\x00\x00\x00\x00'
tRp1765
sS'trials.thisRepN'
p1766
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x06(\xc0'
tRp1767
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x92#@'
tRp1768
sg30
I0
sg56
g43
(g584
S'v\x00\x00\x00\x00\x00\x00\x00'
tRp1769
sS'trials.thisTrialN'
p1770
I118
sg32
I1
sg37
g38
sg41
V3
sg33
F5.3954870700836182
sS'trials.thisN'
p1771
I118
sa(dp1772
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_04_orig.jpg'
p1773
sS'trials.thisIndex'
p1774
g43
(g584
S'w\x00\x00\x00\x00\x00\x00\x00'
tRp1775
sS'trials.thisRepN'
p1776
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\xd9'\xc0"
tRp1777
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xce#@'
tRp1778
sg30
I1
sg56
g43
(g584
S'w\x00\x00\x00\x00\x00\x00\x00'
tRp1779
sS'trials.thisTrialN'
p1780
I119
sg32
I0
sg37
g38
sg41
V3
sg33
F3.4009151458740234
sS'trials.thisN'
p1781
I119
sa(dp1782
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_00_orig.jpg'
p1783
sS'trials.thisIndex'
p1784
g43
(g584
S'x\x00\x00\x00\x00\x00\x00\x00'
tRp1785
sS'trials.thisRepN'
p1786
I0
sg42
g46
sg28
g43
(g45
S"\x00\x00\x00\x00\x00\xd9'\xc0"
tRp1787
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xbf#@'
tRp1788
sg30
I1
sg56
g43
(g584
S'x\x00\x00\x00\x00\x00\x00\x00'
tRp1789
sS'trials.thisTrialN'
p1790
I120
sg32
I0
sg37
g38
sg41
V3
sg33
F1.2557721138000488
sS'trials.thisN'
p1791
I120
sa(dp1792
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_07_orig.jpg'
p1793
sS'trials.thisIndex'
p1794
g43
(g584
S'y\x00\x00\x00\x00\x00\x00\x00'
tRp1795
sS'trials.thisRepN'
p1796
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x003(\xc0'
tRp1797
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x1a#@'
tRp1798
sg30
I0
sg56
g43
(g584
S'y\x00\x00\x00\x00\x00\x00\x00'
tRp1799
sS'trials.thisTrialN'
p1800
I121
sg32
I1
sg37
g38
sg41
V3
sg33
F4.42311692237854
sS'trials.thisN'
p1801
I121
sa(dp1802
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_05_orig.jpg'
p1803
sS'trials.thisIndex'
p1804
g43
(g584
S'z\x00\x00\x00\x00\x00\x00\x00'
tRp1805
sS'trials.thisRepN'
p1806
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00Q(\xc0'
tRp1807
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xed"@'
tRp1808
sg30
I1
sg56
g43
(g584
S'z\x00\x00\x00\x00\x00\x00\x00'
tRp1809
sS'trials.thisTrialN'
p1810
I122
sg32
I0
sg37
g38
sg41
V3
sg33
F2.9487190246582031
sS'trials.thisN'
p1811
I122
sa(dp1812
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_10_orig.jpg'
p1813
sS'trials.thisIndex'
p1814
g43
(g584
S'{\x00\x00\x00\x00\x00\x00\x00'
tRp1815
sS'trials.thisRepN'
p1816
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00o(\xc0'
tRp1817
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xc0"@'
tRp1818
sg30
I0
sg56
g43
(g584
S'{\x00\x00\x00\x00\x00\x00\x00'
tRp1819
sS'trials.thisTrialN'
p1820
I123
sg32
I1
sg37
g38
sg41
V3
sg33
F3.1309909820556641
sS'trials.thisN'
p1821
I123
sa(dp1822
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_06_orig.jpg'
p1823
sS'trials.thisIndex'
p1824
g43
(g584
S'|\x00\x00\x00\x00\x00\x00\x00'
tRp1825
sS'trials.thisRepN'
p1826
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00~(\xc0'
tRp1827
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xa2"@'
tRp1828
sg30
I0
sg56
g43
(g584
S'|\x00\x00\x00\x00\x00\x00\x00'
tRp1829
sS'trials.thisTrialN'
p1830
I124
sg32
I1
sg37
g38
sg41
V3
sg33
F1.8588950634002686
sS'trials.thisN'
p1831
I124
sa(dp1832
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_00_orig.jpg'
p1833
sS'trials.thisIndex'
p1834
g43
(g584
S'}\x00\x00\x00\x00\x00\x00\x00'
tRp1835
sS'trials.thisRepN'
p1836
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00~(\xc0'
tRp1837
sg29
g43
(g45
S'\x00\x00\x00\x00\x00u"@'
tRp1838
sg30
I1
sg56
g43
(g584
S'}\x00\x00\x00\x00\x00\x00\x00'
tRp1839
sS'trials.thisTrialN'
p1840
I125
sg32
I0
sg37
g38
sg41
V3
sg33
F2.2278530597686768
sS'trials.thisN'
p1841
I125
sa(dp1842
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_07_orig.jpg'
p1843
sS'trials.thisIndex'
p1844
g43
(g584
S'~\x00\x00\x00\x00\x00\x00\x00'
tRp1845
sS'trials.thisRepN'
p1846
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xc6+\xc0'
tRp1847
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x84"@'
tRp1848
sg30
I0
sg56
g43
(g584
S'~\x00\x00\x00\x00\x00\x00\x00'
tRp1849
sS'trials.thisTrialN'
p1850
I126
sg32
I1
sg37
g38
sg41
V3
sg33
F3.7847561836242676
sS'trials.thisN'
p1851
I126
sa(dp1852
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM6_06_orig.jpg'
p1853
sS'trials.thisIndex'
p1854
g43
(g584
S'\x7f\x00\x00\x00\x00\x00\x00\x00'
tRp1855
sS'trials.thisRepN'
p1856
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xd5+\xc0'
tRp1857
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x93"@'
tRp1858
sg30
I0
sg56
g43
(g584
S'\x7f\x00\x00\x00\x00\x00\x00\x00'
tRp1859
sS'trials.thisTrialN'
p1860
I127
sg32
I1
sg37
g38
sg41
V3
sg33
F4.792665958404541
sS'trials.thisN'
p1861
I127
sa(dp1862
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_00_orig.jpg'
p1863
sS'trials.thisIndex'
p1864
g43
(g584
S'\x80\x00\x00\x00\x00\x00\x00\x00'
tRp1865
sS'trials.thisRepN'
p1866
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xe4+\xc0'
tRp1867
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x1b"@'
tRp1868
sg30
I0
sg56
g43
(g584
S'\x80\x00\x00\x00\x00\x00\x00\x00'
tRp1869
sS'trials.thisTrialN'
p1870
I128
sg32
I1
sg37
g38
sg41
V3
sg33
F2.5287799835205078
sS'trials.thisN'
p1871
I128
sa(dp1872
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM6_03_orig.jpg'
p1873
sS'trials.thisIndex'
p1874
g43
(g584
S'\x81\x00\x00\x00\x00\x00\x00\x00'
tRp1875
sS'trials.thisRepN'
p1876
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x11,\xc0'
tRp1877
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xa3!@'
tRp1878
sg30
I0
sg56
g43
(g584
S'\x81\x00\x00\x00\x00\x00\x00\x00'
tRp1879
sS'trials.thisTrialN'
p1880
I129
sg32
I1
sg37
g38
sg41
V3
sg33
F3.7195508480072021
sS'trials.thisN'
p1881
I129
sa(dp1882
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_04_orig.jpg'
p1883
sS'trials.thisIndex'
p1884
g43
(g584
S'\x82\x00\x00\x00\x00\x00\x00\x00'
tRp1885
sS'trials.thisRepN'
p1886
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00/,\xc0'
tRp1887
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x85!@'
tRp1888
sg30
I0
sg56
g43
(g584
S'\x82\x00\x00\x00\x00\x00\x00\x00'
tRp1889
sS'trials.thisTrialN'
p1890
I130
sg32
I1
sg37
g38
sg41
V3
sg33
F3.4001641273498535
sS'trials.thisN'
p1891
I130
sa(dp1892
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_01_orig.jpg'
p1893
sS'trials.thisIndex'
p1894
g43
(g584
S'\x83\x00\x00\x00\x00\x00\x00\x00'
tRp1895
sS'trials.thisRepN'
p1896
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00>,\xc0'
tRp1897
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x85!@'
tRp1898
sg30
I0
sg56
g43
(g584
S'\x83\x00\x00\x00\x00\x00\x00\x00'
tRp1899
sS'trials.thisTrialN'
p1900
I131
sg32
I1
sg37
g38
sg41
V3
sg33
F1.7253758907318115
sS'trials.thisN'
p1901
I131
sa(dp1902
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_06_orig.jpg'
p1903
sS'trials.thisIndex'
p1904
g43
(g584
S'\x84\x00\x00\x00\x00\x00\x00\x00'
tRp1905
sS'trials.thisRepN'
p1906
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xf2,\xc0'
tRp1907
sg29
g43
(g45
S'\x00\x00\x00\x00\x00+!@'
tRp1908
sg30
I1
sg56
g43
(g584
S'\x84\x00\x00\x00\x00\x00\x00\x00'
tRp1909
sS'trials.thisTrialN'
p1910
I132
sg32
I0
sg37
g38
sg41
V3
sg33
F2.5105190277099609
sS'trials.thisN'
p1911
I132
sa(dp1912
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_09_orig.jpg'
p1913
sS'trials.thisIndex'
p1914
g43
(g584
S'\x85\x00\x00\x00\x00\x00\x00\x00'
tRp1915
sS'trials.thisRepN'
p1916
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xd4,\xc0'
tRp1917
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x95 @'
tRp1918
sg30
I0
sg56
g43
(g584
S'\x85\x00\x00\x00\x00\x00\x00\x00'
tRp1919
sS'trials.thisTrialN'
p1920
I133
sg32
I1
sg37
g38
sg41
V3
sg33
F4.1889410018920898
sS'trials.thisN'
p1921
I133
sa(dp1922
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_01_orig.jpg'
p1923
sS'trials.thisIndex'
p1924
g43
(g584
S'\x86\x00\x00\x00\x00\x00\x00\x00'
tRp1925
sS'trials.thisRepN'
p1926
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00=-\xc0'
tRp1927
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x86 @'
tRp1928
sg30
I0
sg56
g43
(g584
S'\x86\x00\x00\x00\x00\x00\x00\x00'
tRp1929
sS'trials.thisTrialN'
p1930
I134
sg32
I1
sg37
g38
sg41
V3
sg33
F4.2534160614013672
sS'trials.thisN'
p1931
I134
sa(dp1932
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_01_orig.jpg'
p1933
sS'trials.thisIndex'
p1934
g43
(g584
S'\x87\x00\x00\x00\x00\x00\x00\x00'
tRp1935
sS'trials.thisRepN'
p1936
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00=-\xc0'
tRp1937
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x86 @'
tRp1938
sg30
I0
sg56
g43
(g584
S'\x87\x00\x00\x00\x00\x00\x00\x00'
tRp1939
sS'trials.thisTrialN'
p1940
I135
sg32
I1
sg37
g38
sg41
V3
sg33
F1.858910083770752
sS'trials.thisN'
p1941
I135
sa(dp1942
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_03_orig.jpg'
p1943
sS'trials.thisIndex'
p1944
g43
(g584
S'\x88\x00\x00\x00\x00\x00\x00\x00'
tRp1945
sS'trials.thisRepN'
p1946
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00L-\xc0'
tRp1947
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x86 @'
tRp1948
sg30
I1
sg56
g43
(g584
S'\x88\x00\x00\x00\x00\x00\x00\x00'
tRp1949
sS'trials.thisTrialN'
p1950
I136
sg32
I0
sg37
g38
sg41
V3
sg33
F4.9431030750274658
sS'trials.thisN'
p1951
I136
sa(dp1952
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_03_orig.jpg'
p1953
sS'trials.thisIndex'
p1954
g43
(g584
S'\x89\x00\x00\x00\x00\x00\x00\x00'
tRp1955
sS'trials.thisRepN'
p1956
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00[-\xc0'
tRp1957
sg29
g43
(g45
S'\x00\x00\x00\x00\x00; @'
tRp1958
sg30
I1
sg56
g43
(g584
S'\x89\x00\x00\x00\x00\x00\x00\x00'
tRp1959
sS'trials.thisTrialN'
p1960
I137
sg32
I0
sg37
g38
sg41
V3
sg33
F1.1715810298919678
sS'trials.thisN'
p1961
I137
sa(dp1962
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_09_orig.jpg'
p1963
sS'trials.thisIndex'
p1964
g43
(g584
S'\x8a\x00\x00\x00\x00\x00\x00\x00'
tRp1965
sS'trials.thisRepN'
p1966
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00L-\xc0'
tRp1967
sg29
g43
(g45
S'\x00\x00\x00\x00\x00, @'
tRp1968
sg30
I0
sg56
g43
(g584
S'\x8a\x00\x00\x00\x00\x00\x00\x00'
tRp1969
sS'trials.thisTrialN'
p1970
I138
sg32
I1
sg37
g38
sg41
V3
sg33
F3.5351800918579102
sS'trials.thisN'
p1971
I138
sa(dp1972
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_00_orig.jpg'
p1973
sS'trials.thisIndex'
p1974
g43
(g584
S'\x8b\x00\x00\x00\x00\x00\x00\x00'
tRp1975
sS'trials.thisRepN'
p1976
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00L-\xc0'
tRp1977
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x0e @'
tRp1978
sg30
I1
sg56
g43
(g584
S'\x8b\x00\x00\x00\x00\x00\x00\x00'
tRp1979
sS'trials.thisTrialN'
p1980
I139
sg32
I0
sg37
g38
sg41
V3
sg33
F2.2775089740753174
sS'trials.thisN'
p1981
I139
sa(dp1982
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_05_orig.jpg'
p1983
sS'trials.thisIndex'
p1984
g43
(g584
S'\x8c\x00\x00\x00\x00\x00\x00\x00'
tRp1985
sS'trials.thisRepN'
p1986
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00[-\xc0'
tRp1987
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xfe\x1f@'
tRp1988
sg30
I0
sg56
g43
(g584
S'\x8c\x00\x00\x00\x00\x00\x00\x00'
tRp1989
sS'trials.thisTrialN'
p1990
I140
sg32
I1
sg37
g38
sg41
V3
sg33
F4.2223539352416992
sS'trials.thisN'
p1991
I140
sa(dp1992
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_07_orig.jpg'
p1993
sS'trials.thisIndex'
p1994
g43
(g584
S'\x8d\x00\x00\x00\x00\x00\x00\x00'
tRp1995
sS'trials.thisRepN'
p1996
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00[-\xc0'
tRp1997
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xfe\x1f@'
tRp1998
sg30
I0
sg56
g43
(g584
S'\x8d\x00\x00\x00\x00\x00\x00\x00'
tRp1999
sS'trials.thisTrialN'
p2000
I141
sg32
I1
sg37
g38
sg41
V3
sg33
F4.7920100688934326
sS'trials.thisN'
p2001
I141
sa(dp2002
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_07_orig.jpg'
p2003
sS'trials.thisIndex'
p2004
g43
(g584
S'\x8e\x00\x00\x00\x00\x00\x00\x00'
tRp2005
sS'trials.thisRepN'
p2006
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00[-\xc0'
tRp2007
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xfe\x1f@'
tRp2008
sg30
I0
sg56
g43
(g584
S'\x8e\x00\x00\x00\x00\x00\x00\x00'
tRp2009
sS'trials.thisTrialN'
p2010
I142
sg32
I1
sg37
g38
sg41
V3
sg33
F1.5741951465606689
sS'trials.thisN'
p2011
I142
sa(dp2012
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_03_orig.jpg'
p2013
sS'trials.thisIndex'
p2014
g43
(g584
S'\x8f\x00\x00\x00\x00\x00\x00\x00'
tRp2015
sS'trials.thisRepN'
p2016
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00=-\xc0'
tRp2017
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xe0\x1f@'
tRp2018
sg30
I1
sg56
g43
(g584
S'\x8f\x00\x00\x00\x00\x00\x00\x00'
tRp2019
sS'trials.thisTrialN'
p2020
I143
sg32
I0
sg37
g38
sg41
V3
sg33
F6.7526369094848633
sS'trials.thisN'
p2021
I143
sa(dp2022
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_07_orig.jpg'
p2023
sS'trials.thisIndex'
p2024
g43
(g584
S'\x90\x00\x00\x00\x00\x00\x00\x00'
tRp2025
sS'trials.thisRepN'
p2026
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x88-\xc0'
tRp2027
sg29
g43
(g45
S'\x00\x00\x00\x00\x00J\x1f@'
tRp2028
sg30
I0
sg56
g43
(g584
S'\x90\x00\x00\x00\x00\x00\x00\x00'
tRp2029
sS'trials.thisTrialN'
p2030
I144
sg32
I1
sg37
g38
sg41
V3
sg33
F3.9037890434265137
sS'trials.thisN'
p2031
I144
sa(dp2032
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_10_orig.jpg'
p2033
sS'trials.thisIndex'
p2034
g43
(g584
S'\x91\x00\x00\x00\x00\x00\x00\x00'
tRp2035
sS'trials.thisRepN'
p2036
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xe2-\xc0'
tRp2037
sg29
g43
(g45
S'\x00\x00\x00\x00\x00J\x1f@'
tRp2038
sg30
I0
sg56
g43
(g584
S'\x91\x00\x00\x00\x00\x00\x00\x00'
tRp2039
sS'trials.thisTrialN'
p2040
I145
sg32
I1
sg37
g38
sg41
V3
sg33
F3.8537361621856689
sS'trials.thisN'
p2041
I145
sa(dp2042
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_06_orig.jpg'
p2043
sS'trials.thisIndex'
p2044
g43
(g584
S'\x92\x00\x00\x00\x00\x00\x00\x00'
tRp2045
sS'trials.thisRepN'
p2046
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xe2-\xc0'
tRp2047
sg29
g43
(g45
S'\x00\x00\x00\x00\x00J\x1f@'
tRp2048
sg30
I1
sg56
g43
(g584
S'\x92\x00\x00\x00\x00\x00\x00\x00'
tRp2049
sS'trials.thisTrialN'
p2050
I146
sg32
I0
sg37
g38
sg41
V3
sg33
F1.3559808731079102
sS'trials.thisN'
p2051
I146
sa(dp2052
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_02_orig.jpg'
p2053
sS'trials.thisIndex'
p2054
g43
(g584
S'\x93\x00\x00\x00\x00\x00\x00\x00'
tRp2055
sS'trials.thisRepN'
p2056
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00Z.\xc0'
tRp2057
sg29
g43
(g45
S'\x00\x00\x00\x00\x00,\x1f@'
tRp2058
sg30
I0
sg56
g43
(g584
S'\x93\x00\x00\x00\x00\x00\x00\x00'
tRp2059
sS'trials.thisTrialN'
p2060
I147
sg32
I1
sg37
g38
sg41
V3
sg33
F4.8419539928436279
sS'trials.thisN'
p2061
I147
sa(dp2062
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_05_orig.jpg'
p2063
sS'trials.thisIndex'
p2064
g43
(g584
S'\x94\x00\x00\x00\x00\x00\x00\x00'
tRp2065
sS'trials.thisRepN'
p2066
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00Z.\xc0'
tRp2067
sg29
g43
(g45
S'\x00\x00\x00\x00\x00,\x1f@'
tRp2068
sg30
I0
sg56
g43
(g584
S'\x94\x00\x00\x00\x00\x00\x00\x00'
tRp2069
sS'trials.thisTrialN'
p2070
I148
sg32
I1
sg37
g38
sg41
V3
sg33
F1.943004846572876
sS'trials.thisN'
p2071
I148
sa(dp2072
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_04_orig.jpg'
p2073
sS'trials.thisIndex'
p2074
g43
(g584
S'\x95\x00\x00\x00\x00\x00\x00\x00'
tRp2075
sS'trials.thisRepN'
p2076
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00Z.\xc0'
tRp2077
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xb2!@'
tRp2078
sg30
I1
sg56
g43
(g584
S'\x95\x00\x00\x00\x00\x00\x00\x00'
tRp2079
sS'trials.thisTrialN'
p2080
I149
sg32
I0
sg37
g38
sg41
V3
sg33
F2.8142800331115723
sS'trials.thisN'
p2081
I149
sa(dp2082
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_10_orig.jpg'
p2083
sS'trials.thisIndex'
p2084
g43
(g584
S'\x96\x00\x00\x00\x00\x00\x00\x00'
tRp2085
sS'trials.thisRepN'
p2086
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xc20\xc0'
tRp2087
sg29
g43
(g45
S'\x00\x00\x00\x00\x00I!@'
tRp2088
sg30
I1
sg56
g43
(g584
S'\x96\x00\x00\x00\x00\x00\x00\x00'
tRp2089
sS'trials.thisTrialN'
p2090
I150
sg32
I0
sg37
g38
sg41
V3
sg33
F1.9931950569152832
sS'trials.thisN'
p2091
I150
sa(dp2092
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_08_orig.jpg'
p2093
sS'trials.thisIndex'
p2094
g43
(g584
S'\x97\x00\x00\x00\x00\x00\x00\x00'
tRp2095
sS'trials.thisRepN'
p2096
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80n1\xc0'
tRp2097
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x0c"@'
tRp2098
sg30
I0
sg56
g43
(g584
S'\x97\x00\x00\x00\x00\x00\x00\x00'
tRp2099
sS'trials.thisTrialN'
p2100
I151
sg32
I1
sg37
g38
sg41
V3
sg33
F3.2994198799133301
sS'trials.thisN'
p2101
I151
sa(dp2102
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_02_orig.jpg'
p2103
sS'trials.thisIndex'
p2104
g43
(g584
S'\x98\x00\x00\x00\x00\x00\x00\x00'
tRp2105
sS'trials.thisRepN'
p2106
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00v1\xc0'
tRp2107
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdf!@'
tRp2108
sg30
I0
sg56
g43
(g584
S'\x98\x00\x00\x00\x00\x00\x00\x00'
tRp2109
sS'trials.thisTrialN'
p2110
I152
sg32
I1
sg37
g38
sg41
V3
sg33
F2.814284086227417
sS'trials.thisN'
p2111
I152
sa(dp2112
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_05_orig.jpg'
p2113
sS'trials.thisIndex'
p2114
g43
(g584
S'\x99\x00\x00\x00\x00\x00\x00\x00'
tRp2115
sS'trials.thisRepN'
p2116
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00v1\xc0'
tRp2117
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x1b"@'
tRp2118
sg30
I0
sg56
g43
(g584
S'\x99\x00\x00\x00\x00\x00\x00\x00'
tRp2119
sS'trials.thisTrialN'
p2120
I153
sg32
I1
sg37
g38
sg41
V3
sg33
F3.3182578086853027
sS'trials.thisN'
p2121
I153
sa(dp2122
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_09_orig.jpg'
p2123
sS'trials.thisIndex'
p2124
g43
(g584
S'\x9a\x00\x00\x00\x00\x00\x00\x00'
tRp2125
sS'trials.thisRepN'
p2126
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00v1\xc0'
tRp2127
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdf!@'
tRp2128
sg30
I0
sg56
g43
(g584
S'\x9a\x00\x00\x00\x00\x00\x00\x00'
tRp2129
sS'trials.thisTrialN'
p2130
I154
sg32
I1
sg37
g38
sg41
V3
sg33
F1.4225759506225586
sS'trials.thisN'
p2131
I154
sa(dp2132
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_03_orig.jpg'
p2133
sS'trials.thisIndex'
p2134
g43
(g584
S'\x9b\x00\x00\x00\x00\x00\x00\x00'
tRp2135
sS'trials.thisRepN'
p2136
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00v1\xc0'
tRp2137
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xdf!@'
tRp2138
sg30
I0
sg56
g43
(g584
S'\x9b\x00\x00\x00\x00\x00\x00\x00'
tRp2139
sS'trials.thisTrialN'
p2140
I155
sg32
I1
sg37
g38
sg41
V3
sg33
F1.3709518909454346
sS'trials.thisN'
p2141
I155
sa(dp2142
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_03_orig.jpg'
p2143
sS'trials.thisIndex'
p2144
g43
(g584
S'\x9c\x00\x00\x00\x00\x00\x00\x00'
tRp2145
sS'trials.thisRepN'
p2146
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80n1\xc0'
tRp2147
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xd0!@'
tRp2148
sg30
I1
sg56
g43
(g584
S'\x9c\x00\x00\x00\x00\x00\x00\x00'
tRp2149
sS'trials.thisTrialN'
p2150
I156
sg32
I0
sg37
g38
sg41
V3
sg33
F4.3899459838867188
sS'trials.thisN'
p2151
I156
sa(dp2152
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_01_orig.jpg'
p2153
sS'trials.thisIndex'
p2154
g43
(g584
S'\x9d\x00\x00\x00\x00\x00\x00\x00'
tRp2155
sS'trials.thisRepN'
p2156
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80P1\xc0'
tRp2157
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x94!@'
tRp2158
sg30
I0
sg56
g43
(g584
S'\x9d\x00\x00\x00\x00\x00\x00\x00'
tRp2159
sS'trials.thisTrialN'
p2160
I157
sg32
I1
sg37
g38
sg41
V3
sg33
F2.5794692039489746
sS'trials.thisN'
p2161
I157
sa(dp2162
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_01_orig.jpg'
p2163
sS'trials.thisIndex'
p2164
g43
(g584
S'\x9e\x00\x00\x00\x00\x00\x00\x00'
tRp2165
sS'trials.thisRepN'
p2166
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80P1\xc0'
tRp2167
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2168
sg30
I1
sg56
g43
(g584
S'\x9e\x00\x00\x00\x00\x00\x00\x00'
tRp2169
sS'trials.thisTrialN'
p2170
I158
sg32
I0
sg37
g38
sg41
V3
sg33
F3.2499918937683105
sS'trials.thisN'
p2171
I158
sa(dp2172
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_02_orig.jpg'
p2173
sS'trials.thisIndex'
p2174
g43
(g584
S'\x9f\x00\x00\x00\x00\x00\x00\x00'
tRp2175
sS'trials.thisRepN'
p2176
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\xc81\xc0'
tRp2177
sg29
g43
(g45
S'\x00\x00\x00\x00\x00g!@'
tRp2178
sg30
I1
sg56
g43
(g584
S'\x9f\x00\x00\x00\x00\x00\x00\x00'
tRp2179
sS'trials.thisTrialN'
p2180
I159
sg32
I0
sg37
g38
sg41
V3
sg33
F6.4178450107574463
sS'trials.thisN'
p2181
I159
sa(dp2182
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_02_orig.jpg'
p2183
sS'trials.thisIndex'
p2184
g43
(g584
S'\xa0\x00\x00\x00\x00\x00\x00\x00'
tRp2185
sS'trials.thisRepN'
p2186
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\x042\xc0'
tRp2187
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x1c!@'
tRp2188
sg30
I0
sg56
g43
(g584
S'\xa0\x00\x00\x00\x00\x00\x00\x00'
tRp2189
sS'trials.thisTrialN'
p2190
I160
sg32
I1
sg37
g38
sg41
V3
sg33
F1.992901086807251
sS'trials.thisN'
p2191
I160
sa(dp2192
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_10_orig.jpg'
p2193
sS'trials.thisIndex'
p2194
g43
(g584
S'\xa1\x00\x00\x00\x00\x00\x00\x00'
tRp2195
sS'trials.thisRepN'
p2196
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00H2\xc0'
tRp2197
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\r!@'
tRp2198
sg30
I0
sg56
g43
(g584
S'\xa1\x00\x00\x00\x00\x00\x00\x00'
tRp2199
sS'trials.thisTrialN'
p2200
I161
sg32
I1
sg37
g38
sg41
V3
sg33
F3.3674941062927246
sS'trials.thisN'
p2201
I161
sa(dp2202
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_10_orig.jpg'
p2203
sS'trials.thisIndex'
p2204
g43
(g584
S'\xa2\x00\x00\x00\x00\x00\x00\x00'
tRp2205
sS'trials.thisRepN'
p2206
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00W2\xc0'
tRp2207
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\r!@'
tRp2208
sg30
I0
sg56
g43
(g584
S'\xa2\x00\x00\x00\x00\x00\x00\x00'
tRp2209
sS'trials.thisTrialN'
p2210
I162
sg32
I1
sg37
g38
sg41
V3
sg33
F3.6340289115905762
sS'trials.thisN'
p2211
I162
sa(dp2212
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_04_orig.jpg'
p2213
sS'trials.thisIndex'
p2214
g43
(g584
S'\xa3\x00\x00\x00\x00\x00\x00\x00'
tRp2215
sS'trials.thisRepN'
p2216
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80O2\xc0'
tRp2217
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x1c!@'
tRp2218
sg30
I1
sg56
g43
(g584
S'\xa3\x00\x00\x00\x00\x00\x00\x00'
tRp2219
sS'trials.thisTrialN'
p2220
I163
sg32
I0
sg37
g38
sg41
V3
sg33
F1.5909600257873535
sS'trials.thisN'
p2221
I163
sa(dp2222
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_00_orig.jpg'
p2223
sS'trials.thisIndex'
p2224
g43
(g584
S'\xa4\x00\x00\x00\x00\x00\x00\x00'
tRp2225
sS'trials.thisRepN'
p2226
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80@2\xc0'
tRp2227
sg29
g43
(g45
S'\x00\x00\x00\x00\x00g!@'
tRp2228
sg30
I1
sg56
g43
(g584
S'\xa4\x00\x00\x00\x00\x00\x00\x00'
tRp2229
sS'trials.thisTrialN'
p2230
I164
sg32
I0
sg37
g38
sg41
V3
sg33
F2.1774671077728271
sS'trials.thisN'
p2231
I164
sa(dp2232
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_07_orig.jpg'
p2233
sS'trials.thisIndex'
p2234
g43
(g584
S'\xa5\x00\x00\x00\x00\x00\x00\x00'
tRp2235
sS'trials.thisRepN'
p2236
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00f2\xc0'
tRp2237
sg29
g43
(g45
S'\x00\x00\x00\x00\x00X!@'
tRp2238
sg30
I0
sg56
g43
(g584
S'\xa5\x00\x00\x00\x00\x00\x00\x00'
tRp2239
sS'trials.thisTrialN'
p2240
I165
sg32
I1
sg37
g38
sg41
V3
sg33
F1.8577182292938232
sS'trials.thisN'
p2241
I165
sa(dp2242
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_05_orig.jpg'
p2243
sS'trials.thisIndex'
p2244
g43
(g584
S'\xa6\x00\x00\x00\x00\x00\x00\x00'
tRp2245
sS'trials.thisRepN'
p2246
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00u2\xc0'
tRp2247
sg29
g43
(g45
S'\x00\x00\x00\x00\x00X!@'
tRp2248
sg30
I1
sg56
g43
(g584
S'\xa6\x00\x00\x00\x00\x00\x00\x00'
tRp2249
sS'trials.thisTrialN'
p2250
I166
sg32
I0
sg37
g38
sg41
V3
sg33
F1.421576976776123
sS'trials.thisN'
p2251
I166
sa(dp2252
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_03_orig.jpg'
p2253
sS'trials.thisIndex'
p2254
g43
(g584
S'\xa7\x00\x00\x00\x00\x00\x00\x00'
tRp2255
sS'trials.thisRepN'
p2256
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80|2\xc0'
tRp2257
sg29
g43
(g45
S'\x00\x00\x00\x00\x00g!@'
tRp2258
sg30
I1
sg56
g43
(g584
S'\xa7\x00\x00\x00\x00\x00\x00\x00'
tRp2259
sS'trials.thisTrialN'
p2260
I167
sg32
I0
sg37
g38
sg41
V3
sg33
F2.9299800395965576
sS'trials.thisN'
p2261
I167
sa(dp2262
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_02_orig.jpg'
p2263
sS'trials.thisIndex'
p2264
g43
(g584
S'\xa8\x00\x00\x00\x00\x00\x00\x00'
tRp2265
sS'trials.thisRepN'
p2266
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x932\xc0'
tRp2267
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2268
sg30
I0
sg56
g43
(g584
S'\xa8\x00\x00\x00\x00\x00\x00\x00'
tRp2269
sS'trials.thisTrialN'
p2270
I168
sg32
I1
sg37
g38
sg41
V3
sg33
F4.3389058113098145
sS'trials.thisN'
p2271
I168
sa(dp2272
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_01_orig.jpg'
p2273
sS'trials.thisIndex'
p2274
g43
(g584
S'\xa9\x00\x00\x00\x00\x00\x00\x00'
tRp2275
sS'trials.thisRepN'
p2276
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\x9a2\xc0'
tRp2277
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x85!@'
tRp2278
sg30
I1
sg56
g43
(g584
S'\xa9\x00\x00\x00\x00\x00\x00\x00'
tRp2279
sS'trials.thisTrialN'
p2280
I169
sg32
I0
sg37
g38
sg41
V3
sg33
F2.0936949253082275
sS'trials.thisN'
p2281
I169
sa(dp2282
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_04_orig.jpg'
p2283
sS'trials.thisIndex'
p2284
g43
(g584
S'\xaa\x00\x00\x00\x00\x00\x00\x00'
tRp2285
sS'trials.thisRepN'
p2286
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xa22\xc0'
tRp2287
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2288
sg30
I1
sg56
g43
(g584
S'\xaa\x00\x00\x00\x00\x00\x00\x00'
tRp2289
sS'trials.thisTrialN'
p2290
I170
sg32
I0
sg37
g38
sg41
V3
sg33
F1.3226699829101562
sS'trials.thisN'
p2291
I170
sa(dp2292
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_09_orig.jpg'
p2293
sS'trials.thisIndex'
p2294
g43
(g584
S'\xab\x00\x00\x00\x00\x00\x00\x00'
tRp2295
sS'trials.thisRepN'
p2296
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\xc72\xc0'
tRp2297
sg29
g43
(g45
S'\x00\x00\x00\x00\x00I!@'
tRp2298
sg30
I0
sg56
g43
(g584
S'\xab\x00\x00\x00\x00\x00\x00\x00'
tRp2299
sS'trials.thisTrialN'
p2300
I171
sg32
I1
sg37
g38
sg41
V3
sg33
F2.7473890781402588
sS'trials.thisN'
p2301
I171
sa(dp2302
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM6_00_orig.jpg'
p2303
sS'trials.thisIndex'
p2304
g43
(g584
S'\xac\x00\x00\x00\x00\x00\x00\x00'
tRp2305
sS'trials.thisRepN'
p2306
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xcf2\xc0'
tRp2307
sg29
g43
(g45
S'\x00\x00\x00\x00\x00I!@'
tRp2308
sg30
I1
sg56
g43
(g584
S'\xac\x00\x00\x00\x00\x00\x00\x00'
tRp2309
sS'trials.thisTrialN'
p2310
I172
sg32
I0
sg37
g38
sg41
V3
sg33
F1.3227441310882568
sS'trials.thisN'
p2311
I172
sa(dp2312
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_09_orig.jpg'
p2313
sS'trials.thisIndex'
p2314
g43
(g584
S'\xad\x00\x00\x00\x00\x00\x00\x00'
tRp2315
sS'trials.thisRepN'
p2316
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\xd62\xc0'
tRp2317
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\r!@'
tRp2318
sg30
I0
sg56
g43
(g584
S'\xad\x00\x00\x00\x00\x00\x00\x00'
tRp2319
sS'trials.thisTrialN'
p2320
I173
sg32
I1
sg37
g38
sg41
V3
sg33
F4.0044341087341309
sS'trials.thisN'
p2321
I173
sa(dp2322
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_06_orig.jpg'
p2323
sS'trials.thisIndex'
p2324
g43
(g584
S'\xae\x00\x00\x00\x00\x00\x00\x00'
tRp2325
sS'trials.thisRepN'
p2326
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\xd62\xc0'
tRp2327
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\r!@'
tRp2328
sg30
I0
sg56
g43
(g584
S'\xae\x00\x00\x00\x00\x00\x00\x00'
tRp2329
sS'trials.thisTrialN'
p2330
I174
sg32
I1
sg37
g38
sg41
V3
sg33
F2.2273318767547607
sS'trials.thisN'
p2331
I174
sa(dp2332
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_01_orig.jpg'
p2333
sS'trials.thisIndex'
p2334
g43
(g584
S'\xaf\x00\x00\x00\x00\x00\x00\x00'
tRp2335
sS'trials.thisRepN'
p2336
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x1a3\xc0'
tRp2337
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\r!@'
tRp2338
sg30
I0
sg56
g43
(g584
S'\xaf\x00\x00\x00\x00\x00\x00\x00'
tRp2339
sS'trials.thisTrialN'
p2340
I175
sg32
I1
sg37
g38
sg41
V3
sg33
F1.8733558654785156
sS'trials.thisN'
p2341
I175
sa(dp2342
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_07_orig.jpg'
p2343
sS'trials.thisIndex'
p2344
g43
(g584
S'\xb0\x00\x00\x00\x00\x00\x00\x00'
tRp2345
sS'trials.thisRepN'
p2346
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x1a3\xc0'
tRp2347
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\r!@'
tRp2348
sg30
I0
sg56
g43
(g584
S'\xb0\x00\x00\x00\x00\x00\x00\x00'
tRp2349
sS'trials.thisTrialN'
p2350
I176
sg32
I1
sg37
g38
sg41
V3
sg33
F3.0486209392547607
sS'trials.thisN'
p2351
I176
sa(dp2352
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_01_orig.jpg'
p2353
sS'trials.thisIndex'
p2354
g43
(g584
S'\xb1\x00\x00\x00\x00\x00\x00\x00'
tRp2355
sS'trials.thisRepN'
p2356
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80?3\xc0'
tRp2357
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2358
sg30
I1
sg56
g43
(g584
S'\xb1\x00\x00\x00\x00\x00\x00\x00'
tRp2359
sS'trials.thisTrialN'
p2360
I177
sg32
I0
sg37
g38
sg41
V3
sg33
F2.6959021091461182
sS'trials.thisN'
p2361
I177
sa(dp2362
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_03_orig.jpg'
p2363
sS'trials.thisIndex'
p2364
g43
(g584
S'\xb2\x00\x00\x00\x00\x00\x00\x00'
tRp2365
sS'trials.thisRepN'
p2366
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80?3\xc0'
tRp2367
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2368
sg30
I0
sg56
g43
(g584
S'\xb2\x00\x00\x00\x00\x00\x00\x00'
tRp2369
sS'trials.thisTrialN'
p2370
I178
sg32
I1
sg37
g38
sg41
V3
sg33
F1.6410391330718994
sS'trials.thisN'
p2371
I178
sa(dp2372
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_09_orig.jpg'
p2373
sS'trials.thisIndex'
p2374
g43
(g584
S'\xb3\x00\x00\x00\x00\x00\x00\x00'
tRp2375
sS'trials.thisRepN'
p2376
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00G3\xc0'
tRp2377
sg29
g43
(g45
S'\x00\x00\x00\x00\x00g!@'
tRp2378
sg30
I0
sg56
g43
(g584
S'\xb3\x00\x00\x00\x00\x00\x00\x00'
tRp2379
sS'trials.thisTrialN'
p2380
I179
sg32
I1
sg37
g38
sg41
V3
sg33
F2.9479539394378662
sS'trials.thisN'
p2381
I179
sa(dp2382
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_10_orig.jpg'
p2383
sS'trials.thisIndex'
p2384
g43
(g584
S'\xb4\x00\x00\x00\x00\x00\x00\x00'
tRp2385
sS'trials.thisRepN'
p2386
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00V3\xc0'
tRp2387
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2388
sg30
I0
sg56
g43
(g584
S'\xb4\x00\x00\x00\x00\x00\x00\x00'
tRp2389
sS'trials.thisTrialN'
p2390
I180
sg32
I1
sg37
g38
sg41
V3
sg33
F1.90972900390625
sS'trials.thisN'
p2391
I180
sa(dp2392
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_10_orig.jpg'
p2393
sS'trials.thisIndex'
p2394
g43
(g584
S'\xb5\x00\x00\x00\x00\x00\x00\x00'
tRp2395
sS'trials.thisRepN'
p2396
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00V3\xc0'
tRp2397
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2398
sg30
I0
sg56
g43
(g584
S'\xb5\x00\x00\x00\x00\x00\x00\x00'
tRp2399
sS'trials.thisTrialN'
p2400
I181
sg32
I1
sg37
g38
sg41
V3
sg33
F1.507500171661377
sS'trials.thisN'
p2401
I181
sa(dp2402
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_10_orig.jpg'
p2403
sS'trials.thisIndex'
p2404
g43
(g584
S'\xb6\x00\x00\x00\x00\x00\x00\x00'
tRp2405
sS'trials.thisRepN'
p2406
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00V3\xc0'
tRp2407
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2408
sg30
I0
sg56
g43
(g584
S'\xb6\x00\x00\x00\x00\x00\x00\x00'
tRp2409
sS'trials.thisTrialN'
p2410
I182
sg32
I1
sg37
g38
sg41
V3
sg33
F1.3894851207733154
sS'trials.thisN'
p2411
I182
sa(dp2412
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_09_orig.jpg'
p2413
sS'trials.thisIndex'
p2414
g43
(g584
S'\xb7\x00\x00\x00\x00\x00\x00\x00'
tRp2415
sS'trials.thisRepN'
p2416
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00V3\xc0'
tRp2417
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2418
sg30
I0
sg56
g43
(g584
S'\xb7\x00\x00\x00\x00\x00\x00\x00'
tRp2419
sS'trials.thisTrialN'
p2420
I183
sg32
I1
sg37
g38
sg41
V3
sg33
F2.7454490661621094
sS'trials.thisN'
p2421
I183
sa(dp2422
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_05_orig.jpg'
p2423
sS'trials.thisIndex'
p2424
g43
(g584
S'\xb8\x00\x00\x00\x00\x00\x00\x00'
tRp2425
sS'trials.thisRepN'
p2426
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00V3\xc0'
tRp2427
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2428
sg30
I0
sg56
g43
(g584
S'\xb8\x00\x00\x00\x00\x00\x00\x00'
tRp2429
sS'trials.thisTrialN'
p2430
I184
sg32
I1
sg37
g38
sg41
V3
sg33
F1.7262389659881592
sS'trials.thisN'
p2431
I184
sa(dp2432
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF6_00_orig.jpg'
p2433
sS'trials.thisIndex'
p2434
g43
(g584
S'\xb9\x00\x00\x00\x00\x00\x00\x00'
tRp2435
sS'trials.thisRepN'
p2436
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00V3\xc0'
tRp2437
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2438
sg30
I1
sg56
g43
(g584
S'\xb9\x00\x00\x00\x00\x00\x00\x00'
tRp2439
sS'trials.thisTrialN'
p2440
I185
sg32
I0
sg37
g38
sg41
V3
sg33
F2.493873119354248
sS'trials.thisN'
p2441
I185
sa(dp2442
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_08_orig.jpg'
p2443
sS'trials.thisIndex'
p2444
g43
(g584
S'\xba\x00\x00\x00\x00\x00\x00\x00'
tRp2445
sS'trials.thisRepN'
p2446
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00V3\xc0'
tRp2447
sg29
g43
(g45
S'\x00\x00\x00\x00\x00v!@'
tRp2448
sg30
I0
sg56
g43
(g584
S'\xba\x00\x00\x00\x00\x00\x00\x00'
tRp2449
sS'trials.thisTrialN'
p2450
I186
sg32
I1
sg37
g38
sg41
V3
sg33
F2.3763768672943115
sS'trials.thisN'
p2451
I186
sa(dp2452
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_10_orig.jpg'
p2453
sS'trials.thisIndex'
p2454
g43
(g584
S'\xbb\x00\x00\x00\x00\x00\x00\x00'
tRp2455
sS'trials.thisRepN'
p2456
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\x8a3\xc0'
tRp2457
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xc2 @'
tRp2458
sg30
I1
sg56
g43
(g584
S'\xbb\x00\x00\x00\x00\x00\x00\x00'
tRp2459
sS'trials.thisTrialN'
p2460
I187
sg32
I0
sg37
g38
sg41
V3
sg33
F0.85101199150085449
sS'trials.thisN'
p2461
I187
sa(dp2462
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_10_orig.jpg'
p2463
sS'trials.thisIndex'
p2464
g43
(g584
S'\xbc\x00\x00\x00\x00\x00\x00\x00'
tRp2465
sS'trials.thisRepN'
p2466
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00e3\xc0'
tRp2467
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x95 @'
tRp2468
sg30
I1
sg56
g43
(g584
S'\xbc\x00\x00\x00\x00\x00\x00\x00'
tRp2469
sS'trials.thisTrialN'
p2470
I188
sg32
I0
sg37
g38
sg41
V3
sg33
F4.6920671463012695
sS'trials.thisN'
p2471
I188
sa(dp2472
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_05_orig.jpg'
p2473
sS'trials.thisIndex'
p2474
g43
(g584
S'\xbd\x00\x00\x00\x00\x00\x00\x00'
tRp2475
sS'trials.thisRepN'
p2476
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00e3\xc0'
tRp2477
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x95 @'
tRp2478
sg30
I1
sg56
g43
(g584
S'\xbd\x00\x00\x00\x00\x00\x00\x00'
tRp2479
sS'trials.thisTrialN'
p2480
I189
sg32
I0
sg37
g38
sg41
V3
sg33
F4.0695390701293945
sS'trials.thisN'
p2481
I189
sa(dp2482
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_03_orig.jpg'
p2483
sS'trials.thisIndex'
p2484
g43
(g584
S'\xbe\x00\x00\x00\x00\x00\x00\x00'
tRp2485
sS'trials.thisRepN'
p2486
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80l3\xc0'
tRp2487
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x95 @'
tRp2488
sg30
I1
sg56
g43
(g584
S'\xbe\x00\x00\x00\x00\x00\x00\x00'
tRp2489
sS'trials.thisTrialN'
p2490
I190
sg32
I0
sg37
g38
sg41
V3
sg33
F1.6388537883758545
sS'trials.thisN'
p2491
I190
sa(dp2492
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_10_orig.jpg'
p2493
sS'trials.thisIndex'
p2494
g43
(g584
S'\xbf\x00\x00\x00\x00\x00\x00\x00'
tRp2495
sS'trials.thisRepN'
p2496
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80{3\xc0'
tRp2497
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x95 @'
tRp2498
sg30
I0
sg56
g43
(g584
S'\xbf\x00\x00\x00\x00\x00\x00\x00'
tRp2499
sS'trials.thisTrialN'
p2500
I191
sg32
I1
sg37
g38
sg41
V3
sg33
F2.4455850124359131
sS'trials.thisN'
p2501
I191
sa(dp2502
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_02_orig.jpg'
p2503
sS'trials.thisIndex'
p2504
g43
(g584
S'\xc0\x00\x00\x00\x00\x00\x00\x00'
tRp2505
sS'trials.thisRepN'
p2506
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x923\xc0'
tRp2507
sg29
g43
(g45
S'\x00\x00\x00\x00\x00h @'
tRp2508
sg30
I0
sg56
g43
(g584
S'\xc0\x00\x00\x00\x00\x00\x00\x00'
tRp2509
sS'trials.thisTrialN'
p2510
I192
sg32
I1
sg37
g38
sg41
V3
sg33
F2.0434601306915283
sS'trials.thisN'
p2511
I192
sa(dp2512
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM4_09_orig.jpg'
p2513
sS'trials.thisIndex'
p2514
g43
(g584
S'\xc1\x00\x00\x00\x00\x00\x00\x00'
tRp2515
sS'trials.thisRepN'
p2516
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xa13\xc0'
tRp2517
sg29
g43
(g45
S'\x00\x00\x00\x00\x00, @'
tRp2518
sg30
I0
sg56
g43
(g584
S'\xc1\x00\x00\x00\x00\x00\x00\x00'
tRp2519
sS'trials.thisTrialN'
p2520
I193
sg32
I1
sg37
g38
sg41
V3
sg33
F1.724531888961792
sS'trials.thisN'
p2521
I193
sa(dp2522
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_07_orig.jpg'
p2523
sS'trials.thisIndex'
p2524
g43
(g584
S'\xc2\x00\x00\x00\x00\x00\x00\x00'
tRp2525
sS'trials.thisRepN'
p2526
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xa13\xc0'
tRp2527
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xfe\x1f@'
tRp2528
sg30
I0
sg56
g43
(g584
S'\xc2\x00\x00\x00\x00\x00\x00\x00'
tRp2529
sS'trials.thisTrialN'
p2530
I194
sg32
I1
sg37
g38
sg41
V3
sg33
F4.3379690647125244
sS'trials.thisN'
p2531
I194
sa(dp2532
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM1_08_orig.jpg'
p2533
sS'trials.thisIndex'
p2534
g43
(g584
S'\xc3\x00\x00\x00\x00\x00\x00\x00'
tRp2535
sS'trials.thisRepN'
p2536
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xa13\xc0'
tRp2537
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xfe\x1f@'
tRp2538
sg30
I0
sg56
g43
(g584
S'\xc3\x00\x00\x00\x00\x00\x00\x00'
tRp2539
sS'trials.thisTrialN'
p2540
I195
sg32
I1
sg37
g38
sg41
V3
sg33
F4.0712370872497559
sS'trials.thisN'
p2541
I195
sa(dp2542
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF4_08_orig.jpg'
p2543
sS'trials.thisIndex'
p2544
g43
(g584
S'\xc4\x00\x00\x00\x00\x00\x00\x00'
tRp2545
sS'trials.thisRepN'
p2546
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\xa83\xc0'
tRp2547
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xe0\x1f@'
tRp2548
sg30
I0
sg56
g43
(g584
S'\xc4\x00\x00\x00\x00\x00\x00\x00'
tRp2549
sS'trials.thisTrialN'
p2550
I196
sg32
I1
sg37
g38
sg41
V3
sg33
F2.9318840503692627
sS'trials.thisN'
p2551
I196
sa(dp2552
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_04_orig.jpg'
p2553
sS'trials.thisIndex'
p2554
g43
(g584
S'\xc5\x00\x00\x00\x00\x00\x00\x00'
tRp2555
sS'trials.thisRepN'
p2556
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\x993\xc0'
tRp2557
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xe0\x1f@'
tRp2558
sg30
I0
sg56
g43
(g584
S'\xc5\x00\x00\x00\x00\x00\x00\x00'
tRp2559
sS'trials.thisTrialN'
p2560
I197
sg32
I1
sg37
g38
sg41
V3
sg33
F2.2443737983703613
sS'trials.thisN'
p2561
I197
sa(dp2562
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF1_09_orig.jpg'
p2563
sS'trials.thisIndex'
p2564
g43
(g584
S'\xc6\x00\x00\x00\x00\x00\x00\x00'
tRp2565
sS'trials.thisRepN'
p2566
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xec3\xc0'
tRp2567
sg29
g43
(g45
S'\x00\x00\x00\x00\x00, @'
tRp2568
sg30
I0
sg56
g43
(g584
S'\xc6\x00\x00\x00\x00\x00\x00\x00'
tRp2569
sS'trials.thisTrialN'
p2570
I198
sg32
I1
sg37
g38
sg41
V3
sg33
F1.9764931201934814
sS'trials.thisN'
p2571
I198
sa(dp2572
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_08_orig.jpg'
p2573
sS'trials.thisIndex'
p2574
g43
(g584
S'\xc7\x00\x00\x00\x00\x00\x00\x00'
tRp2575
sS'trials.thisRepN'
p2576
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xcd4\xc0'
tRp2577
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xb2!@'
tRp2578
sg30
I0
sg56
g43
(g584
S'\xc7\x00\x00\x00\x00\x00\x00\x00'
tRp2579
sS'trials.thisTrialN'
p2580
I199
sg32
I1
sg37
g38
sg41
V3
sg33
F4.2895519733428955
sS'trials.thisN'
p2581
I199
sa(dp2582
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_01_orig.jpg'
p2583
sS'trials.thisIndex'
p2584
g43
(g584
S'\xc8\x00\x00\x00\x00\x00\x00\x00'
tRp2585
sS'trials.thisRepN'
p2586
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80M4\xc0'
tRp2587
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x93"@'
tRp2588
sg30
I1
sg56
g43
(g584
S'\xc8\x00\x00\x00\x00\x00\x00\x00'
tRp2589
sS'trials.thisTrialN'
p2590
I200
sg32
I0
sg37
g38
sg41
V3
sg33
F1.1209628582000732
sS'trials.thisN'
p2591
I200
sa(dp2592
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM10_00_orig.jpg'
p2593
sS'trials.thisIndex'
p2594
g43
(g584
S'\xc9\x00\x00\x00\x00\x00\x00\x00'
tRp2595
sS'trials.thisRepN'
p2596
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xdd3\xc0'
tRp2597
sg29
g43
(g45
S'\x00\x00\x00\x00\x00,\x1f@'
tRp2598
sg30
I1
sg56
g43
(g584
S'\xc9\x00\x00\x00\x00\x00\x00\x00'
tRp2599
sS'trials.thisTrialN'
p2600
I201
sg32
I0
sg37
g38
sg41
V3
sg33
F1.1882538795471191
sS'trials.thisN'
p2601
I201
sa(dp2602
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_00_orig.jpg'
p2603
sS'trials.thisIndex'
p2604
g43
(g584
S'\xca\x00\x00\x00\x00\x00\x00\x00'
tRp2605
sS'trials.thisRepN'
p2606
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xa13\xc0'
tRp2607
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xb4\x1e@'
tRp2608
sg30
I1
sg56
g43
(g584
S'\xca\x00\x00\x00\x00\x00\x00\x00'
tRp2609
sS'trials.thisTrialN'
p2610
I202
sg32
I0
sg37
g38
sg41
V3
sg33
F1.2222878932952881
sS'trials.thisN'
p2611
I202
sa(dp2612
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM9_01_orig.jpg'
p2613
sS'trials.thisIndex'
p2614
g43
(g584
S'\xcb\x00\x00\x00\x00\x00\x00\x00'
tRp2615
sS'trials.thisRepN'
p2616
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x923\xc0'
tRp2617
sg29
g43
(g45
S'\x00\x00\x00\x00\x00Z\x1e@'
tRp2618
sg30
I1
sg56
g43
(g584
S'\xcb\x00\x00\x00\x00\x00\x00\x00'
tRp2619
sS'trials.thisTrialN'
p2620
I203
sg32
I0
sg37
g38
sg41
V3
sg33
F1.5066561698913574
sS'trials.thisN'
p2621
I203
sa(dp2622
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF7_09_orig.jpg'
p2623
sS'trials.thisIndex'
p2624
g43
(g584
S'\xcc\x00\x00\x00\x00\x00\x00\x00'
tRp2625
sS'trials.thisRepN'
p2626
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80{3\xc0'
tRp2627
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x00\x1e@'
tRp2628
sg30
I1
sg56
g43
(g584
S'\xcc\x00\x00\x00\x00\x00\x00\x00'
tRp2629
sS'trials.thisTrialN'
p2630
I204
sg32
I0
sg37
g38
sg41
V3
sg33
F2.4455690383911133
sS'trials.thisN'
p2631
I204
sa(dp2632
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF9_00_orig.jpg'
p2633
sS'trials.thisIndex'
p2634
g43
(g584
S'\xcd\x00\x00\x00\x00\x00\x00\x00'
tRp2635
sS'trials.thisRepN'
p2636
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x0b3\xc0'
tRp2637
sg29
g43
(g45
S'\x00\x00\x00\x00\x00L\x1d@'
tRp2638
sg30
I1
sg56
g43
(g584
S'\xcd\x00\x00\x00\x00\x00\x00\x00'
tRp2639
sS'trials.thisTrialN'
p2640
I205
sg32
I0
sg37
g38
sg41
V3
sg33
F3.0972549915313721
sS'trials.thisN'
p2641
I205
sa(dp2642
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_02_orig.jpg'
p2643
sS'trials.thisIndex'
p2644
g43
(g584
S'\xce\x00\x00\x00\x00\x00\x00\x00'
tRp2645
sS'trials.thisRepN'
p2646
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80{3\xc0'
tRp2647
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xc4\x1d@'
tRp2648
sg30
I1
sg56
g43
(g584
S'\xce\x00\x00\x00\x00\x00\x00\x00'
tRp2649
sS'trials.thisTrialN'
p2650
I206
sg32
I0
sg37
g38
sg41
V3
sg33
F4.5068371295928955
sS'trials.thisN'
p2651
I206
sa(dp2652
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_05_orig.jpg'
p2653
sS'trials.thisIndex'
p2654
g43
(g584
S'\xcf\x00\x00\x00\x00\x00\x00\x00'
tRp2655
sS'trials.thisRepN'
p2656
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80{3\xc0'
tRp2657
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xc4\x1d@'
tRp2658
sg30
I1
sg56
g43
(g584
S'\xcf\x00\x00\x00\x00\x00\x00\x00'
tRp2659
sS'trials.thisTrialN'
p2660
I207
sg32
I0
sg37
g38
sg41
V3
sg33
F1.2555859088897705
sS'trials.thisN'
p2661
I207
sa(dp2662
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF3_09_orig.jpg'
p2663
sS'trials.thisIndex'
p2664
g43
(g584
S'\xd0\x00\x00\x00\x00\x00\x00\x00'
tRp2665
sS'trials.thisRepN'
p2666
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80l3\xc0'
tRp2667
sg29
g43
(g45
S'\x00\x00\x00\x00\x00L\x1d@'
tRp2668
sg30
I0
sg56
g43
(g584
S'\xd0\x00\x00\x00\x00\x00\x00\x00'
tRp2669
sS'trials.thisTrialN'
p2670
I208
sg32
I1
sg37
g38
sg41
V3
sg33
F1.9934329986572266
sS'trials.thisN'
p2671
I208
sa(dp2672
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_10_orig.jpg'
p2673
sS'trials.thisIndex'
p2674
g43
(g584
S'\xd1\x00\x00\x00\x00\x00\x00\x00'
tRp2675
sS'trials.thisRepN'
p2676
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00t3\xc0'
tRp2677
sg29
g43
(g45
S'\x00\x00\x00\x00\x00.\x1d@'
tRp2678
sg30
I0
sg56
g43
(g584
S'\xd1\x00\x00\x00\x00\x00\x00\x00'
tRp2679
sS'trials.thisTrialN'
p2680
I209
sg32
I1
sg37
g38
sg41
V3
sg33
F2.3955569267272949
sS'trials.thisN'
p2681
I209
sa(dp2682
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM8_08_orig.jpg'
p2683
sS'trials.thisIndex'
p2684
g43
(g584
S'\xd2\x00\x00\x00\x00\x00\x00\x00'
tRp2685
sS'trials.thisRepN'
p2686
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x833\xc0'
tRp2687
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xd4\x1c@'
tRp2688
sg30
I0
sg56
g43
(g584
S'\xd2\x00\x00\x00\x00\x00\x00\x00'
tRp2689
sS'trials.thisTrialN'
p2690
I210
sg32
I1
sg37
g38
sg41
V3
sg33
F3.1829319000244141
sS'trials.thisN'
p2691
I210
sa(dp2692
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM3_07_orig.jpg'
p2693
sS'trials.thisIndex'
p2694
g43
(g584
S'\xd3\x00\x00\x00\x00\x00\x00\x00'
tRp2695
sS'trials.thisRepN'
p2696
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\x833\xc0'
tRp2697
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\x98\x1c@'
tRp2698
sg30
I1
sg56
g43
(g584
S'\xd3\x00\x00\x00\x00\x00\x00\x00'
tRp2699
sS'trials.thisTrialN'
p2700
I211
sg32
I0
sg37
g38
sg41
V3
sg33
F4.3728702068328857
sS'trials.thisN'
p2701
I211
sa(dp2702
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM5_06_orig.jpg'
p2703
sS'trials.thisIndex'
p2704
g43
(g584
S'\xd4\x00\x00\x00\x00\x00\x00\x00'
tRp2705
sS'trials.thisRepN'
p2706
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xa13\xc0'
tRp2707
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xe4\x1b@'
tRp2708
sg30
I0
sg56
g43
(g584
S'\xd4\x00\x00\x00\x00\x00\x00\x00'
tRp2709
sS'trials.thisTrialN'
p2710
I212
sg32
I1
sg37
g38
sg41
V3
sg33
F5.0082540512084961
sS'trials.thisN'
p2711
I212
sa(dp2712
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_09_orig.jpg'
p2713
sS'trials.thisIndex'
p2714
g43
(g584
S'\xd5\x00\x00\x00\x00\x00\x00\x00'
tRp2715
sS'trials.thisRepN'
p2716
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x00\xb03\xc0'
tRp2717
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xa8\x1b@'
tRp2718
sg30
I0
sg56
g43
(g584
S'\xd5\x00\x00\x00\x00\x00\x00\x00'
tRp2719
sS'trials.thisTrialN'
p2720
I213
sg32
I1
sg37
g38
sg41
V3
sg33
F2.060136079788208
sS'trials.thisN'
p2721
I213
sa(dp2722
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF8_06_orig.jpg'
p2723
sS'trials.thisIndex'
p2724
g43
(g584
S'\xd6\x00\x00\x00\x00\x00\x00\x00'
tRp2725
sS'trials.thisRepN'
p2726
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\xb73\xc0'
tRp2727
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xa8\x1b@'
tRp2728
sg30
I0
sg56
g43
(g584
S'\xd6\x00\x00\x00\x00\x00\x00\x00'
tRp2729
sS'trials.thisTrialN'
p2730
I214
sg32
I1
sg37
g38
sg41
V3
sg33
F3.2838280200958252
sS'trials.thisN'
p2731
I214
sa(dp2732
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF5_04_orig.jpg'
p2733
sS'trials.thisIndex'
p2734
g43
(g584
S'\xd7\x00\x00\x00\x00\x00\x00\x00'
tRp2735
sS'trials.thisRepN'
p2736
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\xb73\xc0'
tRp2737
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xa8\x1b@'
tRp2738
sg30
I0
sg56
g43
(g584
S'\xd7\x00\x00\x00\x00\x00\x00\x00'
tRp2739
sS'trials.thisTrialN'
p2740
I215
sg32
I1
sg37
g38
sg41
V3
sg33
F1.5239520072937012
sS'trials.thisN'
p2741
I215
sa(dp2742
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM2_04_orig.jpg'
p2743
sS'trials.thisIndex'
p2744
g43
(g584
S'\xd8\x00\x00\x00\x00\x00\x00\x00'
tRp2745
sS'trials.thisRepN'
p2746
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x0056\xc0'
tRp2747
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xc6\x1b@'
tRp2748
sg30
I0
sg56
g43
(g584
S'\xd8\x00\x00\x00\x00\x00\x00\x00'
tRp2749
sS'trials.thisTrialN'
p2750
I216
sg32
I1
sg37
g38
sg41
V3
sg33
F3.9368729591369629
sS'trials.thisN'
p2751
I216
sa(dp2752
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF2_05_orig.jpg'
p2753
sS'trials.thisIndex'
p2754
g43
(g584
S'\xd9\x00\x00\x00\x00\x00\x00\x00'
tRp2755
sS'trials.thisRepN'
p2756
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\x006\xc0'
tRp2757
sg29
g43
(g45
S'\x00\x00\x00\x00\x00\xc8\x19@'
tRp2758
sg30
I0
sg56
g43
(g584
S'\xd9\x00\x00\x00\x00\x00\x00\x00'
tRp2759
sS'trials.thisTrialN'
p2760
I217
sg32
I1
sg37
g38
sg41
V3
sg33
F1.9087631702423096
sS'trials.thisN'
p2761
I217
sa(dp2762
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphM7_01_orig.jpg'
p2763
sS'trials.thisIndex'
p2764
g43
(g584
S'\xda\x00\x00\x00\x00\x00\x00\x00'
tRp2765
sS'trials.thisRepN'
p2766
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x80\x0f6\xc0'
tRp2767
sg29
g43
(g45
S'\x00\x00\x00\x00\x002\x19@'
tRp2768
sg30
I0
sg56
g43
(g584
S'\xda\x00\x00\x00\x00\x00\x00\x00'
tRp2769
sS'trials.thisTrialN'
p2770
I218
sg32
I1
sg37
g38
sg41
V3
sg33
F1.3385789394378662
sS'trials.thisN'
p2771
I218
sa(dp2772
g31
I0
sg40
g11
sg39
VK
sg581
S'./stim/MorphF10_09_orig.jpg'
p2773
sS'trials.thisIndex'
p2774
g43
(g584
S'\xdb\x00\x00\x00\x00\x00\x00\x00'
tRp2775
sS'trials.thisRepN'
p2776
I0
sg42
g46
sg28
g43
(g45
S'\x00\x00\x00\x00\x0056\xc0'
tRp2777
sg29
g43
(g45
S'\x00\x00\x00\x00\x00B\x18@'
tRp2778
sg30
I0
sg56
g43
(g584
S'\xdb\x00\x00\x00\x00\x00\x00\x00'
tRp2779
sS'trials.thisTrialN'
p2780
I219
sg32
I1
sg37
g38
sg41
V3
sg33
F2.2275509834289551
sS'trials.thisN'
p2781
I219
sasS'loops'
p2782
(lp2783
g1
(cpsychopy.data
TrialHandler
p2784
g3
NtRp2785
(dp2786
S'origin'
p2787
V\u000a\u000a\u000a\u000a\u000a#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a"""\u000a ________    _______    ___       __           ________  ________   ________   _______    ________      \u000a|\u005c   ___  \u005c |\u005c  ___ \u005c  |\u005c  \u005c     |\u005c  \u005c        |\u005c  _____\u005c|\u005c   __  \u005c |\u005c   ____\u005c |\u005c  ___ \u005c  |\u005c   ____\u005c     \u000a\u005c \u005c  \u005c\u005c \u005c  \u005c\u005c \u005c   __/| \u005c \u005c  \u005c    \u005c \u005c  \u005c       \u005c \u005c  \u005c__/ \u005c \u005c  \u005c|\u005c  \u005c\u005c \u005c  \u005c___| \u005c \u005c   __/| \u005c \u005c  \u005c___|_    \u000a \u005c \u005c  \u005c\u005c \u005c  \u005c\u005c \u005c  \u005c_|/__\u005c \u005c  \u005c  __\u005c \u005c  \u005c       \u005c \u005c   __\u005c \u005c \u005c   __  \u005c\u005c \u005c  \u005c     \u005c \u005c  \u005c_|/__\u005c \u005c_____  \u005c   \u000a  \u005c \u005c  \u005c\u005c \u005c  \u005c\u005c \u005c  \u005c_|\u005c \u005c\u005c \u005c  \u005c|\u005c__\u005c_\u005c  \u005c       \u005c \u005c  \u005c_|  \u005c \u005c  \u005c \u005c  \u005c\u005c \u005c  \u005c____ \u005c \u005c  \u005c_|\u005c \u005c\u005c|____|\u005c  \u005c  \u000a   \u005c \u005c__\u005c\u005c \u005c__\u005c\u005c \u005c_______\u005c\u005c \u005c____________\u005c       \u005c \u005c__\u005c    \u005c \u005c__\u005c \u005c__\u005c\u005c \u005c_______\u005c\u005c \u005c_______\u005c ____\u005c_\u005c  \u005c \u000a    \u005c|__| \u005c|__| \u005c|_______| \u005c|____________|        \u005c|__|     \u005c|__|\u005c|__| \u005c|_______| \u005c|_______||\u005c_________\u005c\u000a                                                                                            \u005c|_________|\u000a"""\u000a\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'facesParametric'  # from the Builder filename that created this script\u000aexpInfo = {u'participant': u'', u'group': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Check whether the chosen participant number is valid\u000amyDlg = gui.Dlg(title="FEHLER")\u000amyDlg.addText(u'Vp-Nnummer zwischen 1 und 100 eingeben')\u000aassert len(str(expInfo['participant'])) > 0, myDlg.show()\u000atry:\u000a    assert int(expInfo['participant']) in range(1,101), myDlg.show()\u000aexcept:\u000a    myDlg.show()\u000a\u000a# Check whether a group membership has been defined\u000amyDlg = gui.Dlg(title="FEHLER")\u000amyDlg.addText(u'Gruppenzugehoerigkeit angeben')\u000aassert len(str(expInfo['group'])) > 0, myDlg.show()\u000a\u000a# Here, we check if the number of the current participant\u000a# is odd or even, and we swap the button order accordingly\u000a# (this also affects the result computation, so the 'angry'\u000a# button is different for the two versions)\u000a\u000aif int(expInfo['participant'])%2 == 1:\u000a    # odd participant numbers have buttons assigned fear-anger\u000a    mainInstructText = u'Im nachfolgenden Experiment werden Sie nacheinander einzelne Gesichter sehen.\u005cnSie m\u005cxfcssen jeweils entscheiden, ob das gezeigt Gesicht einen\u005cn\u005cxc4NGSTLICHEN oder \u005cxc4RGERLICHEN Ausdruck hat.\u005cn\u005cnEntscheiden Sie sich bei jedem gezeigten Gesicht f\u005cxfcr einen der beiden m\u005cxf6glichen Emotionsausdr\u005cxfccke.'\u000a    buttonInstructText = u'Dr\u005cxfccken Sie die LINKE Maustaste,\u005cnwenn das Gesicht eher \u005cxc4NGSTLICH ist.\u005cn\u005cnDr\u005cxfccken Sie die RECHTE Maustaste,\u005cnwenn das Gesicht eher \u005cxc4RGERLICH ist.'\u000a    # angry judgement on right mouse button\u000a    targetButton = 2\u000aelse:\u000a    # even participant numbers have button assigments anger-fear\u000a    mainInstructText = u'Im nachfolgenden Experiment werden Sie nacheinander einzelne Gesichter sehen.\u005cnSie m\u005cxfcssen jeweils entscheiden, ob das gezeigt Gesicht einen\u005cn \u005cxc4RGERLICHEN oder \u005cxc4NGSTLICHEN Ausdruck hat.\u005cn\u005cnEntscheiden Sie sich bei jedem gezeigten Gesicht f\u005cxfcr einen der beiden m\u005cxf6glichen Emotionsausdr\u005cxfccke.'\u000a    buttonInstructText = u'Dr\u005cxfccken Sie die LINKE Maustaste,\u005cnwenn das Gesicht eher \u005cxc4RGERLICH ist.\u005cn\u005cnDr\u005cxfccken Sie die RECHTE Maustaste,\u005cnwenn das Gesicht eher \u005cxc4NGSTLICH ist.'\u000a    # angry judgement on left mouse button\u000a    targetButton = 0\u000a\u000a# from the number defined in the prompt window, we derive\u000a# which array files (pt1 & pt2) should be fetched for the\u000a# current participant (this works for number from 1 to 999,\u000a# but of course the array file must also exist!)\u000a\u000athisParticipant = 'arrays/p'+ ('00' + str(expInfo['participant']))[-3:]\u000apt1Conditions = thisParticipant +'pt1.csv'\u000apt2Conditions = thisParticipant +'pt2.csv'\u000a\u000acountDict = {}\u000ahitsDict = {}\u000a\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + 'data/%s_%s_%s_%s' %(expInfo['group'],expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=[1600, 900], fullscr=True, screen=0, allowGUI=True, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    units='cm')\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "mainInstruct"\u000amainInstructClock = core.Clock()\u000amainText = visual.TextStim(win=win, ori=0, name='mainText',\u000a    text=mainInstructText,    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "buttonInstruct"\u000abuttonInstructClock = core.Clock()\u000abuttonText = visual.TextStim(win=win, ori=0, name='buttonText',\u000a    text=buttonInstructText,    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "startScreen"\u000astartScreenClock = core.Clock()\u000astartText = visual.TextStim(win=win, ori=0, name='startText',\u000a    text=u'Falls Sie noch Fragen haben,\u005cnwenden Sie sich bitte an die Versuchsleiterin.\u005cn\u005cnWeiter mit ENTER.',    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "mainTrial"\u000amainTrialClock = core.Clock()\u000afaceImg = visual.ImageStim(win=win, name='faceImg',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=[10.12,13.72],\u000a    color=[1,1,1], colorSpace='rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=True, depth=0.0)\u000amouseResp = event.Mouse(win=win,visible=False)\u000ax, y = [None, None]\u000a\u000a# Initialize components for Routine "forcedPause"\u000aforcedPauseClock = core.Clock()\u000apauseText = visual.TextStim(win=win, ori=0, name='pauseText',\u000a    text=u'Zeit f\u005cxfcr eine kurze Pause.',    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "resumeExperiment"\u000aresumeExperimentClock = core.Clock()\u000aresumeText = visual.TextStim(win=win, ori=0, name='resumeText',\u000a    text='Weiter mit ENTER.',    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "mainTrial"\u000amainTrialClock = core.Clock()\u000afaceImg = visual.ImageStim(win=win, name='faceImg',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=[10.12,13.72],\u000a    color=[1,1,1], colorSpace='rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=True, depth=0.0)\u000amouseResp = event.Mouse(win=win,visible=False)\u000ax, y = [None, None]\u000a\u000a# Initialize components for Routine "endInstruct"\u000aendInstructClock = core.Clock()\u000aendText = visual.TextStim(win=win, ori=0, name='endText',\u000a    text=u'Dieser Teil des Experiments ist nun zu Ende.\u005cnVielen Dank!\u005cn\u005cnWenden Sie sich bitte an die Versuchsleiterin.',    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a\u000a\u000a################################ BASIC EMOZ ##\u000a\u000a\u000a# Initialize components for Routine "basicInstruct"\u000abasicInstructClock = core.Clock()\u000atext = visual.TextStim(win=win, ori=0, name='text',\u000a    text=u"Im nachfolgenden Experiment werden Sie nacheinander einzelne Gesichter sehen.\u005cn\u005cnSie m\u005cxfcssen jeweils entscheiden, welchen Ausdruck das gezeigte Gesicht hat.\u005cn\u005cnZur Auswahl stehen Ihnen hierbei die folgenden M\u005cxf6glichkeiten:\u005cnFreude\u005cnAngst\u005cn\u005cxc4rger\u005cnTrauer\u005cnEkel\u005cn\u005cxdcberraschung\u005cnNeutral\u005cn\u005cnEntscheiden Sie sich bei jedem gezeigten Gesicht f\u005cxfcr einen der \u005cnm\u005cxf6glichen Gesichtsausdr\u005cxfccke.",    font='Arial',\u000a    pos=[0, 0], height=0.8, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "basicTrial"\u000abasicTrialClock = core.Clock()\u000abasicImage = visual.ImageStim(win=win, name='basicImage',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 3], size=[10.12,13.72],\u000a    color=[1,1,1], colorSpace='rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=True, depth=0.0)\u000a\u000abasicRating1 = visual.RatingScale(win=win, name='basicRating1', marker=u'hover', size=0.6, pos=[0.0, -0.5], choices=[u'Freude', u'Trauer'], tickHeight=-1, disappear=True)\u000abasicRating2 = visual.RatingScale(win=win, name='basicRating2', marker=u'hover', size=0.6, pos=[0.0, -0.6], choices=[u'Angst', u'\u005cxc4rger'], tickHeight=-1, singleClick=True, disappear=True)\u000abasicRating3 = visual.RatingScale(win=win, name='basicRating3', marker=u'hover', size=0.6, pos=[0.0, -0.7], choices=[u'Ekel', u'\u005cxdcberraschung'], tickHeight=-1, singleClick=True, disappear=True)\u000abasicRating4 = visual.RatingScale(win=win, name='basicRating4', marker=u'hover', size=0.6, pos=[0.0, -0.8], choices=[u' ',u'Neutral', u' '], tickHeight=-1, singleClick=True, disappear=True)\u000a\u000a# Initialize components for Routine "basicWait"\u000abasicWaitClock = core.Clock()\u000aISI = core.StaticPeriod(win=win, screenHz=expInfo['frameRate'], name='ISI')\u000a\u000a# Initialize components for Routine "basicEnd"\u000abasicEndClock = core.Clock()\u000atext_2 = visual.TextStim(win=win, ori=0, name='text_2',\u000a    text=u'Danke. Das war der erste Teil.\u005cnDr\u005cxfccken Sie ENTER um zum n\u005cxe4chsten Teil zu kommen',    font=u'Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a    \u000a    \u000a    \u000a    \u000a###############################################################################\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a\u000a\u000a\u000a#############################################\u000a\u000a\u000a\u000a#------Prepare to start Routine "basicInstruct"-------\u000at = 0\u000abasicInstructClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000abasicInstructComponents = []\u000abasicInstructComponents.append(text)\u000abasicInstructComponents.append(key_resp_2)\u000afor thisComponent in basicInstructComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "basicInstruct"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = basicInstructClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text* updates\u000a    if t >= 0.0 and text.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text.tStart = t  # underestimates by a little under one frame\u000a        text.frameNStart = frameN  # exact frame index\u000a        text.setAutoDraw(True)\u000a    \u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_2.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space','return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_2.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_2.rt = key_resp_2.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in basicInstructComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "basicInstruct"-------\u000afor thisComponent in basicInstructComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_2.keys in ['', [], None]:  # No response was made\u000a   key_resp_2.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_2.keys',key_resp_2.keys)\u000aif key_resp_2.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_2.rt', key_resp_2.rt)\u000athisExp.nextEntry()\u000a# the Routine "basicInstruct" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abasicLoop = data.TrialHandler(nReps=1, method='fullRandom', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions('./arrays/imgList.csv'),\u000a    seed=None, name='basicLoop')\u000athisExp.addLoop(basicLoop)  # add the loop to the experiment\u000athisBasicLoop = basicLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBasicLoop.rgb)\u000aif thisBasicLoop != None:\u000a    for paramName in thisBasicLoop.keys():\u000a        exec(paramName + '= thisBasicLoop.' + paramName)\u000a\u000afor thisBasicLoop in basicLoop:\u000a    currentLoop = basicLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBasicLoop.rgb)\u000a    if thisBasicLoop != None:\u000a        for paramName in thisBasicLoop.keys():\u000a            exec(paramName + '= thisBasicLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "basicTrial"-------\u000a    \u000a    \u000a    ###########\u000a    # resetting the rating scales each time, so that the last response isnt visible\u000a    \u000a    basicRating1 = visual.RatingScale(win=win, name='basicRating1', marker=u'hover', size=0.6, pos=[0.0, -0.5], choices=[u'Freude', u'Trauer'], tickHeight=-1, disappear=True)\u000a    basicRating2 = visual.RatingScale(win=win, name='basicRating2', marker=u'hover', size=0.6, pos=[0.0, -0.6], choices=[u'Angst', u'\u005cxc4rger'], tickHeight=-1, singleClick=True, disappear=True)\u000a    basicRating3 = visual.RatingScale(win=win, name='basicRating3', marker=u'hover', size=0.6, pos=[0.0, -0.7], choices=[u'Ekel', u'\u005cxdcberraschung'], tickHeight=-1, singleClick=True, disappear=True)\u000a    basicRating4 = visual.RatingScale(win=win, name='basicRating4', marker=u'hover', size=0.6, pos=[0.0, -0.8], choices=[u' ',u'Neutral', u' '], tickHeight=-1, singleClick=True, disappear=True)\u000a\u000a    ###########\u000a    \u000a    t = 0\u000a    basicTrialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    basicImage.setImage(img)\u000a    basicRating1.reset()\u000a    basicRating2.reset()\u000a    basicRating3.reset()\u000a    basicRating4.reset()\u000a    # keep track of which components have finished\u000a    basicTrialComponents = []\u000a    basicTrialComponents.append(basicImage)\u000a    basicTrialComponents.append(basicRating1)\u000a    basicTrialComponents.append(basicRating2)\u000a    basicTrialComponents.append(basicRating3)\u000a    basicTrialComponents.append(basicRating4)\u000a    for thisComponent in basicTrialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    # ugly hack: the labels need to be renamed as the "umlaute" cannot be saved to csv \u000a    basicRating1.choices = ['HAP', 'SAD']\u000a    basicRating2.choices = ['FEA', 'ANG']\u000a    basicRating3.choices = ['DIS', 'SUP']\u000a    basicRating4.choices = ['dummy','NTR', 'dummy']\u000a    #-------Start Routine "basicTrial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = basicTrialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *basicImage* updates\u000a        if t >= 0 and basicImage.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            basicImage.tStart = t  # underestimates by a little under one frame\u000a            basicImage.frameNStart = frameN  # exact frame index\u000a            basicImage.setAutoDraw(True)\u000a        if basicImage.status == STARTED and t >= (0 + (4.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            basicImage.setAutoDraw(False)\u000a        # *basicRating1* updates\u000a        if t >= 0.5 and basicRating1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            basicRating1.tStart = t  # underestimates by a little under one frame\u000a            basicRating1.frameNStart = frameN  # exact frame index\u000a            basicRating1.setAutoDraw(True)\u000a        continueRoutine &= basicRating1.noResponse  # a response ends the trial\u000a        # *basicRating2* updates\u000a        if t >= 0.5 and basicRating2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            basicRating2.tStart = t  # underestimates by a little under one frame\u000a            basicRating2.frameNStart = frameN  # exact frame index\u000a            basicRating2.setAutoDraw(True)\u000a        continueRoutine &= basicRating2.noResponse  # a response ends the trial\u000a        # *basicRating3* updates\u000a        if t >= 0.5 and basicRating3.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            basicRating3.tStart = t  # underestimates by a little under one frame\u000a            basicRating3.frameNStart = frameN  # exact frame index\u000a            basicRating3.setAutoDraw(True)\u000a        continueRoutine &= basicRating3.noResponse  # a response ends the trial\u000a        # *basicRating4* updates\u000a        if t >= 0.5 and basicRating4.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            basicRating4.tStart = t  # underestimates by a little under one frame\u000a            basicRating4.frameNStart = frameN  # exact frame index\u000a            basicRating4.setAutoDraw(True)\u000a        continueRoutine &= basicRating4.noResponse  # a response ends the trial\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in basicTrialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "basicTrial"-------\u000a    for thisComponent in basicTrialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for basicLoop (TrialHandler)\u000a    basicLoop.addData('basicRating1.response', basicRating1.getRating())\u000a    basicLoop.addData('basicRating1.rt', basicRating1.getRT())\u000a    # store data for basicLoop (TrialHandler)\u000a    basicLoop.addData('basicRating2.response', basicRating2.getRating())\u000a    basicLoop.addData('basicRating2.rt', basicRating2.getRT())\u000a    # store data for basicLoop (TrialHandler)\u000a    basicLoop.addData('basicRating3.response', basicRating3.getRating())\u000a    basicLoop.addData('basicRating3.rt', basicRating3.getRT())\u000a    # store data for basicLoop (TrialHandler)\u000a    basicLoop.addData('basicRating4.response', basicRating4.getRating())\u000a    basicLoop.addData('basicRating4.rt', basicRating4.getRT())\u000a    # the Routine "basicTrial" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    \u000a    #------Prepare to start Routine "basicWait"-------\u000a    t = 0\u000a    basicWaitClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(0.500000)\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    basicWaitComponents = []\u000a    basicWaitComponents.append(ISI)\u000a    for thisComponent in basicWaitComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "basicWait"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = basicWaitClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        # *ISI* period\u000a        if t >= 0.0 and ISI.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            ISI.tStart = t  # underestimates by a little under one frame\u000a            ISI.frameNStart = frameN  # exact frame index\u000a            ISI.start(0.5)\u000a        elif ISI.status == STARTED: #one frame should pass before updating params and completing\u000a            ISI.complete() #finish the static period\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in basicWaitComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "basicWait"-------\u000a    for thisComponent in basicWaitComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'basicLoop'\u000a\u000a\u000a#------Prepare to start Routine "basicEnd"-------\u000at = 0\u000abasicEndClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_3 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_3.status = NOT_STARTED\u000a# keep track of which components have finished\u000abasicEndComponents = []\u000abasicEndComponents.append(text_2)\u000abasicEndComponents.append(key_resp_3)\u000afor thisComponent in basicEndComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "basicEnd"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = basicEndClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_2* updates\u000a    if t >= 0.0 and text_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_2.tStart = t  # underestimates by a little under one frame\u000a        text_2.frameNStart = frameN  # exact frame index\u000a        text_2.setAutoDraw(True)\u000a    \u000a    # *key_resp_3* updates\u000a    if t >= 0.0 and key_resp_3.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_3.tStart = t  # underestimates by a little under one frame\u000a        key_resp_3.frameNStart = frameN  # exact frame index\u000a        key_resp_3.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_3.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_3.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space','return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_3.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_3.rt = key_resp_3.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in basicEndComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "basicEnd"-------\u000afor thisComponent in basicEndComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_3.keys in ['', [], None]:  # No response was made\u000a   key_resp_3.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_3.keys',key_resp_3.keys)\u000aif key_resp_3.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_3.rt', key_resp_3.rt)\u000athisExp.nextEntry()\u000a# the Routine "basicEnd" was not non-slip safe, so reset the non-slip timer\u000a#routineTimer.reset()\u000a#win.close()\u000a#core.quit()\u000a\u000a\u000a##############################################\u000amouseResp = event.Mouse(win=win,visible=False)\u000a\u000a\u000a#------Prepare to start Routine "mainInstruct"-------\u000at = 0\u000amainInstructClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000amainInstructComponents = []\u000amainInstructComponents.append(mainText)\u000amainInstructComponents.append(key_resp_2)\u000afor thisComponent in mainInstructComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "mainInstruct"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = mainInstructClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *mainText* updates\u000a    if t >= 0.0 and mainText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        mainText.tStart = t  # underestimates by a little under one frame\u000a        mainText.frameNStart = frameN  # exact frame index\u000a        mainText.setAutoDraw(True)\u000a    \u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_2.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 'return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_2.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_2.rt = key_resp_2.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in mainInstructComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "mainInstruct"-------\u000afor thisComponent in mainInstructComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_2.keys in ['', [], None]:  # No response was made\u000a   key_resp_2.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_2.keys',key_resp_2.keys)\u000aif key_resp_2.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_2.rt', key_resp_2.rt)\u000athisExp.nextEntry()\u000a# the Routine "mainInstruct" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a#------Prepare to start Routine "buttonInstruct"-------\u000at = 0\u000abuttonInstructClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_3 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_3.status = NOT_STARTED\u000a# keep track of which components have finished\u000abuttonInstructComponents = []\u000abuttonInstructComponents.append(buttonText)\u000abuttonInstructComponents.append(key_resp_3)\u000afor thisComponent in buttonInstructComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "buttonInstruct"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = buttonInstructClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *buttonText* updates\u000a    if t >= 0.0 and buttonText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        buttonText.tStart = t  # underestimates by a little under one frame\u000a        buttonText.frameNStart = frameN  # exact frame index\u000a        buttonText.setAutoDraw(True)\u000a    \u000a    # *key_resp_3* updates\u000a    if t >= 0.0 and key_resp_3.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_3.tStart = t  # underestimates by a little under one frame\u000a        key_resp_3.frameNStart = frameN  # exact frame index\u000a        key_resp_3.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_3.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_3.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 'return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_3.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_3.rt = key_resp_3.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in buttonInstructComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "buttonInstruct"-------\u000afor thisComponent in buttonInstructComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_3.keys in ['', [], None]:  # No response was made\u000a   key_resp_3.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_3.keys',key_resp_3.keys)\u000aif key_resp_3.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_3.rt', key_resp_3.rt)\u000athisExp.nextEntry()\u000a# the Routine "buttonInstruct" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a#------Prepare to start Routine "startScreen"-------\u000at = 0\u000astartScreenClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_4 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_4.status = NOT_STARTED\u000a# keep track of which components have finished\u000astartScreenComponents = []\u000astartScreenComponents.append(startText)\u000astartScreenComponents.append(key_resp_4)\u000afor thisComponent in startScreenComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "startScreen"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = startScreenClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *startText* updates\u000a    if t >= 0.0 and startText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        startText.tStart = t  # underestimates by a little under one frame\u000a        startText.frameNStart = frameN  # exact frame index\u000a        startText.setAutoDraw(True)\u000a    \u000a    # *key_resp_4* updates\u000a    if t >= 0.0 and key_resp_4.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_4.tStart = t  # underestimates by a little under one frame\u000a        key_resp_4.frameNStart = frameN  # exact frame index\u000a        key_resp_4.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_4.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_4.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space','return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_4.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_4.rt = key_resp_4.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in startScreenComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "startScreen"-------\u000afor thisComponent in startScreenComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_4.keys in ['', [], None]:  # No response was made\u000a   key_resp_4.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_4.keys',key_resp_4.keys)\u000aif key_resp_4.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_4.rt', key_resp_4.rt)\u000athisExp.nextEntry()\u000a# the Routine "startScreen" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials = data.TrialHandler(nReps=1, method='sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(pt1Conditions),\u000a    seed=None, name='trials')\u000athisExp.addLoop(trials)  # add the loop to the experiment\u000athisTrial = trials.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrial.rgb)\u000aif thisTrial != None:\u000a    for paramName in thisTrial.keys():\u000a        exec(paramName + '= thisTrial.' + paramName)\u000a\u000afor thisTrial in trials:\u000a    currentLoop = trials\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)\u000a    if thisTrial != None:\u000a        for paramName in thisTrial.keys():\u000a            exec(paramName + '= thisTrial.' + paramName)\u000a\u000a    #------Prepare to start Routine "mainTrial"-------\u000a    t = 0\u000a    mainTrialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    faceImg.setImage(img)\u000a    # setup some python lists for storing info about the mouseResp\u000a    mouseResp.x = []\u000a    mouseResp.y = []\u000a    mouseResp.leftButton = []\u000a    mouseResp.midButton = []\u000a    mouseResp.rightButton = []\u000a    mouseResp.time = []\u000a    # keep track of which components have finished\u000a    mainTrialComponents = []\u000a    mainTrialComponents.append(faceImg)\u000a    mainTrialComponents.append(mouseResp)\u000a    for thisComponent in mainTrialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "mainTrial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = mainTrialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *faceImg* updates\u000a        if t >= 0.0 and faceImg.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            faceImg.tStart = t  # underestimates by a little under one frame\u000a            faceImg.frameNStart = frameN  # exact frame index\u000a            faceImg.setAutoDraw(True)\u000a        # *mouseResp* updates\u000a        if t >= 0.3 and mouseResp.status == NOT_STARTED: ####################################\u000a            # keep track of start time/frame for later\u000a            mouseResp.tStart = t  # underestimates by a little under one frame\u000a            mouseResp.frameNStart = frameN  # exact frame index\u000a            mouseResp.status = STARTED\u000a            event.mouseButtons = [0, 0, 0]  # reset mouse buttons to be 'up'\u000a        if mouseResp.status == STARTED:  # only update if started and not stopped!\u000a            buttons = mouseResp.getPressed()\u000a            if sum([buttons[0],buttons[-1]]) > 0:  # ie if THE LEFT OR RIGHT BUTTON is pressed\u000a                x, y = mouseResp.getPos()\u000a                mouseResp.x.append(x)\u000a                mouseResp.y.append(y)\u000a                mouseResp.leftButton.append(buttons[0])\u000a                mouseResp.midButton.append(buttons[1])\u000a                mouseResp.rightButton.append(buttons[2])\u000a                mouseResp.time.append(mainTrialClock.getTime())\u000a                \u000a                \u000a                \u000a                \u000a                # add a counter\u000a                for morph in ['_00_','_01_','_02_','_03_','_04_','_05_','_06_','_07_','_08_','_09_','_10_']:\u000a                    if morph in img:\u000a                        try:\u000a                            countDict[morph] += 1\u000a                        except:\u000a                            countDict[morph] = 1\u000a                        if buttons[targetButton] == 1:\u000a                            try:\u000a                                hitsDict[morph]+=1\u000a                            except:\u000a                                hitsDict[morph]=1\u000a                                \u000a                # abort routine on response\u000a                continueRoutine = False\u000a                \u000a                # ADDED THE ESC COMMAND INTO THE LOOP, SO WE CAN QUIT ANYTIME\u000a                # check for quit (the Esc key)\u000a                if endExpNow or event.getKeys(keyList=["escape"]):\u000a                    core.quit()\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in mainTrialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "mainTrial"-------\u000a    for thisComponent in mainTrialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for trials (TrialHandler)\u000a    trials.addData('mouseResp.x', mouseResp.x[0])\u000a    trials.addData('mouseResp.y', mouseResp.y[0])\u000a    trials.addData('mouseResp.leftButton', mouseResp.leftButton[0])\u000a    trials.addData('mouseResp.midButton', mouseResp.midButton[0])\u000a    trials.addData('mouseResp.rightButton', mouseResp.rightButton[0])\u000a    trials.addData('mouseResp.time', mouseResp.time[0])\u000a    # the Routine "mainTrial" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'trials'\u000a\u000a\u000a#------Prepare to start Routine "forcedPause"-------\u000at = 0\u000aforcedPauseClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(30.000000)\u000a# update component parameters for each repeat\u000a# keep track of which components have finished\u000aforcedPauseComponents = []\u000aforcedPauseComponents.append(pauseText)\u000afor thisComponent in forcedPauseComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "forcedPause"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = forcedPauseClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *pauseText* updates\u000a    if t >= 0.0 and pauseText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        pauseText.tStart = t  # underestimates by a little under one frame\u000a        pauseText.frameNStart = frameN  # exact frame index\u000a        pauseText.setAutoDraw(True)\u000a    if pauseText.status == STARTED and t >= (0.0 + (30-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        pauseText.setAutoDraw(False)\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in forcedPauseComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "forcedPause"-------\u000afor thisComponent in forcedPauseComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a#------Prepare to start Routine "resumeExperiment"-------\u000at = 0\u000aresumeExperimentClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_5 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_5.status = NOT_STARTED\u000a# keep track of which components have finished\u000aresumeExperimentComponents = []\u000aresumeExperimentComponents.append(resumeText)\u000aresumeExperimentComponents.append(key_resp_5)\u000afor thisComponent in resumeExperimentComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "resumeExperiment"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = resumeExperimentClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *resumeText* updates\u000a    if t >= 0.0 and resumeText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        resumeText.tStart = t  # underestimates by a little under one frame\u000a        resumeText.frameNStart = frameN  # exact frame index\u000a        resumeText.setAutoDraw(True)\u000a    \u000a    # *key_resp_5* updates\u000a    if t >= 0.0 and key_resp_5.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_5.tStart = t  # underestimates by a little under one frame\u000a        key_resp_5.frameNStart = frameN  # exact frame index\u000a        key_resp_5.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_5.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_5.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space','return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_5.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_5.rt = key_resp_5.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in resumeExperimentComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "resumeExperiment"-------\u000afor thisComponent in resumeExperimentComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_5.keys in ['', [], None]:  # No response was made\u000a   key_resp_5.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_5.keys',key_resp_5.keys)\u000aif key_resp_5.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_5.rt', key_resp_5.rt)\u000athisExp.nextEntry()\u000a# the Routine "resumeExperiment" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials2 = data.TrialHandler(nReps=1, method='sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(pt2Conditions),\u000a    seed=None, name='trials2')\u000athisExp.addLoop(trials2)  # add the loop to the experiment\u000athisTrials2 = trials2.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrials2.rgb)\u000aif thisTrials2 != None:\u000a    for paramName in thisTrials2.keys():\u000a        exec(paramName + '= thisTrials2.' + paramName)\u000a\u000afor thisTrials2 in trials2:\u000a    currentLoop = trials2\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrials2.rgb)\u000a    if thisTrials2 != None:\u000a        for paramName in thisTrials2.keys():\u000a            exec(paramName + '= thisTrials2.' + paramName)\u000a    \u000a    #------Prepare to start Routine "mainTrial"-------\u000a    t = 0\u000a    mainTrialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    faceImg.setImage(img)\u000a    # setup some python lists for storing info about the mouseResp\u000a    mouseResp.x = []\u000a    mouseResp.y = []\u000a    mouseResp.leftButton = []\u000a    mouseResp.midButton = []\u000a    mouseResp.rightButton = []\u000a    mouseResp.time = []\u000a    # keep track of which components have finished\u000a    mainTrialComponents = []\u000a    mainTrialComponents.append(faceImg)\u000a    mainTrialComponents.append(mouseResp)\u000a    for thisComponent in mainTrialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "mainTrial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = mainTrialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *faceImg* updates\u000a        if t >= 0.0 and faceImg.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            faceImg.tStart = t  # underestimates by a little under one frame\u000a            faceImg.frameNStart = frameN  # exact frame index\u000a            faceImg.setAutoDraw(True)\u000a            \u000a        # *mouseResp* updates\u000a        if t >= 0.3 and mouseResp.status == NOT_STARTED: #############################################\u000a            # keep track of start time/frame for later\u000a            mouseResp.tStart = t  # underestimates by a little under one frame\u000a            mouseResp.frameNStart = frameN  # exact frame index\u000a            mouseResp.status = STARTED\u000a            event.mouseButtons = [0, 0, 0]  # reset mouse buttons to be 'up'\u000a        if mouseResp.status == STARTED:  # only update if started and not stopped!\u000a            buttons = mouseResp.getPressed()\u000a            if sum([buttons[0],buttons[-1]]) > 0:  # ie if any button is pressed\u000a                x, y = mouseResp.getPos()\u000a                mouseResp.x.append(x)\u000a                mouseResp.y.append(y)\u000a                mouseResp.leftButton.append(buttons[0])\u000a                mouseResp.midButton.append(buttons[1])\u000a                mouseResp.rightButton.append(buttons[2])\u000a                mouseResp.time.append(mainTrialClock.getTime())\u000a                \u000a                # add a counter\u000a                for morph in ['_00_','_01_','_02_','_03_','_04_','_05_','_06_','_07_','_08_','_09_','_10_']:\u000a                    if morph in img:\u000a                        try:\u000a                            countDict[morph] += 1\u000a                        except:\u000a                            countDict[morph] = 1\u000a                        if buttons[targetButton] == 1:\u000a                            try:\u000a                                hitsDict[morph]+=1\u000a                            except:\u000a                                hitsDict[morph]=1\u000a                    \u000a                # abort routine on response\u000a                continueRoutine = False\u000a        \u000a                # ADDED THE ESC COMMAND INTO THE LOOP, SO WE CAN QUIT ANYTIME\u000a                # check for quit (the Esc key)\u000a                if endExpNow or event.getKeys(keyList=["escape"]):\u000a                    core.quit()\u000a                    \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in mainTrialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "mainTrial"-------\u000a    for thisComponent in mainTrialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for trials2 (TrialHandler)\u000a    trials2.addData('mouseResp.x', mouseResp.x[0])\u000a    trials2.addData('mouseResp.y', mouseResp.y[0])\u000a    trials2.addData('mouseResp.leftButton', mouseResp.leftButton[0])\u000a    trials2.addData('mouseResp.midButton', mouseResp.midButton[0])\u000a    trials2.addData('mouseResp.rightButton', mouseResp.rightButton[0])\u000a    trials2.addData('mouseResp.time', mouseResp.time[0])\u000a    \u000a    # the Routine "mainTrial" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'trials2'\u000a\u000a\u000a#------Prepare to start Routine "endInstruct"-------\u000at = 0\u000aendInstructClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_6 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_6.status = NOT_STARTED\u000a# keep track of which components have finished\u000aendInstructComponents = []\u000aendInstructComponents.append(endText)\u000aendInstructComponents.append(key_resp_6)\u000afor thisComponent in endInstructComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "endInstruct"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = endInstructClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *endText* updates\u000a    if t >= 0.0 and endText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        endText.tStart = t  # underestimates by a little under one frame\u000a        endText.frameNStart = frameN  # exact frame index\u000a        endText.setAutoDraw(True)\u000a    \u000a    # *key_resp_6* updates\u000a    if t >= 0.0 and key_resp_6.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_6.tStart = t  # underestimates by a little under one frame\u000a        key_resp_6.frameNStart = frameN  # exact frame index\u000a        key_resp_6.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_6.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_6.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 'return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_6.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_6.rt = key_resp_6.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in endInstructComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "endInstruct"-------\u000afor thisComponent in endInstructComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a\u000a# Initialize components for Routine "analysisCheck"\u000aanalysisCheckClock = core.Clock()\u000aanalysisText = visual.TextStim(win=win, ori=0, name='analysisText',\u000a    text=str('00'+'\u005ct'+str(countDict['_00_'])+'\u005ct'+str(hitsDict['_00_'])+'\u005cn'+\u000a    '01'+'\u005ct'+str(countDict['_01_'])+'\u005ct'+str(hitsDict['_01_'])+'\u005cn'+\u000a    '02'+'\u005ct'+str(countDict['_02_'])+'\u005ct'+str(hitsDict['_02_'])+'\u005cn'+\u000a    '03'+'\u005ct'+str(countDict['_03_'])+'\u005ct'+str(hitsDict['_03_'])+'\u005cn'+\u000a    '04'+'\u005ct'+str(countDict['_04_'])+'\u005ct'+str(hitsDict['_04_'])+'\u005cn'+\u000a    '05'+'\u005ct'+str(countDict['_05_'])+'\u005ct'+str(hitsDict['_05_'])+'\u005cn'+\u000a    '06'+'\u005ct'+str(countDict['_06_'])+'\u005ct'+str(hitsDict['_06_'])+'\u005cn'+\u000a    '07'+'\u005ct'+str(countDict['_07_'])+'\u005ct'+str(hitsDict['_07_'])+'\u005cn'+\u000a    '08'+'\u005ct'+str(countDict['_08_'])+'\u005ct'+str(hitsDict['_08_'])+'\u005cn'+\u000a    '09'+'\u005ct'+str(countDict['_09_'])+'\u005ct'+str(hitsDict['_09_'])+'\u005cn'+\u000a    '10'+'\u005ct'+str(countDict['_10_'])+'\u005ct'+str(hitsDict['_10_'])), font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a#------Prepare to start Routine "analysisCheck"-------\u000at = 0\u000aanalysisCheckClock.reset()  # clock\u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_7 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_7.status = NOT_STARTED\u000a# keep track of which components have finished\u000aanalysisCheckComponents = []\u000aanalysisCheckComponents.append(analysisText)\u000aanalysisCheckComponents.append(key_resp_7)\u000afor thisComponent in analysisCheckComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "analysisCheck"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = analysisCheckClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a\u000a    # *analysisText* updates\u000a    if t >= 0.0 and analysisText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        analysisText.tStart = t  # underestimates by a little under one frame\u000a        analysisText.frameNStart = frameN  # exact frame index\u000a        analysisText.setAutoDraw(True)\u000a\u000a    # *key_resp_7* updates\u000a    if t >= 0.0 and key_resp_7.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_7.tStart = t  # underestimates by a little under one frame\u000a        key_resp_7.frameNStart = frameN  # exact frame index\u000a        key_resp_7.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_7.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_7.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space','return'])\u000a\u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_7.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_7.rt = key_resp_7.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a\u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in analysisCheckComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "analysisCheck"-------\u000afor thisComponent in analysisCheckComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_7.keys in ['', [], None]:  # No response was made\u000a   key_resp_7.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_7.keys',key_resp_7.keys)\u000aif key_resp_7.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_7.rt', key_resp_7.rt)\u000athisExp.nextEntry()\u000a# the Routine "analysisCheck" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000awin.close()\u000acore.quit()
p2788
sS'thisTrial'
p2789
(lp2790
sS'_exp'
p2791
I140635783337424
sg10
S'basicLoop'
p2792
sg6
S'/home/labor/faces/emoFaces.py'
p2793
sS'thisRepN'
p2794
I1
sg34
I01
sg35
g36
sS'data'
p2795
g1
(cpsychopy.data
DataHandler
p2796
c__builtin__
dict
p2797
(dp2798
g16
cnumpy.core.multiarray
_reconstruct
p2799
(cnumpy
ndarray
p2800
(I0
tS'b'
tRp2801
(I1
(I84
I1
tg44
(S'O8'
I0
I1
tRp2802
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp2803
NaNaNag194
aNaNaNaNaNaNag194
aNaNaNaNaNaNag194
ag181
ag194
aNaNaNaNaNaNaNag181
aNaNaNag194
ag181
aNaNaNaNaNag194
aNaNaNaNaNaNag194
aNaNaNaNaNaNag194
aNaNaNaNag181
aNag194
aNaNaNaNaNaNag194
aNaNaNaNaNaNag194
aNag194
aNaNaNaNag194
aNaNaNatbsg18
g2799
(g2800
(I0
tS'b'
tRp2804
(I1
(I84
I1
tg2802
I00
(lp2805
g62
aNag62
aNaNaNaNaNaNag62
aNaNaNaNag62
aNaNaNaNaNaNaNaNag120
aNag62
aNaNag62
aNaNaNaNag62
aNag62
aNaNaNag62
ag120
aNag120
aNaNaNaNaNag62
ag62
aNaNaNag62
ag62
aNag62
aNaNaNaNaNaNaNaNag62
aNaNaNaNaNaNaNaNag62
aNaNaNaNaNaNaNaNaNatbsg21
g2799
(g2800
(I0
tS'b'
tRp2806
(I1
(I84
I1
tg2802
I00
(lp2807
NaF1.46
aNaNaF5.532
aF3.5219999999999998
aF3.3199999999999998
aF4.375
aF2.903
aNaNaNaF5.8250000000000002
aF2.7200000000000002
aNaF2.7839999999999998
aF4.4640000000000004
aNaNaNaF1.4630000000000001
aF5.1740000000000004
aF1.8919999999999999
aNaF4.766
aNaF1.4419999999999999
aNaNaF1.2470000000000001
aF10.292999999999999
aNaNaNaNaNaF1.9279999999999999
aF3.9569999999999999
aNaNaNaF7.8780000000000001
aNaF2.3450000000000002
aF3.4359999999999999
aNaNaF2.653
aNaNaF2.2789999999999999
aF4.2080000000000002
aNaNaNaNaNaNaF17.053999999999998
aNaF8.0960000000000001
aF4.1109999999999998
aNaF3.335
aF2.0939999999999999
aNaNaNaF3.7570000000000001
aNaF7.8319999999999999
aF1.925
aF2.532
aNaNaNaF4.2910000000000004
aNaF1.3069999999999999
aNaNaF13.526999999999999
aF5.2329999999999997
aNatbsS'ran'
p2808
cnumpy.ma.core
_mareconstruct
p2809
(cnumpy.ma.core
MaskedArray
p2810
g2800
(I0
tp2811
S'b'
tRp2812
(I1
(I84
I1
tg44
(S'f4'
I0
I1
tRp2813
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg17
g2799
(g2800
(I0
tS'b'
tRp2814
(I1
(I84
I1
tg2802
I00
(lp2815
NaNaNaF1.413
aNaNaNaNaNaNaF3.5089999999999999
aNaNaNaNaNaNaF1.7330000000000001
aF4.1849999999999996
aF2.8210000000000002
aNaNaNaNaNaNaNaF4.7199999999999998
aNaNaNaF3.1120000000000001
aF5.2320000000000002
aNaNaNaNaNaF3.157
aNaNaNaNaNaNaF1.6339999999999999
aNaNaNaNaNaNaF3.1930000000000001
aNaNaNaNaF4.9820000000000002
aNaF1.9810000000000001
aNaNaNaNaNaNaF1.28
aNaNaNaNaNaNaF1.448
aNaF3.677
aNaNaNaNaF1.671
aNaNaNatbsg23
g2799
(g2800
(I0
tS'b'
tRp2816
(I1
(I84
I1
tg2802
I00
(lp2817
NaNaNaNaNaNaNaNaNaNaNaF4.1749999999999998
aNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaF5.8570000000000002
aNaNaNaNaNaNaNaNaNaNaNaF7.5819999999999999
aNaNaNaNaNaNaNaNaF4.3410000000000002
aNaNaNaNaNaNaF9.1359999999999992
aNaNaNaNaF3.625
aNaF8.7330000000000005
aNaNaNaNaNaNaNaF6.4009999999999998
aNaF5.9169999999999998
aNaNaNaF4.5140000000000002
atbsg22
g2799
(g2800
(I0
tS'b'
tRp2818
(I1
(I84
I1
tg2802
I00
(lp2819
NaNaNaNaNaNaNaNaNaNaNag96
aNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNag96
aNaNaNaNaNaNaNaNaNaNaNag96
aNaNaNaNaNaNaNaNag96
aNaNaNaNaNaNag96
aNaNaNaNag96
aNag96
aNaNaNaNaNaNaNag96
aNag96
aNaNaNag96
atbsg19
g2799
(g2800
(I0
tS'b'
tRp2820
(I1
(I84
I1
tg2802
I00
(lp2821
F3.04
aNaF4.202
aNaNaNaNaNaNaF3.8559999999999999
aNaNaNaNaF2.9380000000000002
aNaNaNaNaNaNaNaNaF1.8700000000000001
aNaF3.1549999999999998
aNaNaF3.2050000000000001
aNaNaNaNaF7.1580000000000004
aNaF2.988
aNaNaNaF1.9790000000000001
aF8.3970000000000002
aNaF6.6449999999999996
aNaNaNaNaNaF3.4239999999999999
aF3.0059999999999998
aNaNaNaF4.3419999999999996
aS'15'
p2822
aNaF2.4199999999999999
aNaNaNaNaNaNaNaNaF2.532
aNaNaNaNaNaNaNaNaF2.4369999999999998
aNaNaNaNaNaNaNaNaNatbsg20
g2799
(g2800
(I0
tS'b'
tRp2823
(I1
(I84
I1
tg2802
I00
(lp2824
Nag79
aNaNag72
ag72
ag72
ag72
ag79
aNaNaNag72
ag72
aNag79
ag79
aNaNaNag72
ag79
ag79
aNag72
aNag72
aNaNag79
ag79
aNaNaNaNaNag79
ag79
aNaNaNag72
aNag79
ag72
aNaNag72
aNaNag79
ag72
aNaNaNaNaNaNag72
aNag79
ag72
aNag79
ag79
aNaNaNag72
aNag79
ag79
ag72
aNaNaNag72
aNag79
aNaNag72
ag72
aNatbsS'order'
p2825
g2809
(g2810
g2800
g2811
S'b'
tRp2826
(I1
(I84
I1
tg2813
I00
S'\x00\x00\x0cB\x00\x00\x8aB\x00\x00\\B\x00\x00(B\x00\x00pA\x00\x00\x80A\x00\x00lB\x00\x00\x00A\x00\x00,B\x00\x00\x10B\x00\x00\xa8A\x00\x00\x92B\x00\x00\xa0A\x00\x008B\x00\x00\xb8A\x00\x00PA\x00\x00@B\x00\x00XB\x00\x00\x98A\x00\x00\x18B\x00\x00\xa2B\x00\x00\x90A\x00\x00\x82B\x00\x00HB\x00\x00\x08B\x00\x00TB\x00\x00\xa4B\x00\x00\x94B\x00\x00pB\x00\x00\xa0B\x00\x00\x80@\x00\x00\xb0A\x00\x00 B\x00\x00\x04B\x00\x00\x90B\x00\x00LB\x00\x00\x88B\x00\x00\x9eB\x00\x00\xf8A\x00\x00\x8eB\x00\x00\x10A\x00\x00$B\x00\x00@A\x00\x00\xe8A\x00\x00\x14B\x00\x00\x8cB\x00\x00tB\x00\x00\x86B\x00\x00\x84B\x00\x00\xc8A\x00\x00\x96B\x00\x00\xa6B\x00\x00\xf0A\x00\x00\x88A\x00\x00\x00\x00\x00\x00 A\x00\x00\x98B\x00\x00\xd8A\x00\x00@@\x00\x00\x80B\x00\x00\xc0@\x00\x00\x00B\x00\x000A\x00\x00DB\x00\x00hB\x00\x00\x9cB\x00\x00`B\x00\x00<B\x00\x00\x1cB\x00\x00\xa0@\x00\x00\x00@\x00\x00dB\x00\x00PB\x00\x00\x9aB\x00\x000B\x00\x004B\x00\x00|B\x00\x00\xe0@\x00\x00xB\x00\x00\xe0A\x00\x00\xd0A\x00\x00\x80?\x00\x00`A\x00\x00\xc0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp2827
(dp2828
S'isNumeric'
p2829
(dp2830
g16
I00
sg18
I00
sg21
I00
sg2808
I01
sg17
I00
sg23
I00
sg22
I00
sg19
I00
sg20
I00
sg2825
I01
ssS'trials'
p2831
g2785
sS'dataTypes'
p2832
(lp2833
g2808
ag2825
ag16
ag17
ag18
ag19
ag20
ag21
ag22
ag23
asS'dataShape'
p2834
(lp2835
I84
aI1
asbsS'method'
p2836
S'fullRandom'
p2837
sS'sequenceIndices'
p2838
g2799
(g2800
(I0
tS'b'
tRp2839
(I1
(I84
I1
tg2802
I00
(lp2840
I54
aI81
aI70
aI58
aI30
aI69
aI60
aI77
aI7
aI40
aI55
aI62
aI42
aI15
aI82
aI4
aI5
aI53
aI21
aI18
aI12
aI10
aI31
aI14
aI83
aI49
aI80
aI57
aI79
aI43
aI52
aI38
aI61
aI33
aI24
aI0
aI9
aI44
aI19
aI68
aI32
aI41
aI3
aI8
aI74
aI75
aI13
aI67
aI16
aI63
aI23
aI35
aI72
aI25
aI17
aI2
aI66
aI71
aI64
aI6
aI28
aI46
aI78
aI76
aI59
aI22
aI48
aI47
aI36
aI1
aI45
aI39
aI34
aI11
aI27
aI50
aI56
aI73
aI65
aI37
aI29
aI20
aI26
aI51
atbsS'finished'
p2841
I01
sS'nReps'
p2842
I1
sS'nRemaining'
p2843
I-1
sS'trialList'
p2844
(lp2845
g1
(cpsychopy.data
TrialType
p2846
g2797
(dp2847
g55
g279
stRp2848
ag1
(g2846
g2797
(dp2849
g55
g483
stRp2850
ag1
(g2846
g2797
(dp2851
g55
g399
stRp2852
ag1
(g2846
g2797
(dp2853
g55
g321
stRp2854
ag1
(g2846
g2797
(dp2855
g55
g157
stRp2856
ag1
(g2846
g2797
(dp2857
g55
g163
stRp2858
ag1
(g2846
g2797
(dp2859
g55
g423
stRp2860
ag1
(g2846
g2797
(dp2861
g55
g114
stRp2862
ag1
(g2846
g2797
(dp2863
g55
g327
stRp2864
ag1
(g2846
g2797
(dp2865
g55
g285
stRp2866
ag1
(g2846
g2797
(dp2867
g55
g195
stRp2868
ag1
(g2846
g2797
(dp2869
g55
g507
stRp2870
ag1
(g2846
g2797
(dp2871
g55
g188
stRp2872
ag1
(g2846
g2797
(dp2873
g55
g345
stRp2874
ag1
(g2846
g2797
(dp2875
g55
g207
stRp2876
ag1
(g2846
g2797
(dp2877
g55
g145
stRp2878
ag1
(g2846
g2797
(dp2879
g55
g357
stRp2880
ag1
(g2846
g2797
(dp2881
g55
g393
stRp2882
ag1
(g2846
g2797
(dp2883
g55
g182
stRp2884
ag1
(g2846
g2797
(dp2885
g55
g297
stRp2886
ag1
(g2846
g2797
(dp2887
g55
g555
stRp2888
ag1
(g2846
g2797
(dp2889
g55
g175
stRp2890
ag1
(g2846
g2797
(dp2891
g55
g459
stRp2892
ag1
(g2846
g2797
(dp2893
g55
g369
stRp2894
ag1
(g2846
g2797
(dp2895
g55
g273
stRp2896
ag1
(g2846
g2797
(dp2897
g55
g387
stRp2898
ag1
(g2846
g2797
(dp2899
g55
g561
stRp2900
ag1
(g2846
g2797
(dp2901
g55
g513
stRp2902
ag1
(g2846
g2797
(dp2903
g55
g429
stRp2904
ag1
(g2846
g2797
(dp2905
g55
g549
stRp2906
ag1
(g2846
g2797
(dp2907
g55
g89
stRp2908
ag1
(g2846
g2797
(dp2909
g55
g201
stRp2910
ag1
(g2846
g2797
(dp2911
g55
g309
stRp2912
ag1
(g2846
g2797
(dp2913
g55
g267
stRp2914
ag1
(g2846
g2797
(dp2915
g55
g501
stRp2916
ag1
(g2846
g2797
(dp2917
g55
g375
stRp2918
ag1
(g2846
g2797
(dp2919
g55
g477
stRp2920
ag1
(g2846
g2797
(dp2921
g55
g543
stRp2922
ag1
(g2846
g2797
(dp2923
g55
g255
stRp2924
ag1
(g2846
g2797
(dp2925
g55
g495
stRp2926
ag1
(g2846
g2797
(dp2927
g55
g121
stRp2928
ag1
(g2846
g2797
(dp2929
g55
g315
stRp2930
ag1
(g2846
g2797
(dp2931
g55
g139
stRp2932
ag1
(g2846
g2797
(dp2933
g55
g243
stRp2934
ag1
(g2846
g2797
(dp2935
g55
g291
stRp2936
ag1
(g2846
g2797
(dp2937
g55
g489
stRp2938
ag1
(g2846
g2797
(dp2939
g55
g435
stRp2940
ag1
(g2846
g2797
(dp2941
g55
g471
stRp2942
ag1
(g2846
g2797
(dp2943
g55
g465
stRp2944
ag1
(g2846
g2797
(dp2945
g55
g219
stRp2946
ag1
(g2846
g2797
(dp2947
g55
g519
stRp2948
ag1
(g2846
g2797
(dp2949
g55
g567
stRp2950
ag1
(g2846
g2797
(dp2951
g55
g249
stRp2952
ag1
(g2846
g2797
(dp2953
g55
g169
stRp2954
ag1
(g2846
g2797
(dp2955
g55
g63
stRp2956
ag1
(g2846
g2797
(dp2957
g55
g127
stRp2958
ag1
(g2846
g2797
(dp2959
g55
g525
stRp2960
ag1
(g2846
g2797
(dp2961
g55
g231
stRp2962
ag1
(g2846
g2797
(dp2963
g55
g83
stRp2964
ag1
(g2846
g2797
(dp2965
g55
g453
stRp2966
ag1
(g2846
g2797
(dp2967
g55
g102
stRp2968
ag1
(g2846
g2797
(dp2969
g55
g261
stRp2970
ag1
(g2846
g2797
(dp2971
g55
g133
stRp2972
ag1
(g2846
g2797
(dp2973
g55
g363
stRp2974
ag1
(g2846
g2797
(dp2975
g55
g417
stRp2976
ag1
(g2846
g2797
(dp2977
g55
g537
stRp2978
ag1
(g2846
g2797
(dp2979
g55
g405
stRp2980
ag1
(g2846
g2797
(dp2981
g55
g351
stRp2982
ag1
(g2846
g2797
(dp2983
g55
g303
stRp2984
ag1
(g2846
g2797
(dp2985
g55
g95
stRp2986
ag1
(g2846
g2797
(dp2987
g55
g76
stRp2988
ag1
(g2846
g2797
(dp2989
g55
g411
stRp2990
ag1
(g2846
g2797
(dp2991
g55
g381
stRp2992
ag1
(g2846
g2797
(dp2993
g55
g531
stRp2994
ag1
(g2846
g2797
(dp2995
g55
g333
stRp2996
ag1
(g2846
g2797
(dp2997
g55
g339
stRp2998
ag1
(g2846
g2797
(dp2999
g55
g447
stRp3000
ag1
(g2846
g2797
(dp3001
g55
g108
stRp3002
ag1
(g2846
g2797
(dp3003
g55
g441
stRp3004
ag1
(g2846
g2797
(dp3005
g55
g237
stRp3006
ag1
(g2846
g2797
(dp3007
g55
g225
stRp3008
ag1
(g2846
g2797
(dp3009
g55
g69
stRp3010
ag1
(g2846
g2797
(dp3011
g55
g151
stRp3012
ag1
(g2846
g2797
(dp3013
g55
g213
stRp3014
asS'seed'
p3015
NsS'thisIndex'
p3016
I51
sS'thisN'
p3017
I84
sS'thisTrialN'
p3018
I0
sS'nTotal'
p3019
I84
sS'_warnUseOfNext'
p3020
I01
sbag1
(g2784
g3
NtRp3021
(dp3022
g2787
V\u000a\u000a\u000a\u000a\u000a#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a"""\u000a ________    _______    ___       __           ________  ________   ________   _______    ________      \u000a|\u005c   ___  \u005c |\u005c  ___ \u005c  |\u005c  \u005c     |\u005c  \u005c        |\u005c  _____\u005c|\u005c   __  \u005c |\u005c   ____\u005c |\u005c  ___ \u005c  |\u005c   ____\u005c     \u000a\u005c \u005c  \u005c\u005c \u005c  \u005c\u005c \u005c   __/| \u005c \u005c  \u005c    \u005c \u005c  \u005c       \u005c \u005c  \u005c__/ \u005c \u005c  \u005c|\u005c  \u005c\u005c \u005c  \u005c___| \u005c \u005c   __/| \u005c \u005c  \u005c___|_    \u000a \u005c \u005c  \u005c\u005c \u005c  \u005c\u005c \u005c  \u005c_|/__\u005c \u005c  \u005c  __\u005c \u005c  \u005c       \u005c \u005c   __\u005c \u005c \u005c   __  \u005c\u005c \u005c  \u005c     \u005c \u005c  \u005c_|/__\u005c \u005c_____  \u005c   \u000a  \u005c \u005c  \u005c\u005c \u005c  \u005c\u005c \u005c  \u005c_|\u005c \u005c\u005c \u005c  \u005c|\u005c__\u005c_\u005c  \u005c       \u005c \u005c  \u005c_|  \u005c \u005c  \u005c \u005c  \u005c\u005c \u005c  \u005c____ \u005c \u005c  \u005c_|\u005c \u005c\u005c|____|\u005c  \u005c  \u000a   \u005c \u005c__\u005c\u005c \u005c__\u005c\u005c \u005c_______\u005c\u005c \u005c____________\u005c       \u005c \u005c__\u005c    \u005c \u005c__\u005c \u005c__\u005c\u005c \u005c_______\u005c\u005c \u005c_______\u005c ____\u005c_\u005c  \u005c \u000a    \u005c|__| \u005c|__| \u005c|_______| \u005c|____________|        \u005c|__|     \u005c|__|\u005c|__| \u005c|_______| \u005c|_______||\u005c_________\u005c\u000a                                                                                            \u005c|_________|\u000a"""\u000a\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'facesParametric'  # from the Builder filename that created this script\u000aexpInfo = {u'participant': u'', u'group': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Check whether the chosen participant number is valid\u000amyDlg = gui.Dlg(title="FEHLER")\u000amyDlg.addText(u'Vp-Nnummer zwischen 1 und 100 eingeben')\u000aassert len(str(expInfo['participant'])) > 0, myDlg.show()\u000atry:\u000a    assert int(expInfo['participant']) in range(1,101), myDlg.show()\u000aexcept:\u000a    myDlg.show()\u000a\u000a# Check whether a group membership has been defined\u000amyDlg = gui.Dlg(title="FEHLER")\u000amyDlg.addText(u'Gruppenzugehoerigkeit angeben')\u000aassert len(str(expInfo['group'])) > 0, myDlg.show()\u000a\u000a# Here, we check if the number of the current participant\u000a# is odd or even, and we swap the button order accordingly\u000a# (this also affects the result computation, so the 'angry'\u000a# button is different for the two versions)\u000a\u000aif int(expInfo['participant'])%2 == 1:\u000a    # odd participant numbers have buttons assigned fear-anger\u000a    mainInstructText = u'Im nachfolgenden Experiment werden Sie nacheinander einzelne Gesichter sehen.\u005cnSie m\u005cxfcssen jeweils entscheiden, ob das gezeigt Gesicht einen\u005cn\u005cxc4NGSTLICHEN oder \u005cxc4RGERLICHEN Ausdruck hat.\u005cn\u005cnEntscheiden Sie sich bei jedem gezeigten Gesicht f\u005cxfcr einen der beiden m\u005cxf6glichen Emotionsausdr\u005cxfccke.'\u000a    buttonInstructText = u'Dr\u005cxfccken Sie die LINKE Maustaste,\u005cnwenn das Gesicht eher \u005cxc4NGSTLICH ist.\u005cn\u005cnDr\u005cxfccken Sie die RECHTE Maustaste,\u005cnwenn das Gesicht eher \u005cxc4RGERLICH ist.'\u000a    # angry judgement on right mouse button\u000a    targetButton = 2\u000aelse:\u000a    # even participant numbers have button assigments anger-fear\u000a    mainInstructText = u'Im nachfolgenden Experiment werden Sie nacheinander einzelne Gesichter sehen.\u005cnSie m\u005cxfcssen jeweils entscheiden, ob das gezeigt Gesicht einen\u005cn \u005cxc4RGERLICHEN oder \u005cxc4NGSTLICHEN Ausdruck hat.\u005cn\u005cnEntscheiden Sie sich bei jedem gezeigten Gesicht f\u005cxfcr einen der beiden m\u005cxf6glichen Emotionsausdr\u005cxfccke.'\u000a    buttonInstructText = u'Dr\u005cxfccken Sie die LINKE Maustaste,\u005cnwenn das Gesicht eher \u005cxc4RGERLICH ist.\u005cn\u005cnDr\u005cxfccken Sie die RECHTE Maustaste,\u005cnwenn das Gesicht eher \u005cxc4NGSTLICH ist.'\u000a    # angry judgement on left mouse button\u000a    targetButton = 0\u000a\u000a# from the number defined in the prompt window, we derive\u000a# which array files (pt1 & pt2) should be fetched for the\u000a# current participant (this works for number from 1 to 999,\u000a# but of course the array file must also exist!)\u000a\u000athisParticipant = 'arrays/p'+ ('00' + str(expInfo['participant']))[-3:]\u000apt1Conditions = thisParticipant +'pt1.csv'\u000apt2Conditions = thisParticipant +'pt2.csv'\u000a\u000acountDict = {}\u000ahitsDict = {}\u000a\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + 'data/%s_%s_%s_%s' %(expInfo['group'],expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=[1600, 900], fullscr=True, screen=0, allowGUI=True, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    units='cm')\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "mainInstruct"\u000amainInstructClock = core.Clock()\u000amainText = visual.TextStim(win=win, ori=0, name='mainText',\u000a    text=mainInstructText,    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "buttonInstruct"\u000abuttonInstructClock = core.Clock()\u000abuttonText = visual.TextStim(win=win, ori=0, name='buttonText',\u000a    text=buttonInstructText,    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "startScreen"\u000astartScreenClock = core.Clock()\u000astartText = visual.TextStim(win=win, ori=0, name='startText',\u000a    text=u'Falls Sie noch Fragen haben,\u005cnwenden Sie sich bitte an die Versuchsleiterin.\u005cn\u005cnWeiter mit ENTER.',    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "mainTrial"\u000amainTrialClock = core.Clock()\u000afaceImg = visual.ImageStim(win=win, name='faceImg',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=[10.12,13.72],\u000a    color=[1,1,1], colorSpace='rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=True, depth=0.0)\u000amouseResp = event.Mouse(win=win,visible=False)\u000ax, y = [None, None]\u000a\u000a# Initialize components for Routine "forcedPause"\u000aforcedPauseClock = core.Clock()\u000apauseText = visual.TextStim(win=win, ori=0, name='pauseText',\u000a    text=u'Zeit f\u005cxfcr eine kurze Pause.',    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "resumeExperiment"\u000aresumeExperimentClock = core.Clock()\u000aresumeText = visual.TextStim(win=win, ori=0, name='resumeText',\u000a    text='Weiter mit ENTER.',    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "mainTrial"\u000amainTrialClock = core.Clock()\u000afaceImg = visual.ImageStim(win=win, name='faceImg',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=[10.12,13.72],\u000a    color=[1,1,1], colorSpace='rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=True, depth=0.0)\u000amouseResp = event.Mouse(win=win,visible=False)\u000ax, y = [None, None]\u000a\u000a# Initialize components for Routine "endInstruct"\u000aendInstructClock = core.Clock()\u000aendText = visual.TextStim(win=win, ori=0, name='endText',\u000a    text=u'Dieser Teil des Experiments ist nun zu Ende.\u005cnVielen Dank!\u005cn\u005cnWenden Sie sich bitte an die Versuchsleiterin.',    font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a\u000a\u000a################################ BASIC EMOZ ##\u000a\u000a\u000a# Initialize components for Routine "basicInstruct"\u000abasicInstructClock = core.Clock()\u000atext = visual.TextStim(win=win, ori=0, name='text',\u000a    text=u"Im nachfolgenden Experiment werden Sie nacheinander einzelne Gesichter sehen.\u005cn\u005cnSie m\u005cxfcssen jeweils entscheiden, welchen Ausdruck das gezeigte Gesicht hat.\u005cn\u005cnZur Auswahl stehen Ihnen hierbei die folgenden M\u005cxf6glichkeiten:\u005cnFreude\u005cnAngst\u005cn\u005cxc4rger\u005cnTrauer\u005cnEkel\u005cn\u005cxdcberraschung\u005cnNeutral\u005cn\u005cnEntscheiden Sie sich bei jedem gezeigten Gesicht f\u005cxfcr einen der \u005cnm\u005cxf6glichen Gesichtsausdr\u005cxfccke.",    font='Arial',\u000a    pos=[0, 0], height=0.8, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "basicTrial"\u000abasicTrialClock = core.Clock()\u000abasicImage = visual.ImageStim(win=win, name='basicImage',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 3], size=[10.12,13.72],\u000a    color=[1,1,1], colorSpace='rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=True, depth=0.0)\u000a\u000abasicRating1 = visual.RatingScale(win=win, name='basicRating1', marker=u'hover', size=0.6, pos=[0.0, -0.5], choices=[u'Freude', u'Trauer'], tickHeight=-1, disappear=True)\u000abasicRating2 = visual.RatingScale(win=win, name='basicRating2', marker=u'hover', size=0.6, pos=[0.0, -0.6], choices=[u'Angst', u'\u005cxc4rger'], tickHeight=-1, singleClick=True, disappear=True)\u000abasicRating3 = visual.RatingScale(win=win, name='basicRating3', marker=u'hover', size=0.6, pos=[0.0, -0.7], choices=[u'Ekel', u'\u005cxdcberraschung'], tickHeight=-1, singleClick=True, disappear=True)\u000abasicRating4 = visual.RatingScale(win=win, name='basicRating4', marker=u'hover', size=0.6, pos=[0.0, -0.8], choices=[u' ',u'Neutral', u' '], tickHeight=-1, singleClick=True, disappear=True)\u000a\u000a# Initialize components for Routine "basicWait"\u000abasicWaitClock = core.Clock()\u000aISI = core.StaticPeriod(win=win, screenHz=expInfo['frameRate'], name='ISI')\u000a\u000a# Initialize components for Routine "basicEnd"\u000abasicEndClock = core.Clock()\u000atext_2 = visual.TextStim(win=win, ori=0, name='text_2',\u000a    text=u'Danke. Das war der erste Teil.\u005cnDr\u005cxfccken Sie ENTER um zum n\u005cxe4chsten Teil zu kommen',    font=u'Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a    \u000a    \u000a    \u000a    \u000a###############################################################################\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a\u000a\u000a\u000a#############################################\u000a\u000a\u000a\u000a#------Prepare to start Routine "basicInstruct"-------\u000at = 0\u000abasicInstructClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000abasicInstructComponents = []\u000abasicInstructComponents.append(text)\u000abasicInstructComponents.append(key_resp_2)\u000afor thisComponent in basicInstructComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "basicInstruct"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = basicInstructClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text* updates\u000a    if t >= 0.0 and text.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text.tStart = t  # underestimates by a little under one frame\u000a        text.frameNStart = frameN  # exact frame index\u000a        text.setAutoDraw(True)\u000a    \u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_2.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space','return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_2.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_2.rt = key_resp_2.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in basicInstructComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "basicInstruct"-------\u000afor thisComponent in basicInstructComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_2.keys in ['', [], None]:  # No response was made\u000a   key_resp_2.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_2.keys',key_resp_2.keys)\u000aif key_resp_2.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_2.rt', key_resp_2.rt)\u000athisExp.nextEntry()\u000a# the Routine "basicInstruct" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abasicLoop = data.TrialHandler(nReps=1, method='fullRandom', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions('./arrays/imgList.csv'),\u000a    seed=None, name='basicLoop')\u000athisExp.addLoop(basicLoop)  # add the loop to the experiment\u000athisBasicLoop = basicLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBasicLoop.rgb)\u000aif thisBasicLoop != None:\u000a    for paramName in thisBasicLoop.keys():\u000a        exec(paramName + '= thisBasicLoop.' + paramName)\u000a\u000afor thisBasicLoop in basicLoop:\u000a    currentLoop = basicLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBasicLoop.rgb)\u000a    if thisBasicLoop != None:\u000a        for paramName in thisBasicLoop.keys():\u000a            exec(paramName + '= thisBasicLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "basicTrial"-------\u000a    \u000a    \u000a    ###########\u000a    # resetting the rating scales each time, so that the last response isnt visible\u000a    \u000a    basicRating1 = visual.RatingScale(win=win, name='basicRating1', marker=u'hover', size=0.6, pos=[0.0, -0.5], choices=[u'Freude', u'Trauer'], tickHeight=-1, disappear=True)\u000a    basicRating2 = visual.RatingScale(win=win, name='basicRating2', marker=u'hover', size=0.6, pos=[0.0, -0.6], choices=[u'Angst', u'\u005cxc4rger'], tickHeight=-1, singleClick=True, disappear=True)\u000a    basicRating3 = visual.RatingScale(win=win, name='basicRating3', marker=u'hover', size=0.6, pos=[0.0, -0.7], choices=[u'Ekel', u'\u005cxdcberraschung'], tickHeight=-1, singleClick=True, disappear=True)\u000a    basicRating4 = visual.RatingScale(win=win, name='basicRating4', marker=u'hover', size=0.6, pos=[0.0, -0.8], choices=[u' ',u'Neutral', u' '], tickHeight=-1, singleClick=True, disappear=True)\u000a\u000a    ###########\u000a    \u000a    t = 0\u000a    basicTrialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    basicImage.setImage(img)\u000a    basicRating1.reset()\u000a    basicRating2.reset()\u000a    basicRating3.reset()\u000a    basicRating4.reset()\u000a    # keep track of which components have finished\u000a    basicTrialComponents = []\u000a    basicTrialComponents.append(basicImage)\u000a    basicTrialComponents.append(basicRating1)\u000a    basicTrialComponents.append(basicRating2)\u000a    basicTrialComponents.append(basicRating3)\u000a    basicTrialComponents.append(basicRating4)\u000a    for thisComponent in basicTrialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    # ugly hack: the labels need to be renamed as the "umlaute" cannot be saved to csv \u000a    basicRating1.choices = ['HAP', 'SAD']\u000a    basicRating2.choices = ['FEA', 'ANG']\u000a    basicRating3.choices = ['DIS', 'SUP']\u000a    basicRating4.choices = ['dummy','NTR', 'dummy']\u000a    #-------Start Routine "basicTrial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = basicTrialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *basicImage* updates\u000a        if t >= 0 and basicImage.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            basicImage.tStart = t  # underestimates by a little under one frame\u000a            basicImage.frameNStart = frameN  # exact frame index\u000a            basicImage.setAutoDraw(True)\u000a        if basicImage.status == STARTED and t >= (0 + (4.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            basicImage.setAutoDraw(False)\u000a        # *basicRating1* updates\u000a        if t >= 0.5 and basicRating1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            basicRating1.tStart = t  # underestimates by a little under one frame\u000a            basicRating1.frameNStart = frameN  # exact frame index\u000a            basicRating1.setAutoDraw(True)\u000a        continueRoutine &= basicRating1.noResponse  # a response ends the trial\u000a        # *basicRating2* updates\u000a        if t >= 0.5 and basicRating2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            basicRating2.tStart = t  # underestimates by a little under one frame\u000a            basicRating2.frameNStart = frameN  # exact frame index\u000a            basicRating2.setAutoDraw(True)\u000a        continueRoutine &= basicRating2.noResponse  # a response ends the trial\u000a        # *basicRating3* updates\u000a        if t >= 0.5 and basicRating3.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            basicRating3.tStart = t  # underestimates by a little under one frame\u000a            basicRating3.frameNStart = frameN  # exact frame index\u000a            basicRating3.setAutoDraw(True)\u000a        continueRoutine &= basicRating3.noResponse  # a response ends the trial\u000a        # *basicRating4* updates\u000a        if t >= 0.5 and basicRating4.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            basicRating4.tStart = t  # underestimates by a little under one frame\u000a            basicRating4.frameNStart = frameN  # exact frame index\u000a            basicRating4.setAutoDraw(True)\u000a        continueRoutine &= basicRating4.noResponse  # a response ends the trial\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in basicTrialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "basicTrial"-------\u000a    for thisComponent in basicTrialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for basicLoop (TrialHandler)\u000a    basicLoop.addData('basicRating1.response', basicRating1.getRating())\u000a    basicLoop.addData('basicRating1.rt', basicRating1.getRT())\u000a    # store data for basicLoop (TrialHandler)\u000a    basicLoop.addData('basicRating2.response', basicRating2.getRating())\u000a    basicLoop.addData('basicRating2.rt', basicRating2.getRT())\u000a    # store data for basicLoop (TrialHandler)\u000a    basicLoop.addData('basicRating3.response', basicRating3.getRating())\u000a    basicLoop.addData('basicRating3.rt', basicRating3.getRT())\u000a    # store data for basicLoop (TrialHandler)\u000a    basicLoop.addData('basicRating4.response', basicRating4.getRating())\u000a    basicLoop.addData('basicRating4.rt', basicRating4.getRT())\u000a    # the Routine "basicTrial" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    \u000a    #------Prepare to start Routine "basicWait"-------\u000a    t = 0\u000a    basicWaitClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(0.500000)\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    basicWaitComponents = []\u000a    basicWaitComponents.append(ISI)\u000a    for thisComponent in basicWaitComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "basicWait"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = basicWaitClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        # *ISI* period\u000a        if t >= 0.0 and ISI.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            ISI.tStart = t  # underestimates by a little under one frame\u000a            ISI.frameNStart = frameN  # exact frame index\u000a            ISI.start(0.5)\u000a        elif ISI.status == STARTED: #one frame should pass before updating params and completing\u000a            ISI.complete() #finish the static period\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in basicWaitComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "basicWait"-------\u000a    for thisComponent in basicWaitComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'basicLoop'\u000a\u000a\u000a#------Prepare to start Routine "basicEnd"-------\u000at = 0\u000abasicEndClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_3 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_3.status = NOT_STARTED\u000a# keep track of which components have finished\u000abasicEndComponents = []\u000abasicEndComponents.append(text_2)\u000abasicEndComponents.append(key_resp_3)\u000afor thisComponent in basicEndComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "basicEnd"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = basicEndClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_2* updates\u000a    if t >= 0.0 and text_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_2.tStart = t  # underestimates by a little under one frame\u000a        text_2.frameNStart = frameN  # exact frame index\u000a        text_2.setAutoDraw(True)\u000a    \u000a    # *key_resp_3* updates\u000a    if t >= 0.0 and key_resp_3.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_3.tStart = t  # underestimates by a little under one frame\u000a        key_resp_3.frameNStart = frameN  # exact frame index\u000a        key_resp_3.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_3.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_3.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space','return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_3.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_3.rt = key_resp_3.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in basicEndComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "basicEnd"-------\u000afor thisComponent in basicEndComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_3.keys in ['', [], None]:  # No response was made\u000a   key_resp_3.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_3.keys',key_resp_3.keys)\u000aif key_resp_3.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_3.rt', key_resp_3.rt)\u000athisExp.nextEntry()\u000a# the Routine "basicEnd" was not non-slip safe, so reset the non-slip timer\u000a#routineTimer.reset()\u000a#win.close()\u000a#core.quit()\u000a\u000a\u000a##############################################\u000amouseResp = event.Mouse(win=win,visible=False)\u000a\u000a\u000a#------Prepare to start Routine "mainInstruct"-------\u000at = 0\u000amainInstructClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000amainInstructComponents = []\u000amainInstructComponents.append(mainText)\u000amainInstructComponents.append(key_resp_2)\u000afor thisComponent in mainInstructComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "mainInstruct"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = mainInstructClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *mainText* updates\u000a    if t >= 0.0 and mainText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        mainText.tStart = t  # underestimates by a little under one frame\u000a        mainText.frameNStart = frameN  # exact frame index\u000a        mainText.setAutoDraw(True)\u000a    \u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_2.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 'return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_2.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_2.rt = key_resp_2.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in mainInstructComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "mainInstruct"-------\u000afor thisComponent in mainInstructComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_2.keys in ['', [], None]:  # No response was made\u000a   key_resp_2.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_2.keys',key_resp_2.keys)\u000aif key_resp_2.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_2.rt', key_resp_2.rt)\u000athisExp.nextEntry()\u000a# the Routine "mainInstruct" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a#------Prepare to start Routine "buttonInstruct"-------\u000at = 0\u000abuttonInstructClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_3 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_3.status = NOT_STARTED\u000a# keep track of which components have finished\u000abuttonInstructComponents = []\u000abuttonInstructComponents.append(buttonText)\u000abuttonInstructComponents.append(key_resp_3)\u000afor thisComponent in buttonInstructComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "buttonInstruct"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = buttonInstructClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *buttonText* updates\u000a    if t >= 0.0 and buttonText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        buttonText.tStart = t  # underestimates by a little under one frame\u000a        buttonText.frameNStart = frameN  # exact frame index\u000a        buttonText.setAutoDraw(True)\u000a    \u000a    # *key_resp_3* updates\u000a    if t >= 0.0 and key_resp_3.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_3.tStart = t  # underestimates by a little under one frame\u000a        key_resp_3.frameNStart = frameN  # exact frame index\u000a        key_resp_3.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_3.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_3.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 'return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_3.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_3.rt = key_resp_3.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in buttonInstructComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "buttonInstruct"-------\u000afor thisComponent in buttonInstructComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_3.keys in ['', [], None]:  # No response was made\u000a   key_resp_3.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_3.keys',key_resp_3.keys)\u000aif key_resp_3.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_3.rt', key_resp_3.rt)\u000athisExp.nextEntry()\u000a# the Routine "buttonInstruct" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a#------Prepare to start Routine "startScreen"-------\u000at = 0\u000astartScreenClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_4 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_4.status = NOT_STARTED\u000a# keep track of which components have finished\u000astartScreenComponents = []\u000astartScreenComponents.append(startText)\u000astartScreenComponents.append(key_resp_4)\u000afor thisComponent in startScreenComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "startScreen"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = startScreenClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *startText* updates\u000a    if t >= 0.0 and startText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        startText.tStart = t  # underestimates by a little under one frame\u000a        startText.frameNStart = frameN  # exact frame index\u000a        startText.setAutoDraw(True)\u000a    \u000a    # *key_resp_4* updates\u000a    if t >= 0.0 and key_resp_4.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_4.tStart = t  # underestimates by a little under one frame\u000a        key_resp_4.frameNStart = frameN  # exact frame index\u000a        key_resp_4.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_4.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_4.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space','return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_4.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_4.rt = key_resp_4.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in startScreenComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "startScreen"-------\u000afor thisComponent in startScreenComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_4.keys in ['', [], None]:  # No response was made\u000a   key_resp_4.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_4.keys',key_resp_4.keys)\u000aif key_resp_4.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_4.rt', key_resp_4.rt)\u000athisExp.nextEntry()\u000a# the Routine "startScreen" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials = data.TrialHandler(nReps=1, method='sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(pt1Conditions),\u000a    seed=None, name='trials')\u000athisExp.addLoop(trials)  # add the loop to the experiment\u000athisTrial = trials.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrial.rgb)\u000aif thisTrial != None:\u000a    for paramName in thisTrial.keys():\u000a        exec(paramName + '= thisTrial.' + paramName)\u000a\u000afor thisTrial in trials:\u000a    currentLoop = trials\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)\u000a    if thisTrial != None:\u000a        for paramName in thisTrial.keys():\u000a            exec(paramName + '= thisTrial.' + paramName)\u000a\u000a    #------Prepare to start Routine "mainTrial"-------\u000a    t = 0\u000a    mainTrialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    faceImg.setImage(img)\u000a    # setup some python lists for storing info about the mouseResp\u000a    mouseResp.x = []\u000a    mouseResp.y = []\u000a    mouseResp.leftButton = []\u000a    mouseResp.midButton = []\u000a    mouseResp.rightButton = []\u000a    mouseResp.time = []\u000a    # keep track of which components have finished\u000a    mainTrialComponents = []\u000a    mainTrialComponents.append(faceImg)\u000a    mainTrialComponents.append(mouseResp)\u000a    for thisComponent in mainTrialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "mainTrial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = mainTrialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *faceImg* updates\u000a        if t >= 0.0 and faceImg.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            faceImg.tStart = t  # underestimates by a little under one frame\u000a            faceImg.frameNStart = frameN  # exact frame index\u000a            faceImg.setAutoDraw(True)\u000a        # *mouseResp* updates\u000a        if t >= 0.3 and mouseResp.status == NOT_STARTED: ####################################\u000a            # keep track of start time/frame for later\u000a            mouseResp.tStart = t  # underestimates by a little under one frame\u000a            mouseResp.frameNStart = frameN  # exact frame index\u000a            mouseResp.status = STARTED\u000a            event.mouseButtons = [0, 0, 0]  # reset mouse buttons to be 'up'\u000a        if mouseResp.status == STARTED:  # only update if started and not stopped!\u000a            buttons = mouseResp.getPressed()\u000a            if sum([buttons[0],buttons[-1]]) > 0:  # ie if THE LEFT OR RIGHT BUTTON is pressed\u000a                x, y = mouseResp.getPos()\u000a                mouseResp.x.append(x)\u000a                mouseResp.y.append(y)\u000a                mouseResp.leftButton.append(buttons[0])\u000a                mouseResp.midButton.append(buttons[1])\u000a                mouseResp.rightButton.append(buttons[2])\u000a                mouseResp.time.append(mainTrialClock.getTime())\u000a                \u000a                \u000a                \u000a                \u000a                # add a counter\u000a                for morph in ['_00_','_01_','_02_','_03_','_04_','_05_','_06_','_07_','_08_','_09_','_10_']:\u000a                    if morph in img:\u000a                        try:\u000a                            countDict[morph] += 1\u000a                        except:\u000a                            countDict[morph] = 1\u000a                        if buttons[targetButton] == 1:\u000a                            try:\u000a                                hitsDict[morph]+=1\u000a                            except:\u000a                                hitsDict[morph]=1\u000a                                \u000a                # abort routine on response\u000a                continueRoutine = False\u000a                \u000a                # ADDED THE ESC COMMAND INTO THE LOOP, SO WE CAN QUIT ANYTIME\u000a                # check for quit (the Esc key)\u000a                if endExpNow or event.getKeys(keyList=["escape"]):\u000a                    core.quit()\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in mainTrialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "mainTrial"-------\u000a    for thisComponent in mainTrialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for trials (TrialHandler)\u000a    trials.addData('mouseResp.x', mouseResp.x[0])\u000a    trials.addData('mouseResp.y', mouseResp.y[0])\u000a    trials.addData('mouseResp.leftButton', mouseResp.leftButton[0])\u000a    trials.addData('mouseResp.midButton', mouseResp.midButton[0])\u000a    trials.addData('mouseResp.rightButton', mouseResp.rightButton[0])\u000a    trials.addData('mouseResp.time', mouseResp.time[0])\u000a    # the Routine "mainTrial" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'trials'\u000a\u000a\u000a#------Prepare to start Routine "forcedPause"-------\u000at = 0\u000aforcedPauseClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(30.000000)\u000a# update component parameters for each repeat\u000a# keep track of which components have finished\u000aforcedPauseComponents = []\u000aforcedPauseComponents.append(pauseText)\u000afor thisComponent in forcedPauseComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "forcedPause"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = forcedPauseClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *pauseText* updates\u000a    if t >= 0.0 and pauseText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        pauseText.tStart = t  # underestimates by a little under one frame\u000a        pauseText.frameNStart = frameN  # exact frame index\u000a        pauseText.setAutoDraw(True)\u000a    if pauseText.status == STARTED and t >= (0.0 + (30-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        pauseText.setAutoDraw(False)\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in forcedPauseComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "forcedPause"-------\u000afor thisComponent in forcedPauseComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a#------Prepare to start Routine "resumeExperiment"-------\u000at = 0\u000aresumeExperimentClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_5 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_5.status = NOT_STARTED\u000a# keep track of which components have finished\u000aresumeExperimentComponents = []\u000aresumeExperimentComponents.append(resumeText)\u000aresumeExperimentComponents.append(key_resp_5)\u000afor thisComponent in resumeExperimentComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "resumeExperiment"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = resumeExperimentClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *resumeText* updates\u000a    if t >= 0.0 and resumeText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        resumeText.tStart = t  # underestimates by a little under one frame\u000a        resumeText.frameNStart = frameN  # exact frame index\u000a        resumeText.setAutoDraw(True)\u000a    \u000a    # *key_resp_5* updates\u000a    if t >= 0.0 and key_resp_5.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_5.tStart = t  # underestimates by a little under one frame\u000a        key_resp_5.frameNStart = frameN  # exact frame index\u000a        key_resp_5.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_5.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_5.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space','return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_5.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_5.rt = key_resp_5.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in resumeExperimentComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "resumeExperiment"-------\u000afor thisComponent in resumeExperimentComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_5.keys in ['', [], None]:  # No response was made\u000a   key_resp_5.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_5.keys',key_resp_5.keys)\u000aif key_resp_5.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_5.rt', key_resp_5.rt)\u000athisExp.nextEntry()\u000a# the Routine "resumeExperiment" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials2 = data.TrialHandler(nReps=1, method='sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(pt2Conditions),\u000a    seed=None, name='trials2')\u000athisExp.addLoop(trials2)  # add the loop to the experiment\u000athisTrials2 = trials2.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrials2.rgb)\u000aif thisTrials2 != None:\u000a    for paramName in thisTrials2.keys():\u000a        exec(paramName + '= thisTrials2.' + paramName)\u000a\u000afor thisTrials2 in trials2:\u000a    currentLoop = trials2\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrials2.rgb)\u000a    if thisTrials2 != None:\u000a        for paramName in thisTrials2.keys():\u000a            exec(paramName + '= thisTrials2.' + paramName)\u000a    \u000a    #------Prepare to start Routine "mainTrial"-------\u000a    t = 0\u000a    mainTrialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    faceImg.setImage(img)\u000a    # setup some python lists for storing info about the mouseResp\u000a    mouseResp.x = []\u000a    mouseResp.y = []\u000a    mouseResp.leftButton = []\u000a    mouseResp.midButton = []\u000a    mouseResp.rightButton = []\u000a    mouseResp.time = []\u000a    # keep track of which components have finished\u000a    mainTrialComponents = []\u000a    mainTrialComponents.append(faceImg)\u000a    mainTrialComponents.append(mouseResp)\u000a    for thisComponent in mainTrialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "mainTrial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = mainTrialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *faceImg* updates\u000a        if t >= 0.0 and faceImg.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            faceImg.tStart = t  # underestimates by a little under one frame\u000a            faceImg.frameNStart = frameN  # exact frame index\u000a            faceImg.setAutoDraw(True)\u000a            \u000a        # *mouseResp* updates\u000a        if t >= 0.3 and mouseResp.status == NOT_STARTED: #############################################\u000a            # keep track of start time/frame for later\u000a            mouseResp.tStart = t  # underestimates by a little under one frame\u000a            mouseResp.frameNStart = frameN  # exact frame index\u000a            mouseResp.status = STARTED\u000a            event.mouseButtons = [0, 0, 0]  # reset mouse buttons to be 'up'\u000a        if mouseResp.status == STARTED:  # only update if started and not stopped!\u000a            buttons = mouseResp.getPressed()\u000a            if sum([buttons[0],buttons[-1]]) > 0:  # ie if any button is pressed\u000a                x, y = mouseResp.getPos()\u000a                mouseResp.x.append(x)\u000a                mouseResp.y.append(y)\u000a                mouseResp.leftButton.append(buttons[0])\u000a                mouseResp.midButton.append(buttons[1])\u000a                mouseResp.rightButton.append(buttons[2])\u000a                mouseResp.time.append(mainTrialClock.getTime())\u000a                \u000a                # add a counter\u000a                for morph in ['_00_','_01_','_02_','_03_','_04_','_05_','_06_','_07_','_08_','_09_','_10_']:\u000a                    if morph in img:\u000a                        try:\u000a                            countDict[morph] += 1\u000a                        except:\u000a                            countDict[morph] = 1\u000a                        if buttons[targetButton] == 1:\u000a                            try:\u000a                                hitsDict[morph]+=1\u000a                            except:\u000a                                hitsDict[morph]=1\u000a                    \u000a                # abort routine on response\u000a                continueRoutine = False\u000a        \u000a                # ADDED THE ESC COMMAND INTO THE LOOP, SO WE CAN QUIT ANYTIME\u000a                # check for quit (the Esc key)\u000a                if endExpNow or event.getKeys(keyList=["escape"]):\u000a                    core.quit()\u000a                    \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in mainTrialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "mainTrial"-------\u000a    for thisComponent in mainTrialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for trials2 (TrialHandler)\u000a    trials2.addData('mouseResp.x', mouseResp.x[0])\u000a    trials2.addData('mouseResp.y', mouseResp.y[0])\u000a    trials2.addData('mouseResp.leftButton', mouseResp.leftButton[0])\u000a    trials2.addData('mouseResp.midButton', mouseResp.midButton[0])\u000a    trials2.addData('mouseResp.rightButton', mouseResp.rightButton[0])\u000a    trials2.addData('mouseResp.time', mouseResp.time[0])\u000a    \u000a    # the Routine "mainTrial" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'trials2'\u000a\u000a\u000a#------Prepare to start Routine "endInstruct"-------\u000at = 0\u000aendInstructClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_6 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_6.status = NOT_STARTED\u000a# keep track of which components have finished\u000aendInstructComponents = []\u000aendInstructComponents.append(endText)\u000aendInstructComponents.append(key_resp_6)\u000afor thisComponent in endInstructComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "endInstruct"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = endInstructClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *endText* updates\u000a    if t >= 0.0 and endText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        endText.tStart = t  # underestimates by a little under one frame\u000a        endText.frameNStart = frameN  # exact frame index\u000a        endText.setAutoDraw(True)\u000a    \u000a    # *key_resp_6* updates\u000a    if t >= 0.0 and key_resp_6.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_6.tStart = t  # underestimates by a little under one frame\u000a        key_resp_6.frameNStart = frameN  # exact frame index\u000a        key_resp_6.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_6.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_6.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 'return'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_6.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_6.rt = key_resp_6.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in endInstructComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "endInstruct"-------\u000afor thisComponent in endInstructComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a\u000a# Initialize components for Routine "analysisCheck"\u000aanalysisCheckClock = core.Clock()\u000aanalysisText = visual.TextStim(win=win, ori=0, name='analysisText',\u000a    text=str('00'+'\u005ct'+str(countDict['_00_'])+'\u005ct'+str(hitsDict['_00_'])+'\u005cn'+\u000a    '01'+'\u005ct'+str(countDict['_01_'])+'\u005ct'+str(hitsDict['_01_'])+'\u005cn'+\u000a    '02'+'\u005ct'+str(countDict['_02_'])+'\u005ct'+str(hitsDict['_02_'])+'\u005cn'+\u000a    '03'+'\u005ct'+str(countDict['_03_'])+'\u005ct'+str(hitsDict['_03_'])+'\u005cn'+\u000a    '04'+'\u005ct'+str(countDict['_04_'])+'\u005ct'+str(hitsDict['_04_'])+'\u005cn'+\u000a    '05'+'\u005ct'+str(countDict['_05_'])+'\u005ct'+str(hitsDict['_05_'])+'\u005cn'+\u000a    '06'+'\u005ct'+str(countDict['_06_'])+'\u005ct'+str(hitsDict['_06_'])+'\u005cn'+\u000a    '07'+'\u005ct'+str(countDict['_07_'])+'\u005ct'+str(hitsDict['_07_'])+'\u005cn'+\u000a    '08'+'\u005ct'+str(countDict['_08_'])+'\u005ct'+str(hitsDict['_08_'])+'\u005cn'+\u000a    '09'+'\u005ct'+str(countDict['_09_'])+'\u005ct'+str(hitsDict['_09_'])+'\u005cn'+\u000a    '10'+'\u005ct'+str(countDict['_10_'])+'\u005ct'+str(hitsDict['_10_'])), font='Arial',\u000a    pos=[0, 0], height=1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a#------Prepare to start Routine "analysisCheck"-------\u000at = 0\u000aanalysisCheckClock.reset()  # clock\u000aframeN = -1\u000a# update component parameters for each repeat\u000akey_resp_7 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_7.status = NOT_STARTED\u000a# keep track of which components have finished\u000aanalysisCheckComponents = []\u000aanalysisCheckComponents.append(analysisText)\u000aanalysisCheckComponents.append(key_resp_7)\u000afor thisComponent in analysisCheckComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "analysisCheck"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = analysisCheckClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a\u000a    # *analysisText* updates\u000a    if t >= 0.0 and analysisText.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        analysisText.tStart = t  # underestimates by a little under one frame\u000a        analysisText.frameNStart = frameN  # exact frame index\u000a        analysisText.setAutoDraw(True)\u000a\u000a    # *key_resp_7* updates\u000a    if t >= 0.0 and key_resp_7.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_7.tStart = t  # underestimates by a little under one frame\u000a        key_resp_7.frameNStart = frameN  # exact frame index\u000a        key_resp_7.status = STARTED\u000a        # keyboard checking is just starting\u000a        key_resp_7.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_7.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space','return'])\u000a\u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            key_resp_7.keys = theseKeys[-1]  # just the last key pressed\u000a            key_resp_7.rt = key_resp_7.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a\u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in analysisCheckComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "analysisCheck"-------\u000afor thisComponent in analysisCheckComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif key_resp_7.keys in ['', [], None]:  # No response was made\u000a   key_resp_7.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('key_resp_7.keys',key_resp_7.keys)\u000aif key_resp_7.keys != None:  # we had a response\u000a    thisExp.addData('key_resp_7.rt', key_resp_7.rt)\u000athisExp.nextEntry()\u000a# the Routine "analysisCheck" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000awin.close()\u000acore.quit()
p3023
sg2789
(lp3024
sg2791
I140635783337424
sg10
g2831
sg6
g2793
sg2794
I1
sg34
I01
sg35
g36
sg2795
g1
(g2796
g2797
(dp3025
g30
g2809
(g2810
g2800
g2811
S'b'
tRp3026
(I1
(I220
I1
tg2813
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg2808
g2809
(g2810
g2800
g2811
S'b'
tRp3027
(I1
(I220
I1
tg2813
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g2799
(g2800
(I0
tS'b'
tRp3028
(I1
(I220
I1
tg2802
I00
(lp3029
g587
ag597
ag607
ag617
ag627
ag637
ag647
ag657
ag667
ag677
ag687
ag697
ag707
ag717
ag727
ag737
ag747
ag757
ag767
ag777
ag787
ag797
ag807
ag817
ag827
ag837
ag847
ag857
ag867
ag877
ag887
ag897
ag907
ag917
ag927
ag937
ag947
ag957
ag967
ag977
ag987
ag997
ag1007
ag1017
ag1027
ag1037
ag1047
ag1057
ag1067
ag1077
ag1087
ag1097
ag1107
ag1117
ag1127
ag1137
ag1147
ag1157
ag1167
ag1177
ag1187
ag1197
ag1207
ag1217
ag1227
ag1237
ag1247
ag1257
ag1267
ag1277
ag1287
ag1297
ag1307
ag1317
ag1327
ag1337
ag1347
ag1357
ag1367
ag1377
ag1387
ag1397
ag1407
ag1417
ag1427
ag1437
ag1447
ag1457
ag1467
ag1477
ag1487
ag1497
ag1507
ag1517
ag1527
ag1537
ag1547
ag1557
ag1567
ag1577
ag1587
ag1597
ag1607
ag1617
ag1627
ag1637
ag1647
ag1657
ag1667
ag1677
ag1687
ag1697
ag1707
ag1717
ag1727
ag1737
ag1747
ag1757
ag1767
ag1777
ag1787
ag1797
ag1807
ag1817
ag1827
ag1837
ag1847
ag1857
ag1867
ag1877
ag1887
ag1897
ag1907
ag1917
ag1927
ag1937
ag1947
ag1957
ag1967
ag1977
ag1987
ag1997
ag2007
ag2017
ag2027
ag2037
ag2047
ag2057
ag2067
ag2077
ag2087
ag2097
ag2107
ag2117
ag2127
ag2137
ag2147
ag2157
ag2167
ag2177
ag2187
ag2197
ag2207
ag2217
ag2227
ag2237
ag2247
ag2257
ag2267
ag2277
ag2287
ag2297
ag2307
ag2317
ag2327
ag2337
ag2347
ag2357
ag2367
ag2377
ag2387
ag2397
ag2407
ag2417
ag2427
ag2437
ag2447
ag2457
ag2467
ag2477
ag2487
ag2497
ag2507
ag2517
ag2527
ag2537
ag2547
ag2557
ag2567
ag2577
ag2587
ag2597
ag2607
ag2617
ag2627
ag2637
ag2647
ag2657
ag2667
ag2677
ag2687
ag2697
ag2707
ag2717
ag2727
ag2737
ag2747
ag2757
ag2767
ag2777
atbsg29
g2799
(g2800
(I0
tS'b'
tRp3030
(I1
(I220
I1
tg2802
I00
(lp3031
g588
ag598
ag608
ag618
ag628
ag638
ag648
ag658
ag668
ag678
ag688
ag698
ag708
ag718
ag728
ag738
ag748
ag758
ag768
ag778
ag788
ag798
ag808
ag818
ag828
ag838
ag848
ag858
ag868
ag878
ag888
ag898
ag908
ag918
ag928
ag938
ag948
ag958
ag968
ag978
ag988
ag998
ag1008
ag1018
ag1028
ag1038
ag1048
ag1058
ag1068
ag1078
ag1088
ag1098
ag1108
ag1118
ag1128
ag1138
ag1148
ag1158
ag1168
ag1178
ag1188
ag1198
ag1208
ag1218
ag1228
ag1238
ag1248
ag1258
ag1268
ag1278
ag1288
ag1298
ag1308
ag1318
ag1328
ag1338
ag1348
ag1358
ag1368
ag1378
ag1388
ag1398
ag1408
ag1418
ag1428
ag1438
ag1448
ag1458
ag1468
ag1478
ag1488
ag1498
ag1508
ag1518
ag1528
ag1538
ag1548
ag1558
ag1568
ag1578
ag1588
ag1598
ag1608
ag1618
ag1628
ag1638
ag1648
ag1658
ag1668
ag1678
ag1688
ag1698
ag1708
ag1718
ag1728
ag1738
ag1748
ag1758
ag1768
ag1778
ag1788
ag1798
ag1808
ag1818
ag1828
ag1838
ag1848
ag1858
ag1868
ag1878
ag1888
ag1898
ag1908
ag1918
ag1928
ag1938
ag1948
ag1958
ag1968
ag1978
ag1988
ag1998
ag2008
ag2018
ag2028
ag2038
ag2048
ag2058
ag2068
ag2078
ag2088
ag2098
ag2108
ag2118
ag2128
ag2138
ag2148
ag2158
ag2168
ag2178
ag2188
ag2198
ag2208
ag2218
ag2228
ag2238
ag2248
ag2258
ag2268
ag2278
ag2288
ag2298
ag2308
ag2318
ag2328
ag2338
ag2348
ag2358
ag2368
ag2378
ag2388
ag2398
ag2408
ag2418
ag2428
ag2438
ag2448
ag2458
ag2468
ag2478
ag2488
ag2498
ag2508
ag2518
ag2528
ag2538
ag2548
ag2558
ag2568
ag2578
ag2588
ag2598
ag2608
ag2618
ag2628
ag2638
ag2648
ag2658
ag2668
ag2678
ag2688
ag2698
ag2708
ag2718
ag2728
ag2738
ag2748
ag2758
ag2768
ag2778
atbsg31
g2809
(g2810
g2800
g2811
S'b'
tRp3032
(I1
(I220
I1
tg2813
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg32
g2809
(g2810
g2800
g2811
S'b'
tRp3033
(I1
(I220
I1
tg2813
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g2809
(g2810
g2800
g2811
S'b'
tRp3034
(I1
(I220
I1
tg2813
I00
S'vc>A\xe8l?A\xd8\x87^A^b(A\xcc\x96\x15A\x95\x84\x0e@&\xfc\x8c@\xa5\xfc\x14@\x0b\x7fu@\x07\xde\x9a@j\x86\x9e?\x8d%b@\x1a\x19D@Ng\xe5?\x93\x1dq@\xa2^s@\xae(b@\x00W\xbc?\xaeF\xf2?"\xec\xa1@T\xfd\x93@\x9e\x0c\xf2?b\x9f\x00@\xac\xbe\x82?\x8fRd@N\x0eA@\x02\xac\xb4@`\x8c\xf6?\xce\xa8\xe9?\xb0,\xa6@.\xe4\x04@\xac\x02\x8d@x\xfb\x86?Z\x80\xba?&\x07\xb6?\xfa\xd4\x13@\xa6\x0bB@\x8e#\xf0?\x94\xff\xd1?mV)@\x95IE@\xe3\x87\r@\x8c\x88I@\xec"\x80@\xe7o\x1b@\x1a\xbf\xbc@X\xfa\xa6?\x04=\xb8?\x9a]s@\x12\x0c\xa5?(\xee\xfe?\xa6\xee\x04@\xa8\x05\xe3?\x90\xa2\x0f@\xead\xe5?\x18[\x8b@\'\x14\x9d@\xde\xe1\xe0?\x90D\xe5?\xdc\xf3]@\xc2_\x83@&\x8a\x01@\xffvI@\xe0\x88\xc8@\xac\xfe\xc2?\xa6\xcd\xa4?\x1aW\xd6?\xa8\x95\x9e?(k\xf4?\xcf\xc1Z@vS(@^\xdb\x05@\x8c\x93Z?\xc1\xc9\x11@\xc9\xae-@\x02(\xb8?J\xcb\xfa?0L\xf2?m"6@4\xb7\x1f@7\xc0\x10@/\x88+@m\x91I@l-\x98?\xa2&\xd4?\xc62\xc5?\xb6\xd6[@\x8a\x8cw@9\x97w@\xfaB\xb8?\xe6\x063@i\x1f5@\xeet\xcb?\xf4\x8b\x00@P\x1da@w\x83\x1c@l\xb3\x91?\x9f\xcb=@\xf1Kd@\x12\xba\x8f?UPU@\x1fIU@\xe5\xeel@su\xa2@0\x86\x9c?\x08}\xcd?\xe0P\xd4?lH\xf4?\xd8\x13\xe1?J\xbc\xf8?CWr@>\x94\xbc?\xc2\x85\xba?\xe3\xf0\x93@\xc9\xa8\x00@\x1c\xe6\xb1? 1\xb8?\xc6\xc0\x1f@\xd4\xa7\xac@\x98\xa8Y@$\xbd\xa0?,\x8a\x8d@\xd0\xb7<@(bH@F\xf0\xed?%\x95\x0e@r9r@\x85]\x99@\x88\xd7!@\x1f\rn@J\x9cY@\x1e\xd9\xdc?X\xac @\xce\x0b\x86@\xfc\x1b\x88@\xc4\xf0\xed?\xe6-\x9e@^\xf6\x95?d@b@\xb5\xc2\x11@\x86\x1d\x87@&X\x99@:\x7f\xc9?\x9a\x15\xd8@\xae\xd7y@\x9d\xa3v@\xc8\x90\xad?J\xf1\x9a@b\xb4\xf8?*\x1d4@\x04!\xff?\xb2)S@;\x1d4@V^T@\xf8\x16\xb6?Z{\xaf?pz\x8c@\x06\x16%@\xde\xffO@\xfc^\xcd@b\x17\xff?\x06\x85W@\xee\x93h@\x94\xa4\xcb?\x9f[\x0b@\xb6\xc9\xed?<\xf6\xb5?\xcb\x84;@Q\xd8\x8a@\x19\xff\x05@@M\xa9?9\xd5/@\xaeO\xa9?S$\x80@\x9b\x8c\x0e@ \xca\xef?\x9b\x1cC@\xa9\x89,@\x92\r\xd2?G\xab<@\x00r\xf4?\xc4\xf5\xc0?\xa6\xda\xb1?p\xb5/@f\xf5\xdc?\x9e\x9b\x1f@\x8f\x16\x18@\xec\xdbY?j%\x96@\xaa9\x82@\xf6\xc5\xd1?w\x84\x1c@\r\xc8\x02@v\xbd\xdc?\xa4\xd0\x8a@\x93G\x82@\xfd\xa3;@\xd2\xa3\x0f@\xba\xfd\xfc?\x02D\x89@\xb6{\x8f?\xb4\x18\x98?\xees\x9c?\x1c\xda\xc0?4\x84\x1c@m9F@\x028\x90@\n\xb7\xa0?\xd0(\xff?\xceP\x19@(\xb5K@\x8e\xee\x8b@\x9eC\xa0@E\xd9\x03@=*R@\xdc\x10\xc3?\xba\xf5{@ZR\xf4?\x8eV\xab?2\x90\x0e@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg2825
g2809
(g2810
g2800
g2811
S'b'
tRp3035
(I1
(I220
I1
tg2813
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC\x00\x00HC\x00\x00IC\x00\x00JC\x00\x00KC\x00\x00LC\x00\x00MC\x00\x00NC\x00\x00OC\x00\x00PC\x00\x00QC\x00\x00RC\x00\x00SC\x00\x00TC\x00\x00UC\x00\x00VC\x00\x00WC\x00\x00XC\x00\x00YC\x00\x00ZC\x00\x00[C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp3036
(dp3037
g2829
(dp3038
g31
I01
sg2808
I01
sg28
I00
sg29
I00
sg30
I01
sg32
I01
sg33
I01
sg2825
I01
ssg2831
g3021
sg2832
(lp3039
g2808
ag2825
ag28
ag29
ag30
ag31
ag32
ag33
asg2834
(lp3040
I220
aI1
asbsg2836
S'sequential'
p3041
sg2838
g2799
(g2800
(I0
tS'b'
tRp3042
(I1
(I220
I1
tg584
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00!\x00\x00\x00\x00\x00\x00\x00"\x00\x00\x00\x00\x00\x00\x00#\x00\x00\x00\x00\x00\x00\x00$\x00\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x00\x00\x00\x00&\x00\x00\x00\x00\x00\x00\x00\'\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00)\x00\x00\x00\x00\x00\x00\x00*\x00\x00\x00\x00\x00\x00\x00+\x00\x00\x00\x00\x00\x00\x00,\x00\x00\x00\x00\x00\x00\x00-\x00\x00\x00\x00\x00\x00\x00.\x00\x00\x00\x00\x00\x00\x00/\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00\x00\x00\x00\x001\x00\x00\x00\x00\x00\x00\x002\x00\x00\x00\x00\x00\x00\x003\x00\x00\x00\x00\x00\x00\x004\x00\x00\x00\x00\x00\x00\x005\x00\x00\x00\x00\x00\x00\x006\x00\x00\x00\x00\x00\x00\x007\x00\x00\x00\x00\x00\x00\x008\x00\x00\x00\x00\x00\x00\x009\x00\x00\x00\x00\x00\x00\x00:\x00\x00\x00\x00\x00\x00\x00;\x00\x00\x00\x00\x00\x00\x00<\x00\x00\x00\x00\x00\x00\x00=\x00\x00\x00\x00\x00\x00\x00>\x00\x00\x00\x00\x00\x00\x00?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00B\x00\x00\x00\x00\x00\x00\x00C\x00\x00\x00\x00\x00\x00\x00D\x00\x00\x00\x00\x00\x00\x00E\x00\x00\x00\x00\x00\x00\x00F\x00\x00\x00\x00\x00\x00\x00G\x00\x00\x00\x00\x00\x00\x00H\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x00\x00\x00\x00J\x00\x00\x00\x00\x00\x00\x00K\x00\x00\x00\x00\x00\x00\x00L\x00\x00\x00\x00\x00\x00\x00M\x00\x00\x00\x00\x00\x00\x00N\x00\x00\x00\x00\x00\x00\x00O\x00\x00\x00\x00\x00\x00\x00P\x00\x00\x00\x00\x00\x00\x00Q\x00\x00\x00\x00\x00\x00\x00R\x00\x00\x00\x00\x00\x00\x00S\x00\x00\x00\x00\x00\x00\x00T\x00\x00\x00\x00\x00\x00\x00U\x00\x00\x00\x00\x00\x00\x00V\x00\x00\x00\x00\x00\x00\x00W\x00\x00\x00\x00\x00\x00\x00X\x00\x00\x00\x00\x00\x00\x00Y\x00\x00\x00\x00\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x00[\x00\x00\x00\x00\x00\x00\x00\\\x00\x00\x00\x00\x00\x00\x00]\x00\x00\x00\x00\x00\x00\x00^\x00\x00\x00\x00\x00\x00\x00_\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00a\x00\x00\x00\x00\x00\x00\x00b\x00\x00\x00\x00\x00\x00\x00c\x00\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00e\x00\x00\x00\x00\x00\x00\x00f\x00\x00\x00\x00\x00\x00\x00g\x00\x00\x00\x00\x00\x00\x00h\x00\x00\x00\x00\x00\x00\x00i\x00\x00\x00\x00\x00\x00\x00j\x00\x00\x00\x00\x00\x00\x00k\x00\x00\x00\x00\x00\x00\x00l\x00\x00\x00\x00\x00\x00\x00m\x00\x00\x00\x00\x00\x00\x00n\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00\x00\x00\x00\x00p\x00\x00\x00\x00\x00\x00\x00q\x00\x00\x00\x00\x00\x00\x00r\x00\x00\x00\x00\x00\x00\x00s\x00\x00\x00\x00\x00\x00\x00t\x00\x00\x00\x00\x00\x00\x00u\x00\x00\x00\x00\x00\x00\x00v\x00\x00\x00\x00\x00\x00\x00w\x00\x00\x00\x00\x00\x00\x00x\x00\x00\x00\x00\x00\x00\x00y\x00\x00\x00\x00\x00\x00\x00z\x00\x00\x00\x00\x00\x00\x00{\x00\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x00\x00\x00\x00}\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x81\x00\x00\x00\x00\x00\x00\x00\x82\x00\x00\x00\x00\x00\x00\x00\x83\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x85\x00\x00\x00\x00\x00\x00\x00\x86\x00\x00\x00\x00\x00\x00\x00\x87\x00\x00\x00\x00\x00\x00\x00\x88\x00\x00\x00\x00\x00\x00\x00\x89\x00\x00\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x8c\x00\x00\x00\x00\x00\x00\x00\x8d\x00\x00\x00\x00\x00\x00\x00\x8e\x00\x00\x00\x00\x00\x00\x00\x8f\x00\x00\x00\x00\x00\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\x91\x00\x00\x00\x00\x00\x00\x00\x92\x00\x00\x00\x00\x00\x00\x00\x93\x00\x00\x00\x00\x00\x00\x00\x94\x00\x00\x00\x00\x00\x00\x00\x95\x00\x00\x00\x00\x00\x00\x00\x96\x00\x00\x00\x00\x00\x00\x00\x97\x00\x00\x00\x00\x00\x00\x00\x98\x00\x00\x00\x00\x00\x00\x00\x99\x00\x00\x00\x00\x00\x00\x00\x9a\x00\x00\x00\x00\x00\x00\x00\x9b\x00\x00\x00\x00\x00\x00\x00\x9c\x00\x00\x00\x00\x00\x00\x00\x9d\x00\x00\x00\x00\x00\x00\x00\x9e\x00\x00\x00\x00\x00\x00\x00\x9f\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x00\x00\x00\x00\x00\xa1\x00\x00\x00\x00\x00\x00\x00\xa2\x00\x00\x00\x00\x00\x00\x00\xa3\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00\x00\x00\x00\x00\xa5\x00\x00\x00\x00\x00\x00\x00\xa6\x00\x00\x00\x00\x00\x00\x00\xa7\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x00\x00\x00\x00\x00\xa9\x00\x00\x00\x00\x00\x00\x00\xaa\x00\x00\x00\x00\x00\x00\x00\xab\x00\x00\x00\x00\x00\x00\x00\xac\x00\x00\x00\x00\x00\x00\x00\xad\x00\x00\x00\x00\x00\x00\x00\xae\x00\x00\x00\x00\x00\x00\x00\xaf\x00\x00\x00\x00\x00\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00\xb1\x00\x00\x00\x00\x00\x00\x00\xb2\x00\x00\x00\x00\x00\x00\x00\xb3\x00\x00\x00\x00\x00\x00\x00\xb4\x00\x00\x00\x00\x00\x00\x00\xb5\x00\x00\x00\x00\x00\x00\x00\xb6\x00\x00\x00\x00\x00\x00\x00\xb7\x00\x00\x00\x00\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00\xb9\x00\x00\x00\x00\x00\x00\x00\xba\x00\x00\x00\x00\x00\x00\x00\xbb\x00\x00\x00\x00\x00\x00\x00\xbc\x00\x00\x00\x00\x00\x00\x00\xbd\x00\x00\x00\x00\x00\x00\x00\xbe\x00\x00\x00\x00\x00\x00\x00\xbf\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\xc1\x00\x00\x00\x00\x00\x00\x00\xc2\x00\x00\x00\x00\x00\x00\x00\xc3\x00\x00\x00\x00\x00\x00\x00\xc4\x00\x00\x00\x00\x00\x00\x00\xc5\x00\x00\x00\x00\x00\x00\x00\xc6\x00\x00\x00\x00\x00\x00\x00\xc7\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00\xc9\x00\x00\x00\x00\x00\x00\x00\xca\x00\x00\x00\x00\x00\x00\x00\xcb\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\xcd\x00\x00\x00\x00\x00\x00\x00\xce\x00\x00\x00\x00\x00\x00\x00\xcf\x00\x00\x00\x00\x00\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\xd1\x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x00\x00\x00\x00\xd3\x00\x00\x00\x00\x00\x00\x00\xd4\x00\x00\x00\x00\x00\x00\x00\xd5\x00\x00\x00\x00\x00\x00\x00\xd6\x00\x00\x00\x00\x00\x00\x00\xd7\x00\x00\x00\x00\x00\x00\x00\xd8\x00\x00\x00\x00\x00\x00\x00\xd9\x00\x00\x00\x00\x00\x00\x00\xda\x00\x00\x00\x00\x00\x00\x00\xdb\x00\x00\x00\x00\x00\x00\x00'
tbsg2841
I01
sg2842
I1
sg2843
I-1
sg2844
(lp3043
g1
(g2846
g2797
(dp3044
g56
g589
sg581
g582
stRp3045
ag1
(g2846
g2797
(dp3046
g56
g599
sg581
g593
stRp3047
ag1
(g2846
g2797
(dp3048
g56
g609
sg581
g603
stRp3049
ag1
(g2846
g2797
(dp3050
g56
g619
sg581
g613
stRp3051
ag1
(g2846
g2797
(dp3052
g56
g629
sg581
g623
stRp3053
ag1
(g2846
g2797
(dp3054
g56
g639
sg581
g633
stRp3055
ag1
(g2846
g2797
(dp3056
g56
g649
sg581
g643
stRp3057
ag1
(g2846
g2797
(dp3058
g56
g659
sg581
g653
stRp3059
ag1
(g2846
g2797
(dp3060
g56
g669
sg581
g663
stRp3061
ag1
(g2846
g2797
(dp3062
g56
g679
sg581
g673
stRp3063
ag1
(g2846
g2797
(dp3064
g56
g689
sg581
g683
stRp3065
ag1
(g2846
g2797
(dp3066
g56
g699
sg581
g693
stRp3067
ag1
(g2846
g2797
(dp3068
g56
g709
sg581
g703
stRp3069
ag1
(g2846
g2797
(dp3070
g56
g719
sg581
g713
stRp3071
ag1
(g2846
g2797
(dp3072
g56
g729
sg581
g723
stRp3073
ag1
(g2846
g2797
(dp3074
g56
g739
sg581
g733
stRp3075
ag1
(g2846
g2797
(dp3076
g56
g749
sg581
g743
stRp3077
ag1
(g2846
g2797
(dp3078
g56
g759
sg581
g753
stRp3079
ag1
(g2846
g2797
(dp3080
g56
g769
sg581
g763
stRp3081
ag1
(g2846
g2797
(dp3082
g56
g779
sg581
g773
stRp3083
ag1
(g2846
g2797
(dp3084
g56
g789
sg581
g783
stRp3085
ag1
(g2846
g2797
(dp3086
g56
g799
sg581
g793
stRp3087
ag1
(g2846
g2797
(dp3088
g56
g809
sg581
g803
stRp3089
ag1
(g2846
g2797
(dp3090
g56
g819
sg581
g813
stRp3091
ag1
(g2846
g2797
(dp3092
g56
g829
sg581
g823
stRp3093
ag1
(g2846
g2797
(dp3094
g56
g839
sg581
g833
stRp3095
ag1
(g2846
g2797
(dp3096
g56
g849
sg581
g843
stRp3097
ag1
(g2846
g2797
(dp3098
g56
g859
sg581
g853
stRp3099
ag1
(g2846
g2797
(dp3100
g56
g869
sg581
g863
stRp3101
ag1
(g2846
g2797
(dp3102
g56
g879
sg581
g873
stRp3103
ag1
(g2846
g2797
(dp3104
g56
g889
sg581
g883
stRp3105
ag1
(g2846
g2797
(dp3106
g56
g899
sg581
g893
stRp3107
ag1
(g2846
g2797
(dp3108
g56
g909
sg581
g903
stRp3109
ag1
(g2846
g2797
(dp3110
g56
g919
sg581
g913
stRp3111
ag1
(g2846
g2797
(dp3112
g56
g929
sg581
g923
stRp3113
ag1
(g2846
g2797
(dp3114
g56
g939
sg581
g933
stRp3115
ag1
(g2846
g2797
(dp3116
g56
g949
sg581
g943
stRp3117
ag1
(g2846
g2797
(dp3118
g56
g959
sg581
g953
stRp3119
ag1
(g2846
g2797
(dp3120
g56
g969
sg581
g963
stRp3121
ag1
(g2846
g2797
(dp3122
g56
g979
sg581
g973
stRp3123
ag1
(g2846
g2797
(dp3124
g56
g989
sg581
g983
stRp3125
ag1
(g2846
g2797
(dp3126
g56
g999
sg581
g993
stRp3127
ag1
(g2846
g2797
(dp3128
g56
g1009
sg581
g1003
stRp3129
ag1
(g2846
g2797
(dp3130
g56
g1019
sg581
g1013
stRp3131
ag1
(g2846
g2797
(dp3132
g56
g1029
sg581
g1023
stRp3133
ag1
(g2846
g2797
(dp3134
g56
g1039
sg581
g1033
stRp3135
ag1
(g2846
g2797
(dp3136
g56
g1049
sg581
g1043
stRp3137
ag1
(g2846
g2797
(dp3138
g56
g1059
sg581
g1053
stRp3139
ag1
(g2846
g2797
(dp3140
g56
g1069
sg581
g1063
stRp3141
ag1
(g2846
g2797
(dp3142
g56
g1079
sg581
g1073
stRp3143
ag1
(g2846
g2797
(dp3144
g56
g1089
sg581
g1083
stRp3145
ag1
(g2846
g2797
(dp3146
g56
g1099
sg581
g1093
stRp3147
ag1
(g2846
g2797
(dp3148
g56
g1109
sg581
g1103
stRp3149
ag1
(g2846
g2797
(dp3150
g56
g1119
sg581
g1113
stRp3151
ag1
(g2846
g2797
(dp3152
g56
g1129
sg581
g1123
stRp3153
ag1
(g2846
g2797
(dp3154
g56
g1139
sg581
g1133
stRp3155
ag1
(g2846
g2797
(dp3156
g56
g1149
sg581
g1143
stRp3157
ag1
(g2846
g2797
(dp3158
g56
g1159
sg581
g1153
stRp3159
ag1
(g2846
g2797
(dp3160
g56
g1169
sg581
g1163
stRp3161
ag1
(g2846
g2797
(dp3162
g56
g1179
sg581
g1173
stRp3163
ag1
(g2846
g2797
(dp3164
g56
g1189
sg581
g1183
stRp3165
ag1
(g2846
g2797
(dp3166
g56
g1199
sg581
g1193
stRp3167
ag1
(g2846
g2797
(dp3168
g56
g1209
sg581
g1203
stRp3169
ag1
(g2846
g2797
(dp3170
g56
g1219
sg581
g1213
stRp3171
ag1
(g2846
g2797
(dp3172
g56
g1229
sg581
g1223
stRp3173
ag1
(g2846
g2797
(dp3174
g56
g1239
sg581
g1233
stRp3175
ag1
(g2846
g2797
(dp3176
g56
g1249
sg581
g1243
stRp3177
ag1
(g2846
g2797
(dp3178
g56
g1259
sg581
g1253
stRp3179
ag1
(g2846
g2797
(dp3180
g56
g1269
sg581
g1263
stRp3181
ag1
(g2846
g2797
(dp3182
g56
g1279
sg581
g1273
stRp3183
ag1
(g2846
g2797
(dp3184
g56
g1289
sg581
g1283
stRp3185
ag1
(g2846
g2797
(dp3186
g56
g1299
sg581
g1293
stRp3187
ag1
(g2846
g2797
(dp3188
g56
g1309
sg581
g1303
stRp3189
ag1
(g2846
g2797
(dp3190
g56
g1319
sg581
g1313
stRp3191
ag1
(g2846
g2797
(dp3192
g56
g1329
sg581
g1323
stRp3193
ag1
(g2846
g2797
(dp3194
g56
g1339
sg581
g1333
stRp3195
ag1
(g2846
g2797
(dp3196
g56
g1349
sg581
g1343
stRp3197
ag1
(g2846
g2797
(dp3198
g56
g1359
sg581
g1353
stRp3199
ag1
(g2846
g2797
(dp3200
g56
g1369
sg581
g1363
stRp3201
ag1
(g2846
g2797
(dp3202
g56
g1379
sg581
g1373
stRp3203
ag1
(g2846
g2797
(dp3204
g56
g1389
sg581
g1383
stRp3205
ag1
(g2846
g2797
(dp3206
g56
g1399
sg581
g1393
stRp3207
ag1
(g2846
g2797
(dp3208
g56
g1409
sg581
g1403
stRp3209
ag1
(g2846
g2797
(dp3210
g56
g1419
sg581
g1413
stRp3211
ag1
(g2846
g2797
(dp3212
g56
g1429
sg581
g1423
stRp3213
ag1
(g2846
g2797
(dp3214
g56
g1439
sg581
g1433
stRp3215
ag1
(g2846
g2797
(dp3216
g56
g1449
sg581
g1443
stRp3217
ag1
(g2846
g2797
(dp3218
g56
g1459
sg581
g1453
stRp3219
ag1
(g2846
g2797
(dp3220
g56
g1469
sg581
g1463
stRp3221
ag1
(g2846
g2797
(dp3222
g56
g1479
sg581
g1473
stRp3223
ag1
(g2846
g2797
(dp3224
g56
g1489
sg581
g1483
stRp3225
ag1
(g2846
g2797
(dp3226
g56
g1499
sg581
g1493
stRp3227
ag1
(g2846
g2797
(dp3228
g56
g1509
sg581
g1503
stRp3229
ag1
(g2846
g2797
(dp3230
g56
g1519
sg581
g1513
stRp3231
ag1
(g2846
g2797
(dp3232
g56
g1529
sg581
g1523
stRp3233
ag1
(g2846
g2797
(dp3234
g56
g1539
sg581
g1533
stRp3235
ag1
(g2846
g2797
(dp3236
g56
g1549
sg581
g1543
stRp3237
ag1
(g2846
g2797
(dp3238
g56
g1559
sg581
g1553
stRp3239
ag1
(g2846
g2797
(dp3240
g56
g1569
sg581
g1563
stRp3241
ag1
(g2846
g2797
(dp3242
g56
g1579
sg581
g1573
stRp3243
ag1
(g2846
g2797
(dp3244
g56
g1589
sg581
g1583
stRp3245
ag1
(g2846
g2797
(dp3246
g56
g1599
sg581
g1593
stRp3247
ag1
(g2846
g2797
(dp3248
g56
g1609
sg581
g1603
stRp3249
ag1
(g2846
g2797
(dp3250
g56
g1619
sg581
g1613
stRp3251
ag1
(g2846
g2797
(dp3252
g56
g1629
sg581
g1623
stRp3253
ag1
(g2846
g2797
(dp3254
g56
g1639
sg581
g1633
stRp3255
ag1
(g2846
g2797
(dp3256
g56
g1649
sg581
g1643
stRp3257
ag1
(g2846
g2797
(dp3258
g56
g1659
sg581
g1653
stRp3259
ag1
(g2846
g2797
(dp3260
g56
g1669
sg581
g1663
stRp3261
ag1
(g2846
g2797
(dp3262
g56
g1679
sg581
g1673
stRp3263
ag1
(g2846
g2797
(dp3264
g56
g1689
sg581
g1683
stRp3265
ag1
(g2846
g2797
(dp3266
g56
g1699
sg581
g1693
stRp3267
ag1
(g2846
g2797
(dp3268
g56
g1709
sg581
g1703
stRp3269
ag1
(g2846
g2797
(dp3270
g56
g1719
sg581
g1713
stRp3271
ag1
(g2846
g2797
(dp3272
g56
g1729
sg581
g1723
stRp3273
ag1
(g2846
g2797
(dp3274
g56
g1739
sg581
g1733
stRp3275
ag1
(g2846
g2797
(dp3276
g56
g1749
sg581
g1743
stRp3277
ag1
(g2846
g2797
(dp3278
g56
g1759
sg581
g1753
stRp3279
ag1
(g2846
g2797
(dp3280
g56
g1769
sg581
g1763
stRp3281
ag1
(g2846
g2797
(dp3282
g56
g1779
sg581
g1773
stRp3283
ag1
(g2846
g2797
(dp3284
g56
g1789
sg581
g1783
stRp3285
ag1
(g2846
g2797
(dp3286
g56
g1799
sg581
g1793
stRp3287
ag1
(g2846
g2797
(dp3288
g56
g1809
sg581
g1803
stRp3289
ag1
(g2846
g2797
(dp3290
g56
g1819
sg581
g1813
stRp3291
ag1
(g2846
g2797
(dp3292
g56
g1829
sg581
g1823
stRp3293
ag1
(g2846
g2797
(dp3294
g56
g1839
sg581
g1833
stRp3295
ag1
(g2846
g2797
(dp3296
g56
g1849
sg581
g1843
stRp3297
ag1
(g2846
g2797
(dp3298
g56
g1859
sg581
g1853
stRp3299
ag1
(g2846
g2797
(dp3300
g56
g1869
sg581
g1863
stRp3301
ag1
(g2846
g2797
(dp3302
g56
g1879
sg581
g1873
stRp3303
ag1
(g2846
g2797
(dp3304
g56
g1889
sg581
g1883
stRp3305
ag1
(g2846
g2797
(dp3306
g56
g1899
sg581
g1893
stRp3307
ag1
(g2846
g2797
(dp3308
g56
g1909
sg581
g1903
stRp3309
ag1
(g2846
g2797
(dp3310
g56
g1919
sg581
g1913
stRp3311
ag1
(g2846
g2797
(dp3312
g56
g1929
sg581
g1923
stRp3313
ag1
(g2846
g2797
(dp3314
g56
g1939
sg581
g1933
stRp3315
ag1
(g2846
g2797
(dp3316
g56
g1949
sg581
g1943
stRp3317
ag1
(g2846
g2797
(dp3318
g56
g1959
sg581
g1953
stRp3319
ag1
(g2846
g2797
(dp3320
g56
g1969
sg581
g1963
stRp3321
ag1
(g2846
g2797
(dp3322
g56
g1979
sg581
g1973
stRp3323
ag1
(g2846
g2797
(dp3324
g56
g1989
sg581
g1983
stRp3325
ag1
(g2846
g2797
(dp3326
g56
g1999
sg581
g1993
stRp3327
ag1
(g2846
g2797
(dp3328
g56
g2009
sg581
g2003
stRp3329
ag1
(g2846
g2797
(dp3330
g56
g2019
sg581
g2013
stRp3331
ag1
(g2846
g2797
(dp3332
g56
g2029
sg581
g2023
stRp3333
ag1
(g2846
g2797
(dp3334
g56
g2039
sg581
g2033
stRp3335
ag1
(g2846
g2797
(dp3336
g56
g2049
sg581
g2043
stRp3337
ag1
(g2846
g2797
(dp3338
g56
g2059
sg581
g2053
stRp3339
ag1
(g2846
g2797
(dp3340
g56
g2069
sg581
g2063
stRp3341
ag1
(g2846
g2797
(dp3342
g56
g2079
sg581
g2073
stRp3343
ag1
(g2846
g2797
(dp3344
g56
g2089
sg581
g2083
stRp3345
ag1
(g2846
g2797
(dp3346
g56
g2099
sg581
g2093
stRp3347
ag1
(g2846
g2797
(dp3348
g56
g2109
sg581
g2103
stRp3349
ag1
(g2846
g2797
(dp3350
g56
g2119
sg581
g2113
stRp3351
ag1
(g2846
g2797
(dp3352
g56
g2129
sg581
g2123
stRp3353
ag1
(g2846
g2797
(dp3354
g56
g2139
sg581
g2133
stRp3355
ag1
(g2846
g2797
(dp3356
g56
g2149
sg581
g2143
stRp3357
ag1
(g2846
g2797
(dp3358
g56
g2159
sg581
g2153
stRp3359
ag1
(g2846
g2797
(dp3360
g56
g2169
sg581
g2163
stRp3361
ag1
(g2846
g2797
(dp3362
g56
g2179
sg581
g2173
stRp3363
ag1
(g2846
g2797
(dp3364
g56
g2189
sg581
g2183
stRp3365
ag1
(g2846
g2797
(dp3366
g56
g2199
sg581
g2193
stRp3367
ag1
(g2846
g2797
(dp3368
g56
g2209
sg581
g2203
stRp3369
ag1
(g2846
g2797
(dp3370
g56
g2219
sg581
g2213
stRp3371
ag1
(g2846
g2797
(dp3372
g56
g2229
sg581
g2223
stRp3373
ag1
(g2846
g2797
(dp3374
g56
g2239
sg581
g2233
stRp3375
ag1
(g2846
g2797
(dp3376
g56
g2249
sg581
g2243
stRp3377
ag1
(g2846
g2797
(dp3378
g56
g2259
sg581
g2253
stRp3379
ag1
(g2846
g2797
(dp3380
g56
g2269
sg581
g2263
stRp3381
ag1
(g2846
g2797
(dp3382
g56
g2279
sg581
g2273
stRp3383
ag1
(g2846
g2797
(dp3384
g56
g2289
sg581
g2283
stRp3385
ag1
(g2846
g2797
(dp3386
g56
g2299
sg581
g2293
stRp3387
ag1
(g2846
g2797
(dp3388
g56
g2309
sg581
g2303
stRp3389
ag1
(g2846
g2797
(dp3390
g56
g2319
sg581
g2313
stRp3391
ag1
(g2846
g2797
(dp3392
g56
g2329
sg581
g2323
stRp3393
ag1
(g2846
g2797
(dp3394
g56
g2339
sg581
g2333
stRp3395
ag1
(g2846
g2797
(dp3396
g56
g2349
sg581
g2343
stRp3397
ag1
(g2846
g2797
(dp3398
g56
g2359
sg581
g2353
stRp3399
ag1
(g2846
g2797
(dp3400
g56
g2369
sg581
g2363
stRp3401
ag1
(g2846
g2797
(dp3402
g56
g2379
sg581
g2373
stRp3403
ag1
(g2846
g2797
(dp3404
g56
g2389
sg581
g2383
stRp3405
ag1
(g2846
g2797
(dp3406
g56
g2399
sg581
g2393
stRp3407
ag1
(g2846
g2797
(dp3408
g56
g2409
sg581
g2403
stRp3409
ag1
(g2846
g2797
(dp3410
g56
g2419
sg581
g2413
stRp3411
ag1
(g2846
g2797
(dp3412
g56
g2429
sg581
g2423
stRp3413
ag1
(g2846
g2797
(dp3414
g56
g2439
sg581
g2433
stRp3415
ag1
(g2846
g2797
(dp3416
g56
g2449
sg581
g2443
stRp3417
ag1
(g2846
g2797
(dp3418
g56
g2459
sg581
g2453
stRp3419
ag1
(g2846
g2797
(dp3420
g56
g2469
sg581
g2463
stRp3421
ag1
(g2846
g2797
(dp3422
g56
g2479
sg581
g2473
stRp3423
ag1
(g2846
g2797
(dp3424
g56
g2489
sg581
g2483
stRp3425
ag1
(g2846
g2797
(dp3426
g56
g2499
sg581
g2493
stRp3427
ag1
(g2846
g2797
(dp3428
g56
g2509
sg581
g2503
stRp3429
ag1
(g2846
g2797
(dp3430
g56
g2519
sg581
g2513
stRp3431
ag1
(g2846
g2797
(dp3432
g56
g2529
sg581
g2523
stRp3433
ag1
(g2846
g2797
(dp3434
g56
g2539
sg581
g2533
stRp3435
ag1
(g2846
g2797
(dp3436
g56
g2549
sg581
g2543
stRp3437
ag1
(g2846
g2797
(dp3438
g56
g2559
sg581
g2553
stRp3439
ag1
(g2846
g2797
(dp3440
g56
g2569
sg581
g2563
stRp3441
ag1
(g2846
g2797
(dp3442
g56
g2579
sg581
g2573
stRp3443
ag1
(g2846
g2797
(dp3444
g56
g2589
sg581
g2583
stRp3445
ag1
(g2846
g2797
(dp3446
g56
g2599
sg581
g2593
stRp3447
ag1
(g2846
g2797
(dp3448
g56
g2609
sg581
g2603
stRp3449
ag1
(g2846
g2797
(dp3450
g56
g2619
sg581
g2613
stRp3451
ag1
(g2846
g2797
(dp3452
g56
g2629
sg581
g2623
stRp3453
ag1
(g2846
g2797
(dp3454
g56
g2639
sg581
g2633
stRp3455
ag1
(g2846
g2797
(dp3456
g56
g2649
sg581
g2643
stRp3457
ag1
(g2846
g2797
(dp3458
g56
g2659
sg581
g2653
stRp3459
ag1
(g2846
g2797
(dp3460
g56
g2669
sg581
g2663
stRp3461
ag1
(g2846
g2797
(dp3462
g56
g2679
sg581
g2673
stRp3463
ag1
(g2846
g2797
(dp3464
g56
g2689
sg581
g2683
stRp3465
ag1
(g2846
g2797
(dp3466
g56
g2699
sg581
g2693
stRp3467
ag1
(g2846
g2797
(dp3468
g56
g2709
sg581
g2703
stRp3469
ag1
(g2846
g2797
(dp3470
g56
g2719
sg581
g2713
stRp3471
ag1
(g2846
g2797
(dp3472
g56
g2729
sg581
g2723
stRp3473
ag1
(g2846
g2797
(dp3474
g56
g2739
sg581
g2733
stRp3475
ag1
(g2846
g2797
(dp3476
g56
g2749
sg581
g2743
stRp3477
ag1
(g2846
g2797
(dp3478
g56
g2759
sg581
g2753
stRp3479
ag1
(g2846
g2797
(dp3480
g56
g2769
sg581
g2763
stRp3481
ag1
(g2846
g2797
(dp3482
g56
g2779
sg581
g2773
stRp3483
asg3015
Nsg3016
g2775
sg3017
I220
sg3018
I0
sg3019
I220
sg3020
I01
sbasS'savePickle'
p3484
I00
sb.